
Embedded_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007a78  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002ac  20000000  00007a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000023c  200002ac  00007d24  000202ac  2**2
                  ALLOC
  3 .stack        00001000  200004e8  00007f60  000202ac  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000202d6  2**0
                  CONTENTS, READONLY
  6 .debug_info   00017ba6  00000000  00000000  0002032f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e37  00000000  00000000  00037ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000bb8  00000000  00000000  0003ad0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00031c48  00000000  00000000  0003b8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00010022  00000000  00000000  0006d50c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000eaca0  00000000  00000000  0007d52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000621c  00000000  00000000  001681ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b78  00000000  00000000  0016e3ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003a4c  00000000  00000000  0016ef64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
       0:	e8 14 00 20 89 3a 00 00 81 3a 00 00 81 3a 00 00     ... .:...:...:..
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      10:	81 3a 00 00 81 3a 00 00 81 3a 00 00 00 00 00 00     .:...:...:......
	...
	if (cpu_irq_critical_section_counter == 0) {
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
      2c:	81 3a 00 00 81 3a 00 00 00 00 00 00 81 3a 00 00     .:...:.......:..
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
      3c:	b5 3f 00 00 81 3a 00 00 e5 19 00 00 f9 19 00 00     .?...:..........
}
      4c:	0d 1a 00 00 21 1a 00 00 35 1a 00 00 49 1a 00 00     ....!...5...I...
      5c:	5d 1a 00 00 71 1a 00 00 85 1a 00 00 99 1a 00 00     ]...q...........
      6c:	ad 1a 00 00 c1 1a 00 00 d5 1a 00 00 e9 1a 00 00     ................
      7c:	fd 1a 00 00 11 1b 00 00 81 3a 00 00 81 3a 00 00     .........:...:..
      8c:	81 3a 00 00 81 3a 00 00 81 3a 00 00 81 3a 00 00     .:...:...:...:..
      9c:	81 3a 00 00 81 3a 00 00 c9 02 00 00 dd 02 00 00     .:...:..........
      ac:	f5 02 00 00 0d 03 00 00 25 03 00 00 39 03 00 00     ........%...9...
      bc:	51 03 00 00 69 03 00 00 81 03 00 00 95 03 00 00     Q...i...........
      cc:	ad 03 00 00 c5 03 00 00 81 3a 00 00 81 3a 00 00     .........:...:..
      dc:	81 3a 00 00 81 3a 00 00 81 3a 00 00 81 3a 00 00     .:...:...:...:..
      ec:	81 3a 00 00 81 3a 00 00 81 3a 00 00 81 3a 00 00     .:...:...:...:..
      fc:	81 3a 00 00 81 3a 00 00 81 3a 00 00 81 3a 00 00     .:...:...:...:..
     10c:	81 3a 00 00 81 3a 00 00 81 3a 00 00 81 3a 00 00     .:...:...:...:..
     11c:	0d 40 00 00 81 3a 00 00 81 3a 00 00 81 3a 00 00     .@...:...:...:..
     12c:	81 3a 00 00 81 3a 00 00 25 16 00 00 81 3a 00 00     .:...:..%....:..
     13c:	3d 16 00 00 81 3a 00 00 81 3a 00 00 81 3a 00 00     =....:...:...:..
     14c:	81 3a 00 00 81 3a 00 00 81 3a 00 00 81 3a 00 00     .:...:...:...:..
     15c:	81 3a 00 00 81 3a 00 00 81 3a 00 00 81 3a 00 00     .:...:...:...:..
     16c:	81 3a 00 00 81 3a 00 00 55 16 00 00 6d 16 00 00     .:...:..U...m...
     17c:	15 23 00 00                                         .#..

00000180 <__do_global_dtors_aux>:
     180:	b510      	push	{r4, lr}
     182:	4c05      	ldr	r4, [pc, #20]	; (198 <__do_global_dtors_aux+0x18>)
     184:	7823      	ldrb	r3, [r4, #0]
     186:	b933      	cbnz	r3, 196 <__do_global_dtors_aux+0x16>
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <__do_global_dtors_aux+0x1c>)
     18a:	b113      	cbz	r3, 192 <__do_global_dtors_aux+0x12>
     18c:	4804      	ldr	r0, [pc, #16]	; (1a0 <__do_global_dtors_aux+0x20>)
     18e:	f3af 8000 	nop.w
     192:	2301      	movs	r3, #1
     194:	7023      	strb	r3, [r4, #0]
     196:	bd10      	pop	{r4, pc}
     198:	200002ac 	.word	0x200002ac
     19c:	00000000 	.word	0x00000000
     1a0:	00007a78 	.word	0x00007a78

000001a4 <frame_dummy>:
     1a4:	4b0c      	ldr	r3, [pc, #48]	; (1d8 <frame_dummy+0x34>)
     1a6:	b143      	cbz	r3, 1ba <frame_dummy+0x16>
     1a8:	480c      	ldr	r0, [pc, #48]	; (1dc <frame_dummy+0x38>)
     1aa:	490d      	ldr	r1, [pc, #52]	; (1e0 <frame_dummy+0x3c>)
     1ac:	b510      	push	{r4, lr}
     1ae:	f3af 8000 	nop.w
     1b2:	480c      	ldr	r0, [pc, #48]	; (1e4 <frame_dummy+0x40>)
     1b4:	6803      	ldr	r3, [r0, #0]
     1b6:	b923      	cbnz	r3, 1c2 <frame_dummy+0x1e>
     1b8:	bd10      	pop	{r4, pc}
     1ba:	480a      	ldr	r0, [pc, #40]	; (1e4 <frame_dummy+0x40>)
     1bc:	6803      	ldr	r3, [r0, #0]
     1be:	b933      	cbnz	r3, 1ce <frame_dummy+0x2a>
     1c0:	4770      	bx	lr
     1c2:	4b09      	ldr	r3, [pc, #36]	; (1e8 <frame_dummy+0x44>)
     1c4:	2b00      	cmp	r3, #0
     1c6:	d0f7      	beq.n	1b8 <frame_dummy+0x14>
     1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     1cc:	4718      	bx	r3
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <frame_dummy+0x44>)
     1d0:	2b00      	cmp	r3, #0
     1d2:	d0f5      	beq.n	1c0 <frame_dummy+0x1c>
     1d4:	4718      	bx	r3
     1d6:	bf00      	nop
     1d8:	00000000 	.word	0x00000000
     1dc:	00007a78 	.word	0x00007a78
     1e0:	200002b0 	.word	0x200002b0
     1e4:	00007a78 	.word	0x00007a78
     1e8:	00000000 	.word	0x00000000

000001ec <ioport_pin_to_port_id>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Port ID for the given pin ID
 */
static inline ioport_port_t ioport_pin_to_port_id(ioport_pin_t pin)
{
     1ec:	b480      	push	{r7}
     1ee:	b085      	sub	sp, #20
     1f0:	af00      	add	r7, sp, #0
     1f2:	6078      	str	r0, [r7, #4]
     1f4:	687b      	ldr	r3, [r7, #4]
     1f6:	60fb      	str	r3, [r7, #12]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     1f8:	68fb      	ldr	r3, [r7, #12]
     1fa:	095b      	lsrs	r3, r3, #5
	return arch_ioport_pin_to_port_id(pin);
     1fc:	bf00      	nop
}
     1fe:	4618      	mov	r0, r3
     200:	3714      	adds	r7, #20
     202:	46bd      	mov	sp, r7
     204:	bc80      	pop	{r7}
     206:	4770      	bx	lr

00000208 <ioport_pin_to_mask>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
     208:	b480      	push	{r7}
     20a:	b085      	sub	sp, #20
     20c:	af00      	add	r7, sp, #0
     20e:	6078      	str	r0, [r7, #4]
     210:	687b      	ldr	r3, [r7, #4]
     212:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     214:	68fb      	ldr	r3, [r7, #12]
     216:	f003 031f 	and.w	r3, r3, #31
     21a:	2201      	movs	r2, #1
     21c:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_mask(pin);
     220:	bf00      	nop
}
     222:	4618      	mov	r0, r3
     224:	3714      	adds	r7, #20
     226:	46bd      	mov	sp, r7
     228:	bc80      	pop	{r7}
     22a:	4770      	bx	lr

0000022c <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
     22c:	b580      	push	{r7, lr}
     22e:	b086      	sub	sp, #24
     230:	af00      	add	r7, sp, #0
     232:	6078      	str	r0, [r7, #4]
     234:	6039      	str	r1, [r7, #0]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
     236:	687b      	ldr	r3, [r7, #4]
     238:	025b      	lsls	r3, r3, #9
     23a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     23e:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
     242:	613b      	str	r3, [r7, #16]
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
     244:	693b      	ldr	r3, [r7, #16]
     246:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
     24a:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < gpio_nb_sources; i++) {
     24c:	2300      	movs	r3, #0
     24e:	617b      	str	r3, [r7, #20]
     250:	e023      	b.n	29a <gpio_common_handler+0x6e>
		pin = gpio_int_sources[i].pin;
     252:	4a19      	ldr	r2, [pc, #100]	; (2b8 <gpio_common_handler+0x8c>)
     254:	697b      	ldr	r3, [r7, #20]
     256:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     25a:	60bb      	str	r3, [r7, #8]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
     25c:	68b8      	ldr	r0, [r7, #8]
     25e:	4b17      	ldr	r3, [pc, #92]	; (2bc <gpio_common_handler+0x90>)
     260:	4798      	blx	r3
     262:	4602      	mov	r2, r0
     264:	687b      	ldr	r3, [r7, #4]
     266:	429a      	cmp	r2, r3
     268:	d114      	bne.n	294 <gpio_common_handler+0x68>
				(ioport_pin_to_mask(pin) & int_flags)) {
     26a:	68b8      	ldr	r0, [r7, #8]
     26c:	4b14      	ldr	r3, [pc, #80]	; (2c0 <gpio_common_handler+0x94>)
     26e:	4798      	blx	r3
     270:	4602      	mov	r2, r0
     272:	68fb      	ldr	r3, [r7, #12]
     274:	4013      	ands	r3, r2
		if ((ioport_pin_to_port_id(pin) == port_id) &&
     276:	2b00      	cmp	r3, #0
     278:	d00c      	beq.n	294 <gpio_common_handler+0x68>
			if (gpio_int_sources[i].callback != NULL) {
     27a:	4a0f      	ldr	r2, [pc, #60]	; (2b8 <gpio_common_handler+0x8c>)
     27c:	697b      	ldr	r3, [r7, #20]
     27e:	00db      	lsls	r3, r3, #3
     280:	4413      	add	r3, r2
     282:	685b      	ldr	r3, [r3, #4]
     284:	2b00      	cmp	r3, #0
     286:	d005      	beq.n	294 <gpio_common_handler+0x68>
				gpio_int_sources[i].callback();
     288:	4a0b      	ldr	r2, [pc, #44]	; (2b8 <gpio_common_handler+0x8c>)
     28a:	697b      	ldr	r3, [r7, #20]
     28c:	00db      	lsls	r3, r3, #3
     28e:	4413      	add	r3, r2
     290:	685b      	ldr	r3, [r3, #4]
     292:	4798      	blx	r3
	for (i = 0; i < gpio_nb_sources; i++) {
     294:	697b      	ldr	r3, [r7, #20]
     296:	3301      	adds	r3, #1
     298:	617b      	str	r3, [r7, #20]
     29a:	4b0a      	ldr	r3, [pc, #40]	; (2c4 <gpio_common_handler+0x98>)
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	697a      	ldr	r2, [r7, #20]
     2a0:	429a      	cmp	r2, r3
     2a2:	d3d6      	bcc.n	252 <gpio_common_handler+0x26>
				Assert(false); /* Catch unexpected interrupt */
			}
		}
	}

	gpio_port->GPIO_IFRC = (int_flags & port_mask);
     2a4:	68fa      	ldr	r2, [r7, #12]
     2a6:	683b      	ldr	r3, [r7, #0]
     2a8:	401a      	ands	r2, r3
     2aa:	693b      	ldr	r3, [r7, #16]
     2ac:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
}
     2b0:	bf00      	nop
     2b2:	3718      	adds	r7, #24
     2b4:	46bd      	mov	sp, r7
     2b6:	bd80      	pop	{r7, pc}
     2b8:	200002c8 	.word	0x200002c8
     2bc:	000001ed 	.word	0x000001ed
     2c0:	00000209 	.word	0x00000209
     2c4:	200002f8 	.word	0x200002f8

000002c8 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
     2c8:	b580      	push	{r7, lr}
     2ca:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
     2cc:	21ff      	movs	r1, #255	; 0xff
     2ce:	2000      	movs	r0, #0
     2d0:	4b01      	ldr	r3, [pc, #4]	; (2d8 <GPIO_0_Handler+0x10>)
     2d2:	4798      	blx	r3
}
     2d4:	bf00      	nop
     2d6:	bd80      	pop	{r7, pc}
     2d8:	0000022d 	.word	0x0000022d

000002dc <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
     2dc:	b580      	push	{r7, lr}
     2de:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
     2e0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     2e4:	2000      	movs	r0, #0
     2e6:	4b02      	ldr	r3, [pc, #8]	; (2f0 <GPIO_1_Handler+0x14>)
     2e8:	4798      	blx	r3
}
     2ea:	bf00      	nop
     2ec:	bd80      	pop	{r7, pc}
     2ee:	bf00      	nop
     2f0:	0000022d 	.word	0x0000022d

000002f4 <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
     2f4:	b580      	push	{r7, lr}
     2f6:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
     2f8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     2fc:	2000      	movs	r0, #0
     2fe:	4b02      	ldr	r3, [pc, #8]	; (308 <GPIO_2_Handler+0x14>)
     300:	4798      	blx	r3
}
     302:	bf00      	nop
     304:	bd80      	pop	{r7, pc}
     306:	bf00      	nop
     308:	0000022d 	.word	0x0000022d

0000030c <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
     30c:	b580      	push	{r7, lr}
     30e:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 24));
     310:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     314:	2000      	movs	r0, #0
     316:	4b02      	ldr	r3, [pc, #8]	; (320 <GPIO_3_Handler+0x14>)
     318:	4798      	blx	r3
}
     31a:	bf00      	nop
     31c:	bd80      	pop	{r7, pc}
     31e:	bf00      	nop
     320:	0000022d 	.word	0x0000022d

00000324 <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
     324:	b580      	push	{r7, lr}
     326:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
     328:	21ff      	movs	r1, #255	; 0xff
     32a:	2001      	movs	r0, #1
     32c:	4b01      	ldr	r3, [pc, #4]	; (334 <GPIO_4_Handler+0x10>)
     32e:	4798      	blx	r3
}
     330:	bf00      	nop
     332:	bd80      	pop	{r7, pc}
     334:	0000022d 	.word	0x0000022d

00000338 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
     338:	b580      	push	{r7, lr}
     33a:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
     33c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     340:	2001      	movs	r0, #1
     342:	4b02      	ldr	r3, [pc, #8]	; (34c <GPIO_5_Handler+0x14>)
     344:	4798      	blx	r3
}
     346:	bf00      	nop
     348:	bd80      	pop	{r7, pc}
     34a:	bf00      	nop
     34c:	0000022d 	.word	0x0000022d

00000350 <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
     350:	b580      	push	{r7, lr}
     352:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
     354:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     358:	2001      	movs	r0, #1
     35a:	4b02      	ldr	r3, [pc, #8]	; (364 <GPIO_6_Handler+0x14>)
     35c:	4798      	blx	r3
}
     35e:	bf00      	nop
     360:	bd80      	pop	{r7, pc}
     362:	bf00      	nop
     364:	0000022d 	.word	0x0000022d

00000368 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
     368:	b580      	push	{r7, lr}
     36a:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
     36c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     370:	2001      	movs	r0, #1
     372:	4b02      	ldr	r3, [pc, #8]	; (37c <GPIO_7_Handler+0x14>)
     374:	4798      	blx	r3
}
     376:	bf00      	nop
     378:	bd80      	pop	{r7, pc}
     37a:	bf00      	nop
     37c:	0000022d 	.word	0x0000022d

00000380 <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
     380:	b580      	push	{r7, lr}
     382:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
     384:	21ff      	movs	r1, #255	; 0xff
     386:	2002      	movs	r0, #2
     388:	4b01      	ldr	r3, [pc, #4]	; (390 <GPIO_8_Handler+0x10>)
     38a:	4798      	blx	r3
}
     38c:	bf00      	nop
     38e:	bd80      	pop	{r7, pc}
     390:	0000022d 	.word	0x0000022d

00000394 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
     394:	b580      	push	{r7, lr}
     396:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
     398:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     39c:	2002      	movs	r0, #2
     39e:	4b02      	ldr	r3, [pc, #8]	; (3a8 <GPIO_9_Handler+0x14>)
     3a0:	4798      	blx	r3
}
     3a2:	bf00      	nop
     3a4:	bd80      	pop	{r7, pc}
     3a6:	bf00      	nop
     3a8:	0000022d 	.word	0x0000022d

000003ac <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
     3b0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     3b4:	2002      	movs	r0, #2
     3b6:	4b02      	ldr	r3, [pc, #8]	; (3c0 <GPIO_10_Handler+0x14>)
     3b8:	4798      	blx	r3
}
     3ba:	bf00      	nop
     3bc:	bd80      	pop	{r7, pc}
     3be:	bf00      	nop
     3c0:	0000022d 	.word	0x0000022d

000003c4 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
     3c4:	b580      	push	{r7, lr}
     3c6:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
     3c8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     3cc:	2002      	movs	r0, #2
     3ce:	4b02      	ldr	r3, [pc, #8]	; (3d8 <GPIO_11_Handler+0x14>)
     3d0:	4798      	blx	r3
}
     3d2:	bf00      	nop
     3d4:	bd80      	pop	{r7, pc}
     3d6:	bf00      	nop
     3d8:	0000022d 	.word	0x0000022d

000003dc <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
     3dc:	b480      	push	{r7}
     3de:	b085      	sub	sp, #20
     3e0:	af00      	add	r7, sp, #0
     3e2:	6078      	str	r0, [r7, #4]
     3e4:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
     3e6:	687a      	ldr	r2, [r7, #4]
     3e8:	683b      	ldr	r3, [r7, #0]
     3ea:	019b      	lsls	r3, r3, #6
     3ec:	4413      	add	r3, r2
     3ee:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
     3f0:	68fb      	ldr	r3, [r7, #12]
     3f2:	6a1b      	ldr	r3, [r3, #32]
}
     3f4:	4618      	mov	r0, r3
     3f6:	3714      	adds	r7, #20
     3f8:	46bd      	mov	sp, r7
     3fa:	bc80      	pop	{r7}
     3fc:	4770      	bx	lr
	...

00000400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
     400:	b480      	push	{r7}
     402:	b083      	sub	sp, #12
     404:	af00      	add	r7, sp, #0
     406:	4603      	mov	r3, r0
     408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     40a:	f997 3007 	ldrsb.w	r3, [r7, #7]
     40e:	2b00      	cmp	r3, #0
     410:	db0b      	blt.n	42a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     412:	4908      	ldr	r1, [pc, #32]	; (434 <__NVIC_EnableIRQ+0x34>)
     414:	f997 3007 	ldrsb.w	r3, [r7, #7]
     418:	095b      	lsrs	r3, r3, #5
     41a:	79fa      	ldrb	r2, [r7, #7]
     41c:	f002 021f 	and.w	r2, r2, #31
     420:	2001      	movs	r0, #1
     422:	fa00 f202 	lsl.w	r2, r0, r2
     426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
     42a:	bf00      	nop
     42c:	370c      	adds	r7, #12
     42e:	46bd      	mov	sp, r7
     430:	bc80      	pop	{r7}
     432:	4770      	bx	lr
     434:	e000e100 	.word	0xe000e100

00000438 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
     438:	b480      	push	{r7}
     43a:	b083      	sub	sp, #12
     43c:	af00      	add	r7, sp, #0
     43e:	4603      	mov	r3, r0
     440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     442:	f997 3007 	ldrsb.w	r3, [r7, #7]
     446:	2b00      	cmp	r3, #0
     448:	db0c      	blt.n	464 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     44a:	4909      	ldr	r1, [pc, #36]	; (470 <__NVIC_ClearPendingIRQ+0x38>)
     44c:	f997 3007 	ldrsb.w	r3, [r7, #7]
     450:	095b      	lsrs	r3, r3, #5
     452:	79fa      	ldrb	r2, [r7, #7]
     454:	f002 021f 	and.w	r2, r2, #31
     458:	2001      	movs	r0, #1
     45a:	fa00 f202 	lsl.w	r2, r0, r2
     45e:	3360      	adds	r3, #96	; 0x60
     460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
     464:	bf00      	nop
     466:	370c      	adds	r7, #12
     468:	46bd      	mov	sp, r7
     46a:	bc80      	pop	{r7}
     46c:	4770      	bx	lr
     46e:	bf00      	nop
     470:	e000e100 	.word	0xe000e100

00000474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     474:	b480      	push	{r7}
     476:	b083      	sub	sp, #12
     478:	af00      	add	r7, sp, #0
     47a:	4603      	mov	r3, r0
     47c:	6039      	str	r1, [r7, #0]
     47e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     480:	f997 3007 	ldrsb.w	r3, [r7, #7]
     484:	2b00      	cmp	r3, #0
     486:	db0a      	blt.n	49e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     488:	490d      	ldr	r1, [pc, #52]	; (4c0 <__NVIC_SetPriority+0x4c>)
     48a:	f997 3007 	ldrsb.w	r3, [r7, #7]
     48e:	683a      	ldr	r2, [r7, #0]
     490:	b2d2      	uxtb	r2, r2
     492:	0112      	lsls	r2, r2, #4
     494:	b2d2      	uxtb	r2, r2
     496:	440b      	add	r3, r1
     498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     49c:	e00a      	b.n	4b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     49e:	4909      	ldr	r1, [pc, #36]	; (4c4 <__NVIC_SetPriority+0x50>)
     4a0:	79fb      	ldrb	r3, [r7, #7]
     4a2:	f003 030f 	and.w	r3, r3, #15
     4a6:	3b04      	subs	r3, #4
     4a8:	683a      	ldr	r2, [r7, #0]
     4aa:	b2d2      	uxtb	r2, r2
     4ac:	0112      	lsls	r2, r2, #4
     4ae:	b2d2      	uxtb	r2, r2
     4b0:	440b      	add	r3, r1
     4b2:	761a      	strb	r2, [r3, #24]
}
     4b4:	bf00      	nop
     4b6:	370c      	adds	r7, #12
     4b8:	46bd      	mov	sp, r7
     4ba:	bc80      	pop	{r7}
     4bc:	4770      	bx	lr
     4be:	bf00      	nop
     4c0:	e000e100 	.word	0xe000e100
     4c4:	e000ed00 	.word	0xe000ed00

000004c8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
     4c8:	b480      	push	{r7}
     4ca:	b083      	sub	sp, #12
     4cc:	af00      	add	r7, sp, #0
     4ce:	f3ef 8310 	mrs	r3, PRIMASK
     4d2:	607b      	str	r3, [r7, #4]
  return(result);
     4d4:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
     4d6:	2b00      	cmp	r3, #0
     4d8:	bf0c      	ite	eq
     4da:	2301      	moveq	r3, #1
     4dc:	2300      	movne	r3, #0
     4de:	b2db      	uxtb	r3, r3
     4e0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     4e2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     4e4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     4e8:	4b04      	ldr	r3, [pc, #16]	; (4fc <cpu_irq_save+0x34>)
     4ea:	2200      	movs	r2, #0
     4ec:	701a      	strb	r2, [r3, #0]
	return flags;
     4ee:	683b      	ldr	r3, [r7, #0]
}
     4f0:	4618      	mov	r0, r3
     4f2:	370c      	adds	r7, #12
     4f4:	46bd      	mov	sp, r7
     4f6:	bc80      	pop	{r7}
     4f8:	4770      	bx	lr
     4fa:	bf00      	nop
     4fc:	20000074 	.word	0x20000074

00000500 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
     500:	b480      	push	{r7}
     502:	b083      	sub	sp, #12
     504:	af00      	add	r7, sp, #0
     506:	6078      	str	r0, [r7, #4]
	return (flags);
     508:	687b      	ldr	r3, [r7, #4]
     50a:	2b00      	cmp	r3, #0
     50c:	bf14      	ite	ne
     50e:	2301      	movne	r3, #1
     510:	2300      	moveq	r3, #0
     512:	b2db      	uxtb	r3, r3
}
     514:	4618      	mov	r0, r3
     516:	370c      	adds	r7, #12
     518:	46bd      	mov	sp, r7
     51a:	bc80      	pop	{r7}
     51c:	4770      	bx	lr
	...

00000520 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     520:	b580      	push	{r7, lr}
     522:	b082      	sub	sp, #8
     524:	af00      	add	r7, sp, #0
     526:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
     528:	6878      	ldr	r0, [r7, #4]
     52a:	4b07      	ldr	r3, [pc, #28]	; (548 <cpu_irq_restore+0x28>)
     52c:	4798      	blx	r3
     52e:	4603      	mov	r3, r0
     530:	2b00      	cmp	r3, #0
     532:	d005      	beq.n	540 <cpu_irq_restore+0x20>
		cpu_irq_enable();
     534:	4b05      	ldr	r3, [pc, #20]	; (54c <cpu_irq_restore+0x2c>)
     536:	2201      	movs	r2, #1
     538:	701a      	strb	r2, [r3, #0]
     53a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     53e:	b662      	cpsie	i
}
     540:	bf00      	nop
     542:	3708      	adds	r7, #8
     544:	46bd      	mov	sp, r7
     546:	bd80      	pop	{r7, pc}
     548:	00000501 	.word	0x00000501
     54c:	20000074 	.word	0x20000074

00000550 <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
     550:	b580      	push	{r7, lr}
     552:	b082      	sub	sp, #8
     554:	af00      	add	r7, sp, #0
     556:	4603      	mov	r3, r0
     558:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
     55a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     55c:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
     560:	4b05      	ldr	r3, [pc, #20]	; (578 <sleepmgr_sleep+0x28>)
     562:	2200      	movs	r2, #0
     564:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	bpm_sleep(BPM, sleep_mode);
     566:	79fb      	ldrb	r3, [r7, #7]
     568:	4619      	mov	r1, r3
     56a:	4804      	ldr	r0, [pc, #16]	; (57c <sleepmgr_sleep+0x2c>)
     56c:	4b04      	ldr	r3, [pc, #16]	; (580 <sleepmgr_sleep+0x30>)
     56e:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     570:	bf00      	nop
     572:	3708      	adds	r7, #8
     574:	46bd      	mov	sp, r7
     576:	bd80      	pop	{r7, pc}
     578:	20000074 	.word	0x20000074
     57c:	400f0000 	.word	0x400f0000
     580:	00003709 	.word	0x00003709

00000584 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
     584:	b480      	push	{r7}
     586:	b083      	sub	sp, #12
     588:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
     58a:	2300      	movs	r3, #0
     58c:	71fb      	strb	r3, [r7, #7]
     58e:	e006      	b.n	59e <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
     590:	79fb      	ldrb	r3, [r7, #7]
     592:	4a08      	ldr	r2, [pc, #32]	; (5b4 <sleepmgr_init+0x30>)
     594:	2100      	movs	r1, #0
     596:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
     598:	79fb      	ldrb	r3, [r7, #7]
     59a:	3301      	adds	r3, #1
     59c:	71fb      	strb	r3, [r7, #7]
     59e:	79fb      	ldrb	r3, [r7, #7]
     5a0:	2b06      	cmp	r3, #6
     5a2:	d9f5      	bls.n	590 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     5a4:	4b03      	ldr	r3, [pc, #12]	; (5b4 <sleepmgr_init+0x30>)
     5a6:	2201      	movs	r2, #1
     5a8:	71da      	strb	r2, [r3, #7]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     5aa:	bf00      	nop
     5ac:	370c      	adds	r7, #12
     5ae:	46bd      	mov	sp, r7
     5b0:	bc80      	pop	{r7}
     5b2:	4770      	bx	lr
     5b4:	20000474 	.word	0x20000474

000005b8 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
     5b8:	b580      	push	{r7, lr}
     5ba:	b084      	sub	sp, #16
     5bc:	af00      	add	r7, sp, #0
     5be:	4603      	mov	r3, r0
     5c0:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     5c2:	79fb      	ldrb	r3, [r7, #7]
     5c4:	4a0a      	ldr	r2, [pc, #40]	; (5f0 <sleepmgr_lock_mode+0x38>)
     5c6:	5cd3      	ldrb	r3, [r2, r3]
     5c8:	2bff      	cmp	r3, #255	; 0xff
     5ca:	d100      	bne.n	5ce <sleepmgr_lock_mode+0x16>
		while (true) {
     5cc:	e7fe      	b.n	5cc <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
     5ce:	4b09      	ldr	r3, [pc, #36]	; (5f4 <sleepmgr_lock_mode+0x3c>)
     5d0:	4798      	blx	r3
     5d2:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
     5d4:	79fb      	ldrb	r3, [r7, #7]
     5d6:	4a06      	ldr	r2, [pc, #24]	; (5f0 <sleepmgr_lock_mode+0x38>)
     5d8:	5cd2      	ldrb	r2, [r2, r3]
     5da:	3201      	adds	r2, #1
     5dc:	b2d1      	uxtb	r1, r2
     5de:	4a04      	ldr	r2, [pc, #16]	; (5f0 <sleepmgr_lock_mode+0x38>)
     5e0:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
     5e2:	68f8      	ldr	r0, [r7, #12]
     5e4:	4b04      	ldr	r3, [pc, #16]	; (5f8 <sleepmgr_lock_mode+0x40>)
     5e6:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     5e8:	bf00      	nop
     5ea:	3710      	adds	r7, #16
     5ec:	46bd      	mov	sp, r7
     5ee:	bd80      	pop	{r7, pc}
     5f0:	20000474 	.word	0x20000474
     5f4:	000004c9 	.word	0x000004c9
     5f8:	00000521 	.word	0x00000521

000005fc <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
     5fc:	b580      	push	{r7, lr}
     5fe:	b084      	sub	sp, #16
     600:	af00      	add	r7, sp, #0
     602:	4603      	mov	r3, r0
     604:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     606:	79fb      	ldrb	r3, [r7, #7]
     608:	4a0a      	ldr	r2, [pc, #40]	; (634 <sleepmgr_unlock_mode+0x38>)
     60a:	5cd3      	ldrb	r3, [r2, r3]
     60c:	2b00      	cmp	r3, #0
     60e:	d100      	bne.n	612 <sleepmgr_unlock_mode+0x16>
		while (true) {
     610:	e7fe      	b.n	610 <sleepmgr_unlock_mode+0x14>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
     612:	4b09      	ldr	r3, [pc, #36]	; (638 <sleepmgr_unlock_mode+0x3c>)
     614:	4798      	blx	r3
     616:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
     618:	79fb      	ldrb	r3, [r7, #7]
     61a:	4a06      	ldr	r2, [pc, #24]	; (634 <sleepmgr_unlock_mode+0x38>)
     61c:	5cd2      	ldrb	r2, [r2, r3]
     61e:	3a01      	subs	r2, #1
     620:	b2d1      	uxtb	r1, r2
     622:	4a04      	ldr	r2, [pc, #16]	; (634 <sleepmgr_unlock_mode+0x38>)
     624:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
     626:	68f8      	ldr	r0, [r7, #12]
     628:	4b04      	ldr	r3, [pc, #16]	; (63c <sleepmgr_unlock_mode+0x40>)
     62a:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     62c:	bf00      	nop
     62e:	3710      	adds	r7, #16
     630:	46bd      	mov	sp, r7
     632:	bd80      	pop	{r7, pc}
     634:	20000474 	.word	0x20000474
     638:	000004c9 	.word	0x000004c9
     63c:	00000521 	.word	0x00000521

00000640 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
     640:	b480      	push	{r7}
     642:	b083      	sub	sp, #12
     644:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
     646:	2300      	movs	r3, #0
     648:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
     64a:	4b09      	ldr	r3, [pc, #36]	; (670 <sleepmgr_get_sleep_mode+0x30>)
     64c:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     64e:	e005      	b.n	65c <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
     650:	683b      	ldr	r3, [r7, #0]
     652:	3301      	adds	r3, #1
     654:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
     656:	79fb      	ldrb	r3, [r7, #7]
     658:	3301      	adds	r3, #1
     65a:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
     65c:	683b      	ldr	r3, [r7, #0]
     65e:	781b      	ldrb	r3, [r3, #0]
     660:	2b00      	cmp	r3, #0
     662:	d0f5      	beq.n	650 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
     664:	79fb      	ldrb	r3, [r7, #7]
}
     666:	4618      	mov	r0, r3
     668:	370c      	adds	r7, #12
     66a:	46bd      	mov	sp, r7
     66c:	bc80      	pop	{r7}
     66e:	4770      	bx	lr
     670:	20000474 	.word	0x20000474

00000674 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
     674:	b580      	push	{r7, lr}
     676:	b082      	sub	sp, #8
     678:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
     67a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     67c:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
     680:	4b0b      	ldr	r3, [pc, #44]	; (6b0 <sleepmgr_enter_sleep+0x3c>)
     682:	2200      	movs	r2, #0
     684:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
     686:	4b0b      	ldr	r3, [pc, #44]	; (6b4 <sleepmgr_enter_sleep+0x40>)
     688:	4798      	blx	r3
     68a:	4603      	mov	r3, r0
     68c:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
     68e:	79fb      	ldrb	r3, [r7, #7]
     690:	2b00      	cmp	r3, #0
     692:	d106      	bne.n	6a2 <sleepmgr_enter_sleep+0x2e>
		cpu_irq_enable();
     694:	4b06      	ldr	r3, [pc, #24]	; (6b0 <sleepmgr_enter_sleep+0x3c>)
     696:	2201      	movs	r2, #1
     698:	701a      	strb	r2, [r3, #0]
     69a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     69e:	b662      	cpsie	i
		return;
     6a0:	e003      	b.n	6aa <sleepmgr_enter_sleep+0x36>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
     6a2:	79fb      	ldrb	r3, [r7, #7]
     6a4:	4618      	mov	r0, r3
     6a6:	4b04      	ldr	r3, [pc, #16]	; (6b8 <sleepmgr_enter_sleep+0x44>)
     6a8:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     6aa:	3708      	adds	r7, #8
     6ac:	46bd      	mov	sp, r7
     6ae:	bd80      	pop	{r7, pc}
     6b0:	20000074 	.word	0x20000074
     6b4:	00000641 	.word	0x00000641
     6b8:	00000551 	.word	0x00000551

000006bc <find_twim_channel_num>:
 * \param twim  Base address of the TWIM
 *
 * \return      TWIM channel number
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
     6bc:	b480      	push	{r7}
     6be:	b083      	sub	sp, #12
     6c0:	af00      	add	r7, sp, #0
     6c2:	6078      	str	r0, [r7, #4]
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
     6c4:	687b      	ldr	r3, [r7, #4]
     6c6:	4a0e      	ldr	r2, [pc, #56]	; (700 <find_twim_channel_num+0x44>)
     6c8:	4293      	cmp	r3, r2
     6ca:	d101      	bne.n	6d0 <find_twim_channel_num+0x14>
		return 3;
     6cc:	2303      	movs	r3, #3
     6ce:	e012      	b.n	6f6 <find_twim_channel_num+0x3a>
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	4a0c      	ldr	r2, [pc, #48]	; (704 <find_twim_channel_num+0x48>)
     6d4:	4293      	cmp	r3, r2
     6d6:	d101      	bne.n	6dc <find_twim_channel_num+0x20>
		return 2;
     6d8:	2302      	movs	r3, #2
     6da:	e00c      	b.n	6f6 <find_twim_channel_num+0x3a>
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	4a0a      	ldr	r2, [pc, #40]	; (708 <find_twim_channel_num+0x4c>)
     6e0:	4293      	cmp	r3, r2
     6e2:	d101      	bne.n	6e8 <find_twim_channel_num+0x2c>
		return 1;
     6e4:	2301      	movs	r3, #1
     6e6:	e006      	b.n	6f6 <find_twim_channel_num+0x3a>
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	4a08      	ldr	r2, [pc, #32]	; (70c <find_twim_channel_num+0x50>)
     6ec:	4293      	cmp	r3, r2
     6ee:	d101      	bne.n	6f4 <find_twim_channel_num+0x38>
		return 0;
     6f0:	2300      	movs	r3, #0
     6f2:	e000      	b.n	6f6 <find_twim_channel_num+0x3a>
	}
#endif

	return 0;
     6f4:	2300      	movs	r3, #0
}
     6f6:	4618      	mov	r0, r3
     6f8:	370c      	adds	r7, #12
     6fa:	46bd      	mov	sp, r7
     6fc:	bc80      	pop	{r7}
     6fe:	4770      	bx	lr
     700:	4007c000 	.word	0x4007c000
     704:	40078000 	.word	0x40078000
     708:	4001c000 	.word	0x4001c000
     70c:	40018000 	.word	0x40018000

00000710 <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
     710:	b580      	push	{r7, lr}
     712:	b086      	sub	sp, #24
     714:	af00      	add	r7, sp, #0
     716:	6078      	str	r0, [r7, #4]
#define NCMDR_FREE_WAIT    2000
	volatile uint32_t ncmdr_wait = NCMDR_FREE_WAIT;
     718:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     71c:	60bb      	str	r3, [r7, #8]

	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
     71e:	6878      	ldr	r0, [r7, #4]
     720:	4b94      	ldr	r3, [pc, #592]	; (974 <twim_default_callback+0x264>)
     722:	4798      	blx	r3
     724:	6138      	str	r0, [r7, #16]
	uint32_t status = twim->TWIM_SR;
     726:	687b      	ldr	r3, [r7, #4]
     728:	69db      	ldr	r3, [r3, #28]
     72a:	60fb      	str	r3, [r7, #12]
	status &= twim_it_mask[twim_ch];
     72c:	4a92      	ldr	r2, [pc, #584]	; (978 <twim_default_callback+0x268>)
     72e:	693b      	ldr	r3, [r7, #16]
     730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     734:	68fa      	ldr	r2, [r7, #12]
     736:	4013      	ands	r3, r2
     738:	60fb      	str	r3, [r7, #12]
	uint32_t cmdr_reg;

	/* This is a NACK */
	if (status & TWIM_SR_STD_MASK) {
     73a:	68fb      	ldr	r3, [r7, #12]
     73c:	f403 63a0 	and.w	r3, r3, #1280	; 0x500
     740:	2b00      	cmp	r3, #0
     742:	d028      	beq.n	796 <twim_default_callback+0x86>
		/*
		 * If we get a NACK, clear the valid bit in CMDR,
		 * otherwise the command will be re-sent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
     744:	68fb      	ldr	r3, [r7, #12]
     746:	f403 7380 	and.w	r3, r3, #256	; 0x100
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
     74a:	2b00      	cmp	r3, #0
     74c:	d002      	beq.n	754 <twim_default_callback+0x44>
     74e:	f06f 0103 	mvn.w	r1, #3
     752:	e001      	b.n	758 <twim_default_callback+0x48>
     754:	f06f 0101 	mvn.w	r1, #1
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
     758:	4a88      	ldr	r2, [pc, #544]	; (97c <twim_default_callback+0x26c>)
     75a:	693b      	ldr	r3, [r7, #16]
     75c:	4413      	add	r3, r2
     75e:	460a      	mov	r2, r1
     760:	701a      	strb	r2, [r3, #0]
		twim->TWIM_NCMDR &= ~TWIM_NCMDR_VALID;
     762:	687b      	ldr	r3, [r7, #4]
     764:	691b      	ldr	r3, [r3, #16]
     766:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
     76a:	687b      	ldr	r3, [r7, #4]
     76c:	611a      	str	r2, [r3, #16]
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
     76e:	687b      	ldr	r3, [r7, #4]
     770:	68db      	ldr	r3, [r3, #12]
     772:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
     776:	687b      	ldr	r3, [r7, #4]
     778:	60da      	str	r2, [r3, #12]
		twim->TWIM_SCR = ~0UL;
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	f04f 32ff 	mov.w	r2, #4294967295
     780:	62da      	str	r2, [r3, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
     782:	687b      	ldr	r3, [r7, #4]
     784:	f04f 32ff 	mov.w	r2, #4294967295
     788:	625a      	str	r2, [r3, #36]	; 0x24
		twim_next_cmd_xfer_valid[twim_ch] = false;
     78a:	4a7d      	ldr	r2, [pc, #500]	; (980 <twim_default_callback+0x270>)
     78c:	693b      	ldr	r3, [r7, #16]
     78e:	4413      	add	r3, r2
     790:	2200      	movs	r2, #0
     792:	701a      	strb	r2, [r3, #0]
	else if (status & TWIM_SR_CCOMP) {
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
	}
#endif
}
     794:	e1ed      	b.n	b72 <twim_default_callback+0x462>
	else if (status & TWIM_SR_RXRDY) {
     796:	68fb      	ldr	r3, [r7, #12]
     798:	f003 0301 	and.w	r3, r3, #1
     79c:	2b00      	cmp	r3, #0
     79e:	f000 80bd 	beq.w	91c <twim_default_callback+0x20c>
		*p_twim_rx_data[twim_ch] = twim->TWIM_RHR;
     7a2:	4a78      	ldr	r2, [pc, #480]	; (984 <twim_default_callback+0x274>)
     7a4:	693b      	ldr	r3, [r7, #16]
     7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     7aa:	687a      	ldr	r2, [r7, #4]
     7ac:	6952      	ldr	r2, [r2, #20]
     7ae:	b2d2      	uxtb	r2, r2
     7b0:	701a      	strb	r2, [r3, #0]
		p_twim_rx_data[twim_ch]++;
     7b2:	4a74      	ldr	r2, [pc, #464]	; (984 <twim_default_callback+0x274>)
     7b4:	693b      	ldr	r3, [r7, #16]
     7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     7ba:	1c5a      	adds	r2, r3, #1
     7bc:	4971      	ldr	r1, [pc, #452]	; (984 <twim_default_callback+0x274>)
     7be:	693b      	ldr	r3, [r7, #16]
     7c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		twim_rx_nb_bytes[twim_ch]--;
     7c4:	4a70      	ldr	r2, [pc, #448]	; (988 <twim_default_callback+0x278>)
     7c6:	693b      	ldr	r3, [r7, #16]
     7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     7cc:	1e5a      	subs	r2, r3, #1
     7ce:	496e      	ldr	r1, [pc, #440]	; (988 <twim_default_callback+0x278>)
     7d0:	693b      	ldr	r3, [r7, #16]
     7d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (twim_rx_nb_bytes[twim_ch] == 0) {
     7d6:	4a6c      	ldr	r2, [pc, #432]	; (988 <twim_default_callback+0x278>)
     7d8:	693b      	ldr	r3, [r7, #16]
     7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     7de:	2b00      	cmp	r3, #0
     7e0:	f040 81c7 	bne.w	b72 <twim_default_callback+0x462>
			if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     7e4:	4a66      	ldr	r2, [pc, #408]	; (980 <twim_default_callback+0x270>)
     7e6:	693b      	ldr	r3, [r7, #16]
     7e8:	4413      	add	r3, r2
     7ea:	781b      	ldrb	r3, [r3, #0]
     7ec:	b2db      	uxtb	r3, r3
     7ee:	2b00      	cmp	r3, #0
     7f0:	d07b      	beq.n	8ea <twim_default_callback+0x1da>
					(twim_next_rx_nb_bytes[twim_ch] != 0)) {
     7f2:	4a66      	ldr	r2, [pc, #408]	; (98c <twim_default_callback+0x27c>)
     7f4:	693b      	ldr	r3, [r7, #16]
     7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     7fa:	2b00      	cmp	r3, #0
     7fc:	d075      	beq.n	8ea <twim_default_callback+0x1da>
				p_twim_rx_data[twim_ch] = p_twim_next_rx_data[twim_ch];
     7fe:	4a64      	ldr	r2, [pc, #400]	; (990 <twim_default_callback+0x280>)
     800:	693b      	ldr	r3, [r7, #16]
     802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     806:	495f      	ldr	r1, [pc, #380]	; (984 <twim_default_callback+0x274>)
     808:	693b      	ldr	r3, [r7, #16]
     80a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
     80e:	4a5f      	ldr	r2, [pc, #380]	; (98c <twim_default_callback+0x27c>)
     810:	693b      	ldr	r3, [r7, #16]
     812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     816:	2bff      	cmp	r3, #255	; 0xff
     818:	d919      	bls.n	84e <twim_default_callback+0x13e>
					twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
     81a:	4a5b      	ldr	r2, [pc, #364]	; (988 <twim_default_callback+0x278>)
     81c:	693b      	ldr	r3, [r7, #16]
     81e:	21ff      	movs	r1, #255	; 0xff
     820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					p_twim_next_rx_data[twim_ch] += TWIM_MAX_NBYTES_PER_XFER;
     824:	4a5a      	ldr	r2, [pc, #360]	; (990 <twim_default_callback+0x280>)
     826:	693b      	ldr	r3, [r7, #16]
     828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     82c:	f103 02ff 	add.w	r2, r3, #255	; 0xff
     830:	4957      	ldr	r1, [pc, #348]	; (990 <twim_default_callback+0x280>)
     832:	693b      	ldr	r3, [r7, #16]
     834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					twim_next_rx_nb_bytes[twim_ch] -= TWIM_MAX_NBYTES_PER_XFER;
     838:	4a54      	ldr	r2, [pc, #336]	; (98c <twim_default_callback+0x27c>)
     83a:	693b      	ldr	r3, [r7, #16]
     83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     840:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
     844:	4951      	ldr	r1, [pc, #324]	; (98c <twim_default_callback+0x27c>)
     846:	693b      	ldr	r3, [r7, #16]
     848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     84c:	e00c      	b.n	868 <twim_default_callback+0x158>
					twim_rx_nb_bytes[twim_ch] = twim_next_rx_nb_bytes[twim_ch];
     84e:	4a4f      	ldr	r2, [pc, #316]	; (98c <twim_default_callback+0x27c>)
     850:	693b      	ldr	r3, [r7, #16]
     852:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     856:	494c      	ldr	r1, [pc, #304]	; (988 <twim_default_callback+0x278>)
     858:	693b      	ldr	r3, [r7, #16]
     85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					twim_next_rx_nb_bytes[twim_ch] = 0;
     85e:	4a4b      	ldr	r2, [pc, #300]	; (98c <twim_default_callback+0x27c>)
     860:	693b      	ldr	r3, [r7, #16]
     862:	2100      	movs	r1, #0
     864:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (twim_next_rx_nb_bytes[twim_ch] > 0) {
     868:	4a48      	ldr	r2, [pc, #288]	; (98c <twim_default_callback+0x27c>)
     86a:	693b      	ldr	r3, [r7, #16]
     86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     870:	2b00      	cmp	r3, #0
     872:	d034      	beq.n	8de <twim_default_callback+0x1ce>
					ncmdr_wait = NCMDR_FREE_WAIT;
     874:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     878:	60bb      	str	r3, [r7, #8]
					while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
     87a:	bf00      	nop
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	691b      	ldr	r3, [r3, #16]
     880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     884:	2b00      	cmp	r3, #0
     886:	d004      	beq.n	892 <twim_default_callback+0x182>
     888:	68bb      	ldr	r3, [r7, #8]
     88a:	1e5a      	subs	r2, r3, #1
     88c:	60ba      	str	r2, [r7, #8]
     88e:	2b00      	cmp	r3, #0
     890:	d1f4      	bne.n	87c <twim_default_callback+0x16c>
					cmdr_reg = twim->TWIM_CMDR;
     892:	687b      	ldr	r3, [r7, #4]
     894:	68db      	ldr	r3, [r3, #12]
     896:	617b      	str	r3, [r7, #20]
					cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
     898:	697b      	ldr	r3, [r7, #20]
     89a:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
     89e:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
     8a2:	617b      	str	r3, [r7, #20]
					if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
     8a4:	4a39      	ldr	r2, [pc, #228]	; (98c <twim_default_callback+0x27c>)
     8a6:	693b      	ldr	r3, [r7, #16]
     8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     8ac:	2bff      	cmp	r3, #255	; 0xff
     8ae:	d906      	bls.n	8be <twim_default_callback+0x1ae>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
     8b0:	697b      	ldr	r3, [r7, #20]
     8b2:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
     8b6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     8ba:	617b      	str	r3, [r7, #20]
     8bc:	e00b      	b.n	8d6 <twim_default_callback+0x1c6>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
     8be:	4a33      	ldr	r2, [pc, #204]	; (98c <twim_default_callback+0x27c>)
     8c0:	693b      	ldr	r3, [r7, #16]
     8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     8c6:	041b      	lsls	r3, r3, #16
     8c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
								| TWIM_CMDR_STOP);
     8cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
     8d0:	697a      	ldr	r2, [r7, #20]
     8d2:	4313      	orrs	r3, r2
     8d4:	617b      	str	r3, [r7, #20]
					twim->TWIM_NCMDR = cmdr_reg;
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	697a      	ldr	r2, [r7, #20]
     8da:	611a      	str	r2, [r3, #16]
				if (twim_next_rx_nb_bytes[twim_ch] > 0) {
     8dc:	e149      	b.n	b72 <twim_default_callback+0x462>
					twim_next_cmd_xfer_valid[twim_ch] = false;
     8de:	4a28      	ldr	r2, [pc, #160]	; (980 <twim_default_callback+0x270>)
     8e0:	693b      	ldr	r3, [r7, #16]
     8e2:	4413      	add	r3, r2
     8e4:	2200      	movs	r2, #0
     8e6:	701a      	strb	r2, [r3, #0]
				if (twim_next_rx_nb_bytes[twim_ch] > 0) {
     8e8:	e143      	b.n	b72 <twim_default_callback+0x462>
				twim->TWIM_IDR = TWIM_IDR_RXRDY;
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	2201      	movs	r2, #1
     8ee:	625a      	str	r2, [r3, #36]	; 0x24
				twim_next_cmd_xfer_valid[twim_ch] = false;
     8f0:	4a23      	ldr	r2, [pc, #140]	; (980 <twim_default_callback+0x270>)
     8f2:	693b      	ldr	r3, [r7, #16]
     8f4:	4413      	add	r3, r2
     8f6:	2200      	movs	r2, #0
     8f8:	701a      	strb	r2, [r3, #0]
				twim->TWIM_SCR = TWIM_SCR_CCOMP;
     8fa:	687b      	ldr	r3, [r7, #4]
     8fc:	2208      	movs	r2, #8
     8fe:	62da      	str	r2, [r3, #44]	; 0x2c
				twim->TWIM_IER = TWIM_IER_CCOMP;
     900:	687b      	ldr	r3, [r7, #4]
     902:	2208      	movs	r2, #8
     904:	621a      	str	r2, [r3, #32]
				twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     906:	4a1c      	ldr	r2, [pc, #112]	; (978 <twim_default_callback+0x268>)
     908:	693b      	ldr	r3, [r7, #16]
     90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     90e:	f043 0208 	orr.w	r2, r3, #8
     912:	4919      	ldr	r1, [pc, #100]	; (978 <twim_default_callback+0x268>)
     914:	693b      	ldr	r3, [r7, #16]
     916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     91a:	e12a      	b.n	b72 <twim_default_callback+0x462>
	else if (status & TWIM_SR_TXRDY) {
     91c:	68fb      	ldr	r3, [r7, #12]
     91e:	f003 0302 	and.w	r3, r3, #2
     922:	2b00      	cmp	r3, #0
     924:	f000 8119 	beq.w	b5a <twim_default_callback+0x44a>
		if (twim_tx_nb_bytes[twim_ch] == 0) {
     928:	4a1a      	ldr	r2, [pc, #104]	; (994 <twim_default_callback+0x284>)
     92a:	693b      	ldr	r3, [r7, #16]
     92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     930:	2b00      	cmp	r3, #0
     932:	d131      	bne.n	998 <twim_default_callback+0x288>
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
     934:	687b      	ldr	r3, [r7, #4]
     936:	2202      	movs	r2, #2
     938:	625a      	str	r2, [r3, #36]	; 0x24
			if (twim_next_rx_nb_bytes[twim_ch] == 0) {
     93a:	4a14      	ldr	r2, [pc, #80]	; (98c <twim_default_callback+0x27c>)
     93c:	693b      	ldr	r3, [r7, #16]
     93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     942:	2b00      	cmp	r3, #0
     944:	d104      	bne.n	950 <twim_default_callback+0x240>
				twim_next_cmd_xfer_valid[twim_ch] = false;
     946:	4a0e      	ldr	r2, [pc, #56]	; (980 <twim_default_callback+0x270>)
     948:	693b      	ldr	r3, [r7, #16]
     94a:	4413      	add	r3, r2
     94c:	2200      	movs	r2, #0
     94e:	701a      	strb	r2, [r3, #0]
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     950:	687b      	ldr	r3, [r7, #4]
     952:	2208      	movs	r2, #8
     954:	62da      	str	r2, [r3, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     956:	687b      	ldr	r3, [r7, #4]
     958:	2208      	movs	r2, #8
     95a:	621a      	str	r2, [r3, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     95c:	4a06      	ldr	r2, [pc, #24]	; (978 <twim_default_callback+0x268>)
     95e:	693b      	ldr	r3, [r7, #16]
     960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     964:	f043 0208 	orr.w	r2, r3, #8
     968:	4903      	ldr	r1, [pc, #12]	; (978 <twim_default_callback+0x268>)
     96a:	693b      	ldr	r3, [r7, #16]
     96c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     970:	e0ff      	b.n	b72 <twim_default_callback+0x462>
     972:	bf00      	nop
     974:	000006bd 	.word	0x000006bd
     978:	20000340 	.word	0x20000340
     97c:	2000031c 	.word	0x2000031c
     980:	20000350 	.word	0x20000350
     984:	2000030c 	.word	0x2000030c
     988:	20000330 	.word	0x20000330
     98c:	20000384 	.word	0x20000384
     990:	20000364 	.word	0x20000364
     994:	20000320 	.word	0x20000320
			twim->TWIM_THR = *p_twim_tx_data[twim_ch]++;
     998:	4a78      	ldr	r2, [pc, #480]	; (b7c <twim_default_callback+0x46c>)
     99a:	693b      	ldr	r3, [r7, #16]
     99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     9a0:	1c59      	adds	r1, r3, #1
     9a2:	4876      	ldr	r0, [pc, #472]	; (b7c <twim_default_callback+0x46c>)
     9a4:	693a      	ldr	r2, [r7, #16]
     9a6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	b2db      	uxtb	r3, r3
     9ae:	461a      	mov	r2, r3
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	619a      	str	r2, [r3, #24]
			twim_tx_nb_bytes[twim_ch]--;
     9b4:	4a72      	ldr	r2, [pc, #456]	; (b80 <twim_default_callback+0x470>)
     9b6:	693b      	ldr	r3, [r7, #16]
     9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     9bc:	1e5a      	subs	r2, r3, #1
     9be:	4970      	ldr	r1, [pc, #448]	; (b80 <twim_default_callback+0x470>)
     9c0:	693b      	ldr	r3, [r7, #16]
     9c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
     9c6:	4a6e      	ldr	r2, [pc, #440]	; (b80 <twim_default_callback+0x470>)
     9c8:	693b      	ldr	r3, [r7, #16]
     9ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     9ce:	2b00      	cmp	r3, #0
     9d0:	f040 80cf 	bne.w	b72 <twim_default_callback+0x462>
				if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     9d4:	4a6b      	ldr	r2, [pc, #428]	; (b84 <twim_default_callback+0x474>)
     9d6:	693b      	ldr	r3, [r7, #16]
     9d8:	4413      	add	r3, r2
     9da:	781b      	ldrb	r3, [r3, #0]
     9dc:	b2db      	uxtb	r3, r3
     9de:	2b00      	cmp	r3, #0
     9e0:	d079      	beq.n	ad6 <twim_default_callback+0x3c6>
						(twim_next_tx_nb_bytes[twim_ch] != 0)) {
     9e2:	4a69      	ldr	r2, [pc, #420]	; (b88 <twim_default_callback+0x478>)
     9e4:	693b      	ldr	r3, [r7, #16]
     9e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     9ea:	2b00      	cmp	r3, #0
     9ec:	d073      	beq.n	ad6 <twim_default_callback+0x3c6>
					p_twim_tx_data[twim_ch] = p_twim_next_tx_data[twim_ch];
     9ee:	4a67      	ldr	r2, [pc, #412]	; (b8c <twim_default_callback+0x47c>)
     9f0:	693b      	ldr	r3, [r7, #16]
     9f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     9f6:	4961      	ldr	r1, [pc, #388]	; (b7c <twim_default_callback+0x46c>)
     9f8:	693b      	ldr	r3, [r7, #16]
     9fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
     9fe:	4a62      	ldr	r2, [pc, #392]	; (b88 <twim_default_callback+0x478>)
     a00:	693b      	ldr	r3, [r7, #16]
     a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     a06:	2bff      	cmp	r3, #255	; 0xff
     a08:	d919      	bls.n	a3e <twim_default_callback+0x32e>
						twim_tx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
     a0a:	4a5d      	ldr	r2, [pc, #372]	; (b80 <twim_default_callback+0x470>)
     a0c:	693b      	ldr	r3, [r7, #16]
     a0e:	21ff      	movs	r1, #255	; 0xff
     a10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						p_twim_next_tx_data[twim_ch] += TWIM_MAX_NBYTES_PER_XFER;
     a14:	4a5d      	ldr	r2, [pc, #372]	; (b8c <twim_default_callback+0x47c>)
     a16:	693b      	ldr	r3, [r7, #16]
     a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     a1c:	f103 02ff 	add.w	r2, r3, #255	; 0xff
     a20:	495a      	ldr	r1, [pc, #360]	; (b8c <twim_default_callback+0x47c>)
     a22:	693b      	ldr	r3, [r7, #16]
     a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						twim_next_tx_nb_bytes[twim_ch] -= TWIM_MAX_NBYTES_PER_XFER;
     a28:	4a57      	ldr	r2, [pc, #348]	; (b88 <twim_default_callback+0x478>)
     a2a:	693b      	ldr	r3, [r7, #16]
     a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     a30:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
     a34:	4954      	ldr	r1, [pc, #336]	; (b88 <twim_default_callback+0x478>)
     a36:	693b      	ldr	r3, [r7, #16]
     a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     a3c:	e00c      	b.n	a58 <twim_default_callback+0x348>
						twim_tx_nb_bytes[twim_ch] = twim_next_tx_nb_bytes[twim_ch];
     a3e:	4a52      	ldr	r2, [pc, #328]	; (b88 <twim_default_callback+0x478>)
     a40:	693b      	ldr	r3, [r7, #16]
     a42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     a46:	494e      	ldr	r1, [pc, #312]	; (b80 <twim_default_callback+0x470>)
     a48:	693b      	ldr	r3, [r7, #16]
     a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						twim_next_tx_nb_bytes[twim_ch] = 0;
     a4e:	4a4e      	ldr	r2, [pc, #312]	; (b88 <twim_default_callback+0x478>)
     a50:	693b      	ldr	r3, [r7, #16]
     a52:	2100      	movs	r1, #0
     a54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (twim_next_tx_nb_bytes[twim_ch] > 0) {
     a58:	4a4b      	ldr	r2, [pc, #300]	; (b88 <twim_default_callback+0x478>)
     a5a:	693b      	ldr	r3, [r7, #16]
     a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     a60:	2b00      	cmp	r3, #0
     a62:	d032      	beq.n	aca <twim_default_callback+0x3ba>
						ncmdr_wait = NCMDR_FREE_WAIT;
     a64:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     a68:	60bb      	str	r3, [r7, #8]
						while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
     a6a:	bf00      	nop
     a6c:	687b      	ldr	r3, [r7, #4]
     a6e:	691b      	ldr	r3, [r3, #16]
     a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     a74:	2b00      	cmp	r3, #0
     a76:	d004      	beq.n	a82 <twim_default_callback+0x372>
     a78:	68bb      	ldr	r3, [r7, #8]
     a7a:	1e5a      	subs	r2, r3, #1
     a7c:	60ba      	str	r2, [r7, #8]
     a7e:	2b00      	cmp	r3, #0
     a80:	d1f4      	bne.n	a6c <twim_default_callback+0x35c>
						cmdr_reg = twim->TWIM_CMDR;
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	68db      	ldr	r3, [r3, #12]
     a86:	617b      	str	r3, [r7, #20]
						cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START));
     a88:	697b      	ldr	r3, [r7, #20]
     a8a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     a92:	617b      	str	r3, [r7, #20]
						if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
     a94:	4a3c      	ldr	r2, [pc, #240]	; (b88 <twim_default_callback+0x478>)
     a96:	693b      	ldr	r3, [r7, #16]
     a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     a9c:	2bff      	cmp	r3, #255	; 0xff
     a9e:	d904      	bls.n	aaa <twim_default_callback+0x39a>
							cmdr_reg |=  TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER);
     aa0:	697b      	ldr	r3, [r7, #20]
     aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
     aa6:	617b      	str	r3, [r7, #20]
     aa8:	e00b      	b.n	ac2 <twim_default_callback+0x3b2>
							cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_tx_nb_bytes[twim_ch])
     aaa:	4a37      	ldr	r2, [pc, #220]	; (b88 <twim_default_callback+0x478>)
     aac:	693b      	ldr	r3, [r7, #16]
     aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     ab2:	041b      	lsls	r3, r3, #16
     ab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
									| TWIM_CMDR_STOP);
     ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
							cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_tx_nb_bytes[twim_ch])
     abc:	697a      	ldr	r2, [r7, #20]
     abe:	4313      	orrs	r3, r2
     ac0:	617b      	str	r3, [r7, #20]
						twim->TWIM_NCMDR = cmdr_reg;
     ac2:	687b      	ldr	r3, [r7, #4]
     ac4:	697a      	ldr	r2, [r7, #20]
     ac6:	611a      	str	r2, [r3, #16]
					if (twim_next_tx_nb_bytes[twim_ch] > 0) {
     ac8:	e053      	b.n	b72 <twim_default_callback+0x462>
						twim_next_cmd_xfer_valid[twim_ch] = false;
     aca:	4a2e      	ldr	r2, [pc, #184]	; (b84 <twim_default_callback+0x474>)
     acc:	693b      	ldr	r3, [r7, #16]
     ace:	4413      	add	r3, r2
     ad0:	2200      	movs	r2, #0
     ad2:	701a      	strb	r2, [r3, #0]
					if (twim_next_tx_nb_bytes[twim_ch] > 0) {
     ad4:	e04d      	b.n	b72 <twim_default_callback+0x462>
				} else if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     ad6:	4a2b      	ldr	r2, [pc, #172]	; (b84 <twim_default_callback+0x474>)
     ad8:	693b      	ldr	r3, [r7, #16]
     ada:	4413      	add	r3, r2
     adc:	781b      	ldrb	r3, [r3, #0]
     ade:	b2db      	uxtb	r3, r3
     ae0:	2b00      	cmp	r3, #0
     ae2:	d046      	beq.n	b72 <twim_default_callback+0x462>
						(twim_next_rx_nb_bytes[twim_ch] != 0)) {
     ae4:	4a2a      	ldr	r2, [pc, #168]	; (b90 <twim_default_callback+0x480>)
     ae6:	693b      	ldr	r3, [r7, #16]
     ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				} else if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     aec:	2b00      	cmp	r3, #0
     aee:	d040      	beq.n	b72 <twim_default_callback+0x462>
					ncmdr_wait = NCMDR_FREE_WAIT;
     af0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     af4:	60bb      	str	r3, [r7, #8]
					while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
     af6:	bf00      	nop
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	691b      	ldr	r3, [r3, #16]
     afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     b00:	2b00      	cmp	r3, #0
     b02:	d004      	beq.n	b0e <twim_default_callback+0x3fe>
     b04:	68bb      	ldr	r3, [r7, #8]
     b06:	1e5a      	subs	r2, r3, #1
     b08:	60ba      	str	r2, [r7, #8]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d1f4      	bne.n	af8 <twim_default_callback+0x3e8>
					cmdr_reg = twim->TWIM_CMDR;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	68db      	ldr	r3, [r3, #12]
     b12:	617b      	str	r3, [r7, #20]
					cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
     b14:	697b      	ldr	r3, [r7, #20]
     b16:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
     b1a:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
     b1e:	617b      	str	r3, [r7, #20]
					if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
     b20:	4a1b      	ldr	r2, [pc, #108]	; (b90 <twim_default_callback+0x480>)
     b22:	693b      	ldr	r3, [r7, #16]
     b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     b28:	2bff      	cmp	r3, #255	; 0xff
     b2a:	d906      	bls.n	b3a <twim_default_callback+0x42a>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
     b2c:	697b      	ldr	r3, [r7, #20]
     b2e:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
     b32:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     b36:	617b      	str	r3, [r7, #20]
     b38:	e00b      	b.n	b52 <twim_default_callback+0x442>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
     b3a:	4a15      	ldr	r2, [pc, #84]	; (b90 <twim_default_callback+0x480>)
     b3c:	693b      	ldr	r3, [r7, #16]
     b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     b42:	041b      	lsls	r3, r3, #16
     b44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
								| TWIM_CMDR_STOP);
     b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
     b4c:	697a      	ldr	r2, [r7, #20]
     b4e:	4313      	orrs	r3, r2
     b50:	617b      	str	r3, [r7, #20]
					twim->TWIM_NCMDR = cmdr_reg;
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	697a      	ldr	r2, [r7, #20]
     b56:	611a      	str	r2, [r3, #16]
}
     b58:	e00b      	b.n	b72 <twim_default_callback+0x462>
	else if (status & TWIM_SR_CCOMP) {
     b5a:	68fb      	ldr	r3, [r7, #12]
     b5c:	f003 0308 	and.w	r3, r3, #8
     b60:	2b00      	cmp	r3, #0
     b62:	d006      	beq.n	b72 <twim_default_callback+0x462>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
     b64:	687b      	ldr	r3, [r7, #4]
     b66:	2208      	movs	r2, #8
     b68:	62da      	str	r2, [r3, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	2208      	movs	r2, #8
     b6e:	625a      	str	r2, [r3, #36]	; 0x24
}
     b70:	e7ff      	b.n	b72 <twim_default_callback+0x462>
     b72:	bf00      	nop
     b74:	3718      	adds	r7, #24
     b76:	46bd      	mov	sp, r7
     b78:	bd80      	pop	{r7, pc}
     b7a:	bf00      	nop
     b7c:	200002fc 	.word	0x200002fc
     b80:	20000320 	.word	0x20000320
     b84:	20000350 	.word	0x20000350
     b88:	20000374 	.word	0x20000374
     b8c:	20000354 	.word	0x20000354
     b90:	20000384 	.word	0x20000384

00000b94 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     b94:	b480      	push	{r7}
     b96:	b087      	sub	sp, #28
     b98:	af00      	add	r7, sp, #0
     b9a:	60f8      	str	r0, [r7, #12]
     b9c:	60b9      	str	r1, [r7, #8]
     b9e:	607a      	str	r2, [r7, #4]
     ba0:	70fb      	strb	r3, [r7, #3]
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     ba2:	2300      	movs	r3, #0
     ba4:	74fb      	strb	r3, [r7, #19]
	f_prescaled = (clk / speed / 2);
     ba6:	687a      	ldr	r2, [r7, #4]
     ba8:	68bb      	ldr	r3, [r7, #8]
     baa:	fbb2 f3f3 	udiv	r3, r2, r3
     bae:	085b      	lsrs	r3, r3, #1
     bb0:	617b      	str	r3, [r7, #20]

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     bb2:	e005      	b.n	bc0 <twim_set_speed+0x2c>
		/* increase clock divider */
		cwgr_exp++;
     bb4:	7cfb      	ldrb	r3, [r7, #19]
     bb6:	3301      	adds	r3, #1
     bb8:	74fb      	strb	r3, [r7, #19]
		/* divide f_prescaled value */
		f_prescaled /= 2;
     bba:	697b      	ldr	r3, [r7, #20]
     bbc:	085b      	lsrs	r3, r3, #1
     bbe:	617b      	str	r3, [r7, #20]
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     bc0:	697b      	ldr	r3, [r7, #20]
     bc2:	2bff      	cmp	r3, #255	; 0xff
     bc4:	d902      	bls.n	bcc <twim_set_speed+0x38>
     bc6:	7cfb      	ldrb	r3, [r7, #19]
     bc8:	2b07      	cmp	r3, #7
     bca:	d9f3      	bls.n	bb4 <twim_set_speed+0x20>
	}

	if (cwgr_exp > 0x7) {
     bcc:	7cfb      	ldrb	r3, [r7, #19]
     bce:	2b07      	cmp	r3, #7
     bd0:	d902      	bls.n	bd8 <twim_set_speed+0x44>
		return ERR_INVALID_ARG;
     bd2:	f06f 0307 	mvn.w	r3, #7
     bd6:	e01b      	b.n	c10 <twim_set_speed+0x7c>
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     bd8:	697b      	ldr	r3, [r7, #20]
     bda:	085b      	lsrs	r3, r3, #1
     bdc:	b2da      	uxtb	r2, r3
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
     bde:	697b      	ldr	r3, [r7, #20]
     be0:	085b      	lsrs	r3, r3, #1
     be2:	6979      	ldr	r1, [r7, #20]
     be4:	1acb      	subs	r3, r1, r3
     be6:	021b      	lsls	r3, r3, #8
     be8:	b29b      	uxth	r3, r3
     bea:	431a      	orrs	r2, r3
			| TWIM_CWGR_EXP(cwgr_exp)
     bec:	7cfb      	ldrb	r3, [r7, #19]
     bee:	071b      	lsls	r3, r3, #28
     bf0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     bf4:	431a      	orrs	r2, r3
			| TWIM_CWGR_DATA(cycles)
     bf6:	78fb      	ldrb	r3, [r7, #3]
     bf8:	061b      	lsls	r3, r3, #24
     bfa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
     bfe:	431a      	orrs	r2, r3
			| TWIM_CWGR_STASTO(f_prescaled);
     c00:	697b      	ldr	r3, [r7, #20]
     c02:	041b      	lsls	r3, r3, #16
     c04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     c08:	431a      	orrs	r2, r3
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     c0a:	68fb      	ldr	r3, [r7, #12]
     c0c:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     c0e:	2300      	movs	r3, #0
}
     c10:	4618      	mov	r0, r3
     c12:	371c      	adds	r7, #28
     c14:	46bd      	mov	sp, r7
     c16:	bc80      	pop	{r7}
     c18:	4770      	bx	lr

00000c1a <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     c1a:	b480      	push	{r7}
     c1c:	b087      	sub	sp, #28
     c1e:	af00      	add	r7, sp, #0
     c20:	60f8      	str	r0, [r7, #12]
     c22:	60b9      	str	r1, [r7, #8]
     c24:	607a      	str	r2, [r7, #4]
     c26:	70fb      	strb	r3, [r7, #3]
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     c28:	2300      	movs	r3, #0
     c2a:	74fb      	strb	r3, [r7, #19]
	f_prescaled = (clk / speed / 2);
     c2c:	687a      	ldr	r2, [r7, #4]
     c2e:	68bb      	ldr	r3, [r7, #8]
     c30:	fbb2 f3f3 	udiv	r3, r2, r3
     c34:	085b      	lsrs	r3, r3, #1
     c36:	617b      	str	r3, [r7, #20]

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     c38:	e005      	b.n	c46 <twim_set_hsmode_speed+0x2c>
		/* increase clock divider */
		cwgr_exp++;
     c3a:	7cfb      	ldrb	r3, [r7, #19]
     c3c:	3301      	adds	r3, #1
     c3e:	74fb      	strb	r3, [r7, #19]
		/* divide f_prescaled value */
		f_prescaled /= 2;
     c40:	697b      	ldr	r3, [r7, #20]
     c42:	085b      	lsrs	r3, r3, #1
     c44:	617b      	str	r3, [r7, #20]
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     c46:	697b      	ldr	r3, [r7, #20]
     c48:	2bff      	cmp	r3, #255	; 0xff
     c4a:	d902      	bls.n	c52 <twim_set_hsmode_speed+0x38>
     c4c:	7cfb      	ldrb	r3, [r7, #19]
     c4e:	2b07      	cmp	r3, #7
     c50:	d9f3      	bls.n	c3a <twim_set_hsmode_speed+0x20>
	}

	if (cwgr_exp > 0x7) {
     c52:	7cfb      	ldrb	r3, [r7, #19]
     c54:	2b07      	cmp	r3, #7
     c56:	d902      	bls.n	c5e <twim_set_hsmode_speed+0x44>
		return ERR_INVALID_ARG;
     c58:	f06f 0307 	mvn.w	r3, #7
     c5c:	e01b      	b.n	c96 <twim_set_hsmode_speed+0x7c>
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     c5e:	697b      	ldr	r3, [r7, #20]
     c60:	085b      	lsrs	r3, r3, #1
     c62:	b2da      	uxtb	r2, r3
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
     c64:	697b      	ldr	r3, [r7, #20]
     c66:	085b      	lsrs	r3, r3, #1
     c68:	6979      	ldr	r1, [r7, #20]
     c6a:	1acb      	subs	r3, r1, r3
     c6c:	021b      	lsls	r3, r3, #8
     c6e:	b29b      	uxth	r3, r3
     c70:	431a      	orrs	r2, r3
			| TWIM_HSCWGR_EXP(cwgr_exp)
     c72:	7cfb      	ldrb	r3, [r7, #19]
     c74:	071b      	lsls	r3, r3, #28
     c76:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     c7a:	431a      	orrs	r2, r3
			| TWIM_HSCWGR_DATA(cycles)
     c7c:	78fb      	ldrb	r3, [r7, #3]
     c7e:	061b      	lsls	r3, r3, #24
     c80:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
     c84:	431a      	orrs	r2, r3
			| TWIM_HSCWGR_STASTO(f_prescaled);
     c86:	697b      	ldr	r3, [r7, #20]
     c88:	041b      	lsls	r3, r3, #16
     c8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     c8e:	431a      	orrs	r2, r3
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     c90:	68fb      	ldr	r3, [r7, #12]
     c92:	639a      	str	r2, [r3, #56]	; 0x38

	return STATUS_OK;
     c94:	2300      	movs	r3, #0
}
     c96:	4618      	mov	r0, r3
     c98:	371c      	adds	r7, #28
     c9a:	46bd      	mov	sp, r7
     c9c:	bc80      	pop	{r7}
     c9e:	4770      	bx	lr

00000ca0 <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
     ca0:	b590      	push	{r4, r7, lr}
     ca2:	b083      	sub	sp, #12
     ca4:	af00      	add	r7, sp, #0
     ca6:	6078      	str	r0, [r7, #4]
     ca8:	6039      	str	r1, [r7, #0]
	sysclk_enable_peripheral_clock(twim);
     caa:	6878      	ldr	r0, [r7, #4]
     cac:	4b43      	ldr	r3, [pc, #268]	; (dbc <twim_set_config+0x11c>)
     cae:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	2201      	movs	r2, #1
     cb4:	601a      	str	r2, [r3, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	2280      	movs	r2, #128	; 0x80
     cba:	601a      	str	r2, [r3, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
     cbc:	687b      	ldr	r3, [r7, #4]
     cbe:	f04f 32ff 	mov.w	r2, #4294967295
     cc2:	62da      	str	r2, [r3, #44]	; 0x2c

	if (config->smbus) {
     cc4:	683b      	ldr	r3, [r7, #0]
     cc6:	7b9b      	ldrb	r3, [r3, #14]
     cc8:	2b00      	cmp	r3, #0
     cca:	d006      	beq.n	cda <twim_set_config+0x3a>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	2210      	movs	r2, #16
     cd0:	601a      	str	r2, [r3, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	f04f 32ff 	mov.w	r2, #4294967295
     cd8:	609a      	str	r2, [r3, #8]
	}

	/* Select the speed */
	if (config->speed) {
     cda:	683b      	ldr	r3, [r7, #0]
     cdc:	685b      	ldr	r3, [r3, #4]
     cde:	2b00      	cmp	r3, #0
     ce0:	d00e      	beq.n	d00 <twim_set_config+0x60>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
     ce2:	683b      	ldr	r3, [r7, #0]
     ce4:	6859      	ldr	r1, [r3, #4]
     ce6:	683b      	ldr	r3, [r7, #0]
     ce8:	681a      	ldr	r2, [r3, #0]
     cea:	683b      	ldr	r3, [r7, #0]
     cec:	7b1b      	ldrb	r3, [r3, #12]
     cee:	6878      	ldr	r0, [r7, #4]
     cf0:	4c33      	ldr	r4, [pc, #204]	; (dc0 <twim_set_config+0x120>)
     cf2:	47a0      	blx	r4
     cf4:	4603      	mov	r3, r0
     cf6:	2b00      	cmp	r3, #0
     cf8:	d002      	beq.n	d00 <twim_set_config+0x60>
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
     cfa:	f06f 0307 	mvn.w	r3, #7
     cfe:	e058      	b.n	db2 <twim_set_config+0x112>
		}
	}
	if (config->hsmode_speed) {
     d00:	683b      	ldr	r3, [r7, #0]
     d02:	689b      	ldr	r3, [r3, #8]
     d04:	2b00      	cmp	r3, #0
     d06:	d00e      	beq.n	d26 <twim_set_config+0x86>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
     d08:	683b      	ldr	r3, [r7, #0]
     d0a:	6899      	ldr	r1, [r3, #8]
     d0c:	683b      	ldr	r3, [r7, #0]
     d0e:	681a      	ldr	r2, [r3, #0]
     d10:	683b      	ldr	r3, [r7, #0]
     d12:	7b5b      	ldrb	r3, [r3, #13]
     d14:	6878      	ldr	r0, [r7, #4]
     d16:	4c2b      	ldr	r4, [pc, #172]	; (dc4 <twim_set_config+0x124>)
     d18:	47a0      	blx	r4
     d1a:	4603      	mov	r3, r0
     d1c:	2b00      	cmp	r3, #0
     d1e:	d002      	beq.n	d26 <twim_set_config+0x86>
				config->hsmode_data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
     d20:	f06f 0307 	mvn.w	r3, #7
     d24:	e045      	b.n	db2 <twim_set_config+0x112>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
     d26:	683b      	ldr	r3, [r7, #0]
     d28:	685b      	ldr	r3, [r3, #4]
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
     d2a:	4a27      	ldr	r2, [pc, #156]	; (dc8 <twim_set_config+0x128>)
     d2c:	4293      	cmp	r3, r2
     d2e:	d802      	bhi.n	d36 <twim_set_config+0x96>
     d30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     d34:	e001      	b.n	d3a <twim_set_config+0x9a>
     d36:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
     d3a:	683b      	ldr	r3, [r7, #0]
     d3c:	7bdb      	ldrb	r3, [r3, #15]
     d3e:	061b      	lsls	r3, r3, #24
     d40:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
     d44:	431a      	orrs	r2, r3
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
     d46:	683b      	ldr	r3, [r7, #0]
     d48:	7c1b      	ldrb	r3, [r3, #16]
     d4a:	041b      	lsls	r3, r3, #16
     d4c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
     d50:	431a      	orrs	r2, r3
			| TWIM_SRR_DASLEW(config->data_slew_limit)
     d52:	683b      	ldr	r3, [r7, #0]
     d54:	7c5b      	ldrb	r3, [r3, #17]
     d56:	021b      	lsls	r3, r3, #8
     d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
     d5c:	431a      	orrs	r2, r3
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
     d5e:	683b      	ldr	r3, [r7, #0]
     d60:	7c9b      	ldrb	r3, [r3, #18]
     d62:	f003 0307 	and.w	r3, r3, #7
     d66:	431a      	orrs	r2, r3
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
     d68:	687b      	ldr	r3, [r7, #4]
     d6a:	63da      	str	r2, [r3, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
     d6c:	683b      	ldr	r3, [r7, #0]
     d6e:	7cdb      	ldrb	r3, [r3, #19]
     d70:	061b      	lsls	r3, r3, #24
     d72:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
     d76:	683b      	ldr	r3, [r7, #0]
     d78:	7d5b      	ldrb	r3, [r3, #21]
     d7a:	041b      	lsls	r3, r3, #16
     d7c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
     d80:	431a      	orrs	r2, r3
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
     d82:	683b      	ldr	r3, [r7, #0]
     d84:	7d1b      	ldrb	r3, [r3, #20]
     d86:	051b      	lsls	r3, r3, #20
     d88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
     d8c:	431a      	orrs	r2, r3
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
     d8e:	683b      	ldr	r3, [r7, #0]
     d90:	7d9b      	ldrb	r3, [r3, #22]
     d92:	021b      	lsls	r3, r3, #8
     d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
     d98:	431a      	orrs	r2, r3
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
     d9a:	683b      	ldr	r3, [r7, #0]
     d9c:	7ddb      	ldrb	r3, [r3, #23]
     d9e:	f003 0307 	and.w	r3, r3, #7
     da2:	4313      	orrs	r3, r2
     da4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	641a      	str	r2, [r3, #64]	; 0x40

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
     dac:	4b07      	ldr	r3, [pc, #28]	; (dcc <twim_set_config+0x12c>)
     dae:	4798      	blx	r3
#endif

	return STATUS_OK;
     db0:	2300      	movs	r3, #0
}
     db2:	4618      	mov	r0, r3
     db4:	370c      	adds	r7, #12
     db6:	46bd      	mov	sp, r7
     db8:	bd90      	pop	{r4, r7, pc}
     dba:	bf00      	nop
     dbc:	000028cd 	.word	0x000028cd
     dc0:	00000b95 	.word	0x00000b95
     dc4:	00000c1b 	.word	0x00000c1b
     dc8:	000f423f 	.word	0x000f423f
     dcc:	00000585 	.word	0x00000585

00000dd0 <twim_enable_interrupt>:
 *
 * \param twim              Base address of the TWIM
 * \param interrupt_source  The TWI interrupt to be enabled
 */
void twim_enable_interrupt(Twim *twim, uint32_t interrupt_source)
{
     dd0:	b480      	push	{r7}
     dd2:	b083      	sub	sp, #12
     dd4:	af00      	add	r7, sp, #0
     dd6:	6078      	str	r0, [r7, #4]
     dd8:	6039      	str	r1, [r7, #0]
	/* Set the interrupt flags */
	twim->TWIM_IER = interrupt_source;
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	683a      	ldr	r2, [r7, #0]
     dde:	621a      	str	r2, [r3, #32]
}
     de0:	bf00      	nop
     de2:	370c      	adds	r7, #12
     de4:	46bd      	mov	sp, r7
     de6:	bc80      	pop	{r7}
     de8:	4770      	bx	lr
	...

00000dec <twi_master_read>:
 *
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twi_master_read(Twim *twim, struct twim_package *package)
{
     dec:	b580      	push	{r7, lr}
     dee:	b084      	sub	sp, #16
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
     df4:	6039      	str	r1, [r7, #0]
	uint32_t twim_ch = find_twim_channel_num(twim);
     df6:	6878      	ldr	r0, [r7, #4]
     df8:	4ba8      	ldr	r3, [pc, #672]	; (109c <__stack_size__+0x9c>)
     dfa:	4798      	blx	r3
     dfc:	60b8      	str	r0, [r7, #8]
	uint32_t cmdr_reg;

	/* Reset the TWIM module */
	twim->TWIM_CR = TWIM_CR_MEN;
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	2201      	movs	r2, #1
     e02:	601a      	str	r2, [r3, #0]
	twim->TWIM_CR = TWIM_CR_SWRST;
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	2280      	movs	r2, #128	; 0x80
     e08:	601a      	str	r2, [r3, #0]
	twim->TWIM_CR = TWIM_CR_MDIS;
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	2202      	movs	r2, #2
     e0e:	601a      	str	r2, [r3, #0]
	/* Clear the interrupt flags */
	twim->TWIM_IDR = ~0UL;
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	f04f 32ff 	mov.w	r2, #4294967295
     e16:	625a      	str	r2, [r3, #36]	; 0x24
	/* Clear the status flags */
	twim->TWIM_SCR = ~0UL;
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	f04f 32ff 	mov.w	r2, #4294967295
     e1e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Get a pointer to application data */
	p_twim_rx_data[twim_ch] = package->buffer;
     e20:	683b      	ldr	r3, [r7, #0]
     e22:	689a      	ldr	r2, [r3, #8]
     e24:	499e      	ldr	r1, [pc, #632]	; (10a0 <__stack_size__+0xa0>)
     e26:	68bb      	ldr	r3, [r7, #8]
     e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Set next transfer to false */
	twim_next_cmd_xfer_valid[twim_ch] = false;
     e2c:	4a9d      	ldr	r2, [pc, #628]	; (10a4 <__stack_size__+0xa4>)
     e2e:	68bb      	ldr	r3, [r7, #8]
     e30:	4413      	add	r3, r2
     e32:	2200      	movs	r2, #0
     e34:	701a      	strb	r2, [r3, #0]
	twim_next_rx_nb_bytes[twim_ch] = 0;
     e36:	4a9c      	ldr	r2, [pc, #624]	; (10a8 <__stack_size__+0xa8>)
     e38:	68bb      	ldr	r3, [r7, #8]
     e3a:	2100      	movs	r1, #0
     e3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	twim_next_tx_nb_bytes[twim_ch] = 0;
     e40:	4a9a      	ldr	r2, [pc, #616]	; (10ac <__stack_size__+0xac>)
     e42:	68bb      	ldr	r3, [r7, #8]
     e44:	2100      	movs	r1, #0
     e46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	/* Initialize bus transfer status */
	transfer_status[twim_ch] = TWI_SUCCESS;
     e4a:	4a99      	ldr	r2, [pc, #612]	; (10b0 <__stack_size__+0xb0>)
     e4c:	68bb      	ldr	r3, [r7, #8]
     e4e:	4413      	add	r3, r2
     e50:	2200      	movs	r2, #0
     e52:	701a      	strb	r2, [r3, #0]

	if (package->ten_bit) {
     e54:	683b      	ldr	r3, [r7, #0]
     e56:	7c1b      	ldrb	r3, [r3, #16]
     e58:	2b00      	cmp	r3, #0
     e5a:	f000 80a2 	beq.w	fa2 <twi_master_read+0x1b6>
		/* Mask NACK and RXRDY interrupts */
		twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_RXRDY;
     e5e:	4a95      	ldr	r2, [pc, #596]	; (10b4 <__stack_size__+0xb4>)
     e60:	68bb      	ldr	r3, [r7, #8]
     e62:	f240 5101 	movw	r1, #1281	; 0x501
     e66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/* Set the command register to initiate the transfer */
		cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
     e6a:	683b      	ldr	r3, [r7, #0]
     e6c:	7c5b      	ldrb	r3, [r3, #17]
					TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
     e6e:	2b00      	cmp	r3, #0
     e70:	d007      	beq.n	e82 <twi_master_read+0x96>
     e72:	683b      	ldr	r3, [r7, #0]
     e74:	7c9b      	ldrb	r3, [r3, #18]
     e76:	071b      	lsls	r3, r3, #28
     e78:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     e7c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
     e80:	e000      	b.n	e84 <twi_master_read+0x98>
     e82:	2200      	movs	r2, #0
					| TWIM_CMDR_SADR(package->chip)
     e84:	683b      	ldr	r3, [r7, #0]
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	0059      	lsls	r1, r3, #1
     e8a:	f240 73fe 	movw	r3, #2046	; 0x7fe
     e8e:	400b      	ands	r3, r1
     e90:	4313      	orrs	r3, r2
		cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
     e92:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
     e96:	60fb      	str	r3, [r7, #12]
					| TWIM_CMDR_VALID
					| TWIM_CMDR_START
					| TWIM_CMDR_TENBIT;

		if (package->addr_length) {
     e98:	683b      	ldr	r3, [r7, #0]
     e9a:	79db      	ldrb	r3, [r3, #7]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d01d      	beq.n	edc <twi_master_read+0xf0>
			/* Selection of first valid byte of the address */
			p_twim_tx_data[twim_ch] = package->addr;
     ea0:	683b      	ldr	r3, [r7, #0]
     ea2:	1d1a      	adds	r2, r3, #4
     ea4:	4984      	ldr	r1, [pc, #528]	; (10b8 <__stack_size__+0xb8>)
     ea6:	68bb      	ldr	r3, [r7, #8]
     ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			/* Set the number of bytes to transmit */
			twim_tx_nb_bytes[twim_ch] = package->addr_length;
     eac:	683b      	ldr	r3, [r7, #0]
     eae:	79db      	ldrb	r3, [r3, #7]
     eb0:	4619      	mov	r1, r3
     eb2:	4a82      	ldr	r2, [pc, #520]	; (10bc <__stack_size__+0xbc>)
     eb4:	68bb      	ldr	r3, [r7, #8]
     eb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			/* Fill transfer command */
			cmdr_reg |= twim_tx_nb_bytes[twim_ch];
     eba:	4a80      	ldr	r2, [pc, #512]	; (10bc <__stack_size__+0xbc>)
     ebc:	68bb      	ldr	r3, [r7, #8]
     ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     ec2:	68fa      	ldr	r2, [r7, #12]
     ec4:	4313      	orrs	r3, r2
     ec6:	60fb      	str	r3, [r7, #12]
			/* Mask TXRDY interrupt */
			twim_it_mask[twim_ch] |= TWIM_IER_TXRDY;
     ec8:	4a7a      	ldr	r2, [pc, #488]	; (10b4 <__stack_size__+0xb4>)
     eca:	68bb      	ldr	r3, [r7, #8]
     ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     ed0:	f043 0202 	orr.w	r2, r3, #2
     ed4:	4977      	ldr	r1, [pc, #476]	; (10b4 <__stack_size__+0xb4>)
     ed6:	68bb      	ldr	r3, [r7, #8]
     ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		twim->TWIM_CMDR = cmdr_reg;
     edc:	687b      	ldr	r3, [r7, #4]
     ede:	68fa      	ldr	r2, [r7, #12]
     ee0:	60da      	str	r2, [r3, #12]

		/* Set the command register to initiate the transfer */
		cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
     ee2:	683b      	ldr	r3, [r7, #0]
     ee4:	7c5b      	ldrb	r3, [r3, #17]
					TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
     ee6:	2b00      	cmp	r3, #0
     ee8:	d007      	beq.n	efa <twi_master_read+0x10e>
     eea:	683b      	ldr	r3, [r7, #0]
     eec:	7c9b      	ldrb	r3, [r3, #18]
     eee:	071b      	lsls	r3, r3, #28
     ef0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     ef4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
     ef8:	e000      	b.n	efc <twi_master_read+0x110>
     efa:	2200      	movs	r2, #0
					| TWIM_CMDR_SADR(package->chip)
     efc:	683b      	ldr	r3, [r7, #0]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	0059      	lsls	r1, r3, #1
     f02:	f240 73fe 	movw	r3, #2046	; 0x7fe
     f06:	400b      	ands	r3, r1
     f08:	4313      	orrs	r3, r2
		cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
     f0a:	f443 4338 	orr.w	r3, r3, #47104	; 0xb800
     f0e:	f043 0301 	orr.w	r3, r3, #1
     f12:	60fb      	str	r3, [r7, #12]
					| TWIM_CMDR_START
					| TWIM_CMDR_TENBIT
					| TWIM_CMDR_REPSAME
					| TWIM_CMDR_READ;
		/* Fill next transfer command */
		if (package->length > TWIM_MAX_NBYTES_PER_XFER) {
     f14:	683b      	ldr	r3, [r7, #0]
     f16:	68db      	ldr	r3, [r3, #12]
     f18:	2bff      	cmp	r3, #255	; 0xff
     f1a:	d922      	bls.n	f62 <twi_master_read+0x176>
			twim_next_cmd_xfer_valid[twim_ch] = true;
     f1c:	4a61      	ldr	r2, [pc, #388]	; (10a4 <__stack_size__+0xa4>)
     f1e:	68bb      	ldr	r3, [r7, #8]
     f20:	4413      	add	r3, r2
     f22:	2201      	movs	r2, #1
     f24:	701a      	strb	r2, [r3, #0]
			twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
     f26:	4a66      	ldr	r2, [pc, #408]	; (10c0 <__stack_size__+0xc0>)
     f28:	68bb      	ldr	r3, [r7, #8]
     f2a:	21ff      	movs	r1, #255	; 0xff
     f2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			p_twim_next_rx_data[twim_ch] = p_twim_rx_data[twim_ch] + TWIM_MAX_NBYTES_PER_XFER;
     f30:	4a5b      	ldr	r2, [pc, #364]	; (10a0 <__stack_size__+0xa0>)
     f32:	68bb      	ldr	r3, [r7, #8]
     f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     f38:	f103 02ff 	add.w	r2, r3, #255	; 0xff
     f3c:	4961      	ldr	r1, [pc, #388]	; (10c4 <__stack_size__+0xc4>)
     f3e:	68bb      	ldr	r3, [r7, #8]
     f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			twim_next_rx_nb_bytes[twim_ch] = package->length - TWIM_MAX_NBYTES_PER_XFER;
     f44:	683b      	ldr	r3, [r7, #0]
     f46:	68db      	ldr	r3, [r3, #12]
     f48:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
     f4c:	4956      	ldr	r1, [pc, #344]	; (10a8 <__stack_size__+0xa8>)
     f4e:	68bb      	ldr	r3, [r7, #8]
     f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
     f54:	68fb      	ldr	r3, [r7, #12]
     f56:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
     f5a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     f5e:	60fb      	str	r3, [r7, #12]
     f60:	e011      	b.n	f86 <twi_master_read+0x19a>
		} else {
			twim_rx_nb_bytes[twim_ch] = package->length;
     f62:	683b      	ldr	r3, [r7, #0]
     f64:	68da      	ldr	r2, [r3, #12]
     f66:	4956      	ldr	r1, [pc, #344]	; (10c0 <__stack_size__+0xc0>)
     f68:	68bb      	ldr	r3, [r7, #8]
     f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			cmdr_reg |= (TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]) | TWIM_CMDR_STOP);
     f6e:	4a54      	ldr	r2, [pc, #336]	; (10c0 <__stack_size__+0xc0>)
     f70:	68bb      	ldr	r3, [r7, #8]
     f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     f76:	041b      	lsls	r3, r3, #16
     f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     f80:	68fa      	ldr	r2, [r7, #12]
     f82:	4313      	orrs	r3, r2
     f84:	60fb      	str	r3, [r7, #12]
		}
		cmdr_reg |=  TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]);
     f86:	4a4e      	ldr	r2, [pc, #312]	; (10c0 <__stack_size__+0xc0>)
     f88:	68bb      	ldr	r3, [r7, #8]
     f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     f8e:	041b      	lsls	r3, r3, #16
     f90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     f94:	68fa      	ldr	r2, [r7, #12]
     f96:	4313      	orrs	r3, r2
     f98:	60fb      	str	r3, [r7, #12]
		twim->TWIM_NCMDR = cmdr_reg;
     f9a:	687b      	ldr	r3, [r7, #4]
     f9c:	68fa      	ldr	r2, [r7, #12]
     f9e:	611a      	str	r2, [r3, #16]
     fa0:	e144      	b.n	122c <__stack_size__+0x22c>
	} else {
		/* Check if internal address access is performed */
		if (package->addr_length) {
     fa2:	683b      	ldr	r3, [r7, #0]
     fa4:	79db      	ldrb	r3, [r3, #7]
     fa6:	2b00      	cmp	r3, #0
     fa8:	f000 80ae 	beq.w	1108 <__stack_size__+0x108>
			/* Selection of first valid byte of the address */
			p_twim_tx_data[twim_ch] = package->addr;
     fac:	683b      	ldr	r3, [r7, #0]
     fae:	1d1a      	adds	r2, r3, #4
     fb0:	4941      	ldr	r1, [pc, #260]	; (10b8 <__stack_size__+0xb8>)
     fb2:	68bb      	ldr	r3, [r7, #8]
     fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			/* Set the number of bytes to transmit */
			twim_tx_nb_bytes[twim_ch] = package->addr_length;
     fb8:	683b      	ldr	r3, [r7, #0]
     fba:	79db      	ldrb	r3, [r3, #7]
     fbc:	4619      	mov	r1, r3
     fbe:	4a3f      	ldr	r2, [pc, #252]	; (10bc <__stack_size__+0xbc>)
     fc0:	68bb      	ldr	r3, [r7, #8]
     fc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			/* Mask NACK, TXRDY and RXRDY interrupts */
			twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_TXRDY
     fc6:	4a3b      	ldr	r2, [pc, #236]	; (10b4 <__stack_size__+0xb4>)
     fc8:	68bb      	ldr	r3, [r7, #8]
     fca:	f240 5103 	movw	r1, #1283	; 0x503
     fce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				| TWIM_IER_RXRDY;
			/* Set the command register to initiate the transfer */
			twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
     fd2:	683b      	ldr	r3, [r7, #0]
     fd4:	7c5b      	ldrb	r3, [r3, #17]
					TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
     fd6:	2b00      	cmp	r3, #0
     fd8:	d007      	beq.n	fea <twi_master_read+0x1fe>
     fda:	683b      	ldr	r3, [r7, #0]
     fdc:	7c9b      	ldrb	r3, [r3, #18]
     fde:	071b      	lsls	r3, r3, #28
     fe0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     fe4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
     fe8:	e000      	b.n	fec <twi_master_read+0x200>
     fea:	2200      	movs	r2, #0
					| TWIM_CMDR_SADR(package->chip)
     fec:	683b      	ldr	r3, [r7, #0]
     fee:	681b      	ldr	r3, [r3, #0]
     ff0:	0059      	lsls	r1, r3, #1
     ff2:	f240 73fe 	movw	r3, #2046	; 0x7fe
     ff6:	400b      	ands	r3, r1
     ff8:	431a      	orrs	r2, r3
					| TWIM_CMDR_NBYTES(package->addr_length)
     ffa:	683b      	ldr	r3, [r7, #0]
     ffc:	79db      	ldrb	r3, [r3, #7]
     ffe:	041b      	lsls	r3, r3, #16
    1000:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    1004:	4313      	orrs	r3, r2
					| TWIM_CMDR_VALID
					| TWIM_CMDR_START
					| 0;
    1006:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
			twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	60da      	str	r2, [r3, #12]
			/* Set the command register to initiate the transfer */
			cmdr_reg = (package->high_speed ? (TWIM_NCMDR_HS |
    100e:	683b      	ldr	r3, [r7, #0]
    1010:	7c5b      	ldrb	r3, [r3, #17]
					TWIM_NCMDR_HSMCODE(package->high_speed_code)) : 0)
    1012:	2b00      	cmp	r3, #0
    1014:	d007      	beq.n	1026 <__stack_size__+0x26>
    1016:	683b      	ldr	r3, [r7, #0]
    1018:	7c9b      	ldrb	r3, [r3, #18]
    101a:	071b      	lsls	r3, r3, #28
    101c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    1020:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    1024:	e000      	b.n	1028 <__stack_size__+0x28>
    1026:	2200      	movs	r2, #0
					| TWIM_NCMDR_SADR(package->chip)
    1028:	683b      	ldr	r3, [r7, #0]
    102a:	681b      	ldr	r3, [r3, #0]
    102c:	0059      	lsls	r1, r3, #1
    102e:	f240 73fe 	movw	r3, #2046	; 0x7fe
    1032:	400b      	ands	r3, r1
    1034:	431a      	orrs	r2, r3
					| TWIM_NCMDR_NBYTES(package->length)
    1036:	683b      	ldr	r3, [r7, #0]
    1038:	68db      	ldr	r3, [r3, #12]
    103a:	041b      	lsls	r3, r3, #16
    103c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    1040:	4313      	orrs	r3, r2
			cmdr_reg = (package->high_speed ? (TWIM_NCMDR_HS |
    1042:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
    1046:	f043 0301 	orr.w	r3, r3, #1
    104a:	60fb      	str	r3, [r7, #12]
					| TWIM_NCMDR_VALID
					| TWIM_NCMDR_START
					| TWIM_NCMDR_READ;
			/* Fill transfer command */
			if (package->length > TWIM_MAX_NBYTES_PER_XFER) {
    104c:	683b      	ldr	r3, [r7, #0]
    104e:	68db      	ldr	r3, [r3, #12]
    1050:	2bff      	cmp	r3, #255	; 0xff
    1052:	d939      	bls.n	10c8 <__stack_size__+0xc8>
				twim_next_cmd_xfer_valid[twim_ch] = true;
    1054:	4a13      	ldr	r2, [pc, #76]	; (10a4 <__stack_size__+0xa4>)
    1056:	68bb      	ldr	r3, [r7, #8]
    1058:	4413      	add	r3, r2
    105a:	2201      	movs	r2, #1
    105c:	701a      	strb	r2, [r3, #0]
				twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    105e:	4a18      	ldr	r2, [pc, #96]	; (10c0 <__stack_size__+0xc0>)
    1060:	68bb      	ldr	r3, [r7, #8]
    1062:	21ff      	movs	r1, #255	; 0xff
    1064:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				p_twim_next_rx_data[twim_ch] = p_twim_rx_data[twim_ch] + TWIM_MAX_NBYTES_PER_XFER;
    1068:	4a0d      	ldr	r2, [pc, #52]	; (10a0 <__stack_size__+0xa0>)
    106a:	68bb      	ldr	r3, [r7, #8]
    106c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1070:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1074:	4913      	ldr	r1, [pc, #76]	; (10c4 <__stack_size__+0xc4>)
    1076:	68bb      	ldr	r3, [r7, #8]
    1078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				twim_next_rx_nb_bytes[twim_ch] = package->length - TWIM_MAX_NBYTES_PER_XFER;
    107c:	683b      	ldr	r3, [r7, #0]
    107e:	68db      	ldr	r3, [r3, #12]
    1080:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
    1084:	4908      	ldr	r1, [pc, #32]	; (10a8 <__stack_size__+0xa8>)
    1086:	68bb      	ldr	r3, [r7, #8]
    1088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    108c:	68fb      	ldr	r3, [r7, #12]
    108e:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    1092:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1096:	60fb      	str	r3, [r7, #12]
    1098:	e028      	b.n	10ec <__stack_size__+0xec>
    109a:	bf00      	nop
    109c:	000006bd 	.word	0x000006bd
    10a0:	2000030c 	.word	0x2000030c
    10a4:	20000350 	.word	0x20000350
    10a8:	20000384 	.word	0x20000384
    10ac:	20000374 	.word	0x20000374
    10b0:	2000031c 	.word	0x2000031c
    10b4:	20000340 	.word	0x20000340
    10b8:	200002fc 	.word	0x200002fc
    10bc:	20000320 	.word	0x20000320
    10c0:	20000330 	.word	0x20000330
    10c4:	20000364 	.word	0x20000364
			} else {
				twim_rx_nb_bytes[twim_ch] = package->length;
    10c8:	683b      	ldr	r3, [r7, #0]
    10ca:	68da      	ldr	r2, [r3, #12]
    10cc:	4977      	ldr	r1, [pc, #476]	; (12ac <__stack_size__+0x2ac>)
    10ce:	68bb      	ldr	r3, [r7, #8]
    10d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cmdr_reg |= (TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]) | TWIM_CMDR_STOP);
    10d4:	4a75      	ldr	r2, [pc, #468]	; (12ac <__stack_size__+0x2ac>)
    10d6:	68bb      	ldr	r3, [r7, #8]
    10d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    10dc:	041b      	lsls	r3, r3, #16
    10de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    10e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    10e6:	68fa      	ldr	r2, [r7, #12]
    10e8:	4313      	orrs	r3, r2
    10ea:	60fb      	str	r3, [r7, #12]
			}
			cmdr_reg |=  TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]);
    10ec:	4a6f      	ldr	r2, [pc, #444]	; (12ac <__stack_size__+0x2ac>)
    10ee:	68bb      	ldr	r3, [r7, #8]
    10f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    10f4:	041b      	lsls	r3, r3, #16
    10f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    10fa:	68fa      	ldr	r2, [r7, #12]
    10fc:	4313      	orrs	r3, r2
    10fe:	60fb      	str	r3, [r7, #12]
			twim->TWIM_NCMDR = cmdr_reg;
    1100:	687b      	ldr	r3, [r7, #4]
    1102:	68fa      	ldr	r2, [r7, #12]
    1104:	611a      	str	r2, [r3, #16]
    1106:	e091      	b.n	122c <__stack_size__+0x22c>
		} else {
			twim_tx_nb_bytes[twim_ch] = 0;
    1108:	4a69      	ldr	r2, [pc, #420]	; (12b0 <__stack_size__+0x2b0>)
    110a:	68bb      	ldr	r3, [r7, #8]
    110c:	2100      	movs	r1, #0
    110e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			/* Mask NACK and RXRDY interrupts */
			twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_RXRDY;
    1112:	4a68      	ldr	r2, [pc, #416]	; (12b4 <__stack_size__+0x2b4>)
    1114:	68bb      	ldr	r3, [r7, #8]
    1116:	f240 5101 	movw	r1, #1281	; 0x501
    111a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			/* Set the command register to initiate the transfer */
			cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
    111e:	683b      	ldr	r3, [r7, #0]
    1120:	7c5b      	ldrb	r3, [r3, #17]
						TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
    1122:	2b00      	cmp	r3, #0
    1124:	d007      	beq.n	1136 <__stack_size__+0x136>
    1126:	683b      	ldr	r3, [r7, #0]
    1128:	7c9b      	ldrb	r3, [r3, #18]
    112a:	071b      	lsls	r3, r3, #28
    112c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    1130:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    1134:	e000      	b.n	1138 <__stack_size__+0x138>
    1136:	2200      	movs	r2, #0
				| TWIM_CMDR_SADR(package->chip)
    1138:	683b      	ldr	r3, [r7, #0]
    113a:	681b      	ldr	r3, [r3, #0]
    113c:	0059      	lsls	r1, r3, #1
    113e:	f240 73fe 	movw	r3, #2046	; 0x7fe
    1142:	400b      	ands	r3, r1
    1144:	4313      	orrs	r3, r2
			cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
    1146:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
    114a:	f043 0301 	orr.w	r3, r3, #1
    114e:	60fb      	str	r3, [r7, #12]
				| TWIM_CMDR_VALID
				| TWIM_CMDR_START
				| TWIM_CMDR_READ;
			/* Fill transfer command */
			if (package->length > TWIM_MAX_NBYTES_PER_XFER) {
    1150:	683b      	ldr	r3, [r7, #0]
    1152:	68db      	ldr	r3, [r3, #12]
    1154:	2bff      	cmp	r3, #255	; 0xff
    1156:	d922      	bls.n	119e <__stack_size__+0x19e>
				twim_next_cmd_xfer_valid[twim_ch] = true;
    1158:	4a57      	ldr	r2, [pc, #348]	; (12b8 <__stack_size__+0x2b8>)
    115a:	68bb      	ldr	r3, [r7, #8]
    115c:	4413      	add	r3, r2
    115e:	2201      	movs	r2, #1
    1160:	701a      	strb	r2, [r3, #0]
				twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    1162:	4a52      	ldr	r2, [pc, #328]	; (12ac <__stack_size__+0x2ac>)
    1164:	68bb      	ldr	r3, [r7, #8]
    1166:	21ff      	movs	r1, #255	; 0xff
    1168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				p_twim_next_rx_data[twim_ch] = p_twim_rx_data[twim_ch] + TWIM_MAX_NBYTES_PER_XFER;
    116c:	4a53      	ldr	r2, [pc, #332]	; (12bc <__stack_size__+0x2bc>)
    116e:	68bb      	ldr	r3, [r7, #8]
    1170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1174:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1178:	4951      	ldr	r1, [pc, #324]	; (12c0 <__stack_size__+0x2c0>)
    117a:	68bb      	ldr	r3, [r7, #8]
    117c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				twim_next_rx_nb_bytes[twim_ch] = package->length - TWIM_MAX_NBYTES_PER_XFER;
    1180:	683b      	ldr	r3, [r7, #0]
    1182:	68db      	ldr	r3, [r3, #12]
    1184:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
    1188:	494e      	ldr	r1, [pc, #312]	; (12c4 <__stack_size__+0x2c4>)
    118a:	68bb      	ldr	r3, [r7, #8]
    118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    1190:	68fb      	ldr	r3, [r7, #12]
    1192:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    1196:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    119a:	60fb      	str	r3, [r7, #12]
    119c:	e011      	b.n	11c2 <__stack_size__+0x1c2>
			} else {
				twim_rx_nb_bytes[twim_ch] = package->length;
    119e:	683b      	ldr	r3, [r7, #0]
    11a0:	68da      	ldr	r2, [r3, #12]
    11a2:	4942      	ldr	r1, [pc, #264]	; (12ac <__stack_size__+0x2ac>)
    11a4:	68bb      	ldr	r3, [r7, #8]
    11a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cmdr_reg |= (TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]) | TWIM_CMDR_STOP);
    11aa:	4a40      	ldr	r2, [pc, #256]	; (12ac <__stack_size__+0x2ac>)
    11ac:	68bb      	ldr	r3, [r7, #8]
    11ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11b2:	041b      	lsls	r3, r3, #16
    11b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    11b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    11bc:	68fa      	ldr	r2, [r7, #12]
    11be:	4313      	orrs	r3, r2
    11c0:	60fb      	str	r3, [r7, #12]
			}
			cmdr_reg |=  TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]);
    11c2:	4a3a      	ldr	r2, [pc, #232]	; (12ac <__stack_size__+0x2ac>)
    11c4:	68bb      	ldr	r3, [r7, #8]
    11c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11ca:	041b      	lsls	r3, r3, #16
    11cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    11d0:	68fa      	ldr	r2, [r7, #12]
    11d2:	4313      	orrs	r3, r2
    11d4:	60fb      	str	r3, [r7, #12]
			twim->TWIM_CMDR = cmdr_reg;
    11d6:	687b      	ldr	r3, [r7, #4]
    11d8:	68fa      	ldr	r2, [r7, #12]
    11da:	60da      	str	r2, [r3, #12]

			/* Fill next transfer command */
			if (twim_next_rx_nb_bytes[twim_ch] > 0) {
    11dc:	4a39      	ldr	r2, [pc, #228]	; (12c4 <__stack_size__+0x2c4>)
    11de:	68bb      	ldr	r3, [r7, #8]
    11e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d021      	beq.n	122c <__stack_size__+0x22c>
				cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
    11e8:	68fb      	ldr	r3, [r7, #12]
    11ea:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
    11ee:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
    11f2:	60fb      	str	r3, [r7, #12]
				if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    11f4:	4a33      	ldr	r2, [pc, #204]	; (12c4 <__stack_size__+0x2c4>)
    11f6:	68bb      	ldr	r3, [r7, #8]
    11f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11fc:	2bff      	cmp	r3, #255	; 0xff
    11fe:	d906      	bls.n	120e <__stack_size__+0x20e>
					cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    1206:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    120a:	60fb      	str	r3, [r7, #12]
    120c:	e00b      	b.n	1226 <__stack_size__+0x226>
				} else {
					cmdr_reg |= (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch]) | TWIM_CMDR_STOP);
    120e:	4a2d      	ldr	r2, [pc, #180]	; (12c4 <__stack_size__+0x2c4>)
    1210:	68bb      	ldr	r3, [r7, #8]
    1212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1216:	041b      	lsls	r3, r3, #16
    1218:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1220:	68fa      	ldr	r2, [r7, #12]
    1222:	4313      	orrs	r3, r2
    1224:	60fb      	str	r3, [r7, #12]
				}
				twim->TWIM_NCMDR = cmdr_reg;
    1226:	687b      	ldr	r3, [r7, #4]
    1228:	68fa      	ldr	r2, [r7, #12]
    122a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    122c:	687b      	ldr	r3, [r7, #4]
    122e:	2201      	movs	r2, #1
    1230:	601a      	str	r2, [r3, #0]
	/* Update IMR through IER */
	twim->TWIM_IER = twim_it_mask[twim_ch];
    1232:	4a20      	ldr	r2, [pc, #128]	; (12b4 <__stack_size__+0x2b4>)
    1234:	68bb      	ldr	r3, [r7, #8]
    1236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    123a:	687b      	ldr	r3, [r7, #4]
    123c:	621a      	str	r2, [r3, #32]
	/* Get data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
    123e:	2002      	movs	r0, #2
    1240:	4b21      	ldr	r3, [pc, #132]	; (12c8 <__stack_size__+0x2c8>)
    1242:	4798      	blx	r3
	while (!(transfer_status[twim_ch])
    1244:	e001      	b.n	124a <__stack_size__+0x24a>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
		sleepmgr_enter_sleep();
    1246:	4b21      	ldr	r3, [pc, #132]	; (12cc <__stack_size__+0x2cc>)
    1248:	4798      	blx	r3
	while (!(transfer_status[twim_ch])
    124a:	4a21      	ldr	r2, [pc, #132]	; (12d0 <__stack_size__+0x2d0>)
    124c:	68bb      	ldr	r3, [r7, #8]
    124e:	4413      	add	r3, r2
    1250:	781b      	ldrb	r3, [r3, #0]
    1252:	b25b      	sxtb	r3, r3
    1254:	2b00      	cmp	r3, #0
    1256:	d107      	bne.n	1268 <__stack_size__+0x268>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    1258:	6878      	ldr	r0, [r7, #4]
    125a:	4b1e      	ldr	r3, [pc, #120]	; (12d4 <__stack_size__+0x2d4>)
    125c:	4798      	blx	r3
    125e:	4603      	mov	r3, r0
    1260:	f003 0310 	and.w	r3, r3, #16
    1264:	2b00      	cmp	r3, #0
    1266:	d0ee      	beq.n	1246 <__stack_size__+0x246>
	}
	sleepmgr_unlock_mode(SLEEPMGR_SLEEP_1);
    1268:	2002      	movs	r0, #2
    126a:	4b1b      	ldr	r3, [pc, #108]	; (12d8 <__stack_size__+0x2d8>)
    126c:	4798      	blx	r3
	while (!(transfer_status[twim_ch])
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
	}
#endif
	/* Disable master transfer */
	twim->TWIM_IDR = ~0UL;
    126e:	687b      	ldr	r3, [r7, #4]
    1270:	f04f 32ff 	mov.w	r2, #4294967295
    1274:	625a      	str	r2, [r3, #36]	; 0x24
	twim->TWIM_CR = TWIM_CR_MDIS;
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	2202      	movs	r2, #2
    127a:	601a      	str	r2, [r3, #0]
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
    127c:	4a14      	ldr	r2, [pc, #80]	; (12d0 <__stack_size__+0x2d0>)
    127e:	68bb      	ldr	r3, [r7, #8]
    1280:	4413      	add	r3, r2
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	b25b      	sxtb	r3, r3
    1286:	f113 0f04 	cmn.w	r3, #4
    128a:	d007      	beq.n	129c <__stack_size__+0x29c>
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
    128c:	4a10      	ldr	r2, [pc, #64]	; (12d0 <__stack_size__+0x2d0>)
    128e:	68bb      	ldr	r3, [r7, #8]
    1290:	4413      	add	r3, r2
    1292:	781b      	ldrb	r3, [r3, #0]
    1294:	b25b      	sxtb	r3, r3
    1296:	f113 0f02 	cmn.w	r3, #2
    129a:	d102      	bne.n	12a2 <__stack_size__+0x2a2>
		return ERR_IO_ERROR;
    129c:	f04f 33ff 	mov.w	r3, #4294967295
    12a0:	e000      	b.n	12a4 <__stack_size__+0x2a4>
	}
	return STATUS_OK;
    12a2:	2300      	movs	r3, #0
}
    12a4:	4618      	mov	r0, r3
    12a6:	3710      	adds	r7, #16
    12a8:	46bd      	mov	sp, r7
    12aa:	bd80      	pop	{r7, pc}
    12ac:	20000330 	.word	0x20000330
    12b0:	20000320 	.word	0x20000320
    12b4:	20000340 	.word	0x20000340
    12b8:	20000350 	.word	0x20000350
    12bc:	2000030c 	.word	0x2000030c
    12c0:	20000364 	.word	0x20000364
    12c4:	20000384 	.word	0x20000384
    12c8:	000005b9 	.word	0x000005b9
    12cc:	00000675 	.word	0x00000675
    12d0:	2000031c 	.word	0x2000031c
    12d4:	0000155d 	.word	0x0000155d
    12d8:	000005fd 	.word	0x000005fd

000012dc <twi_master_write>:
 *
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twi_master_write(Twim *twim, struct twim_package *package)
{
    12dc:	b580      	push	{r7, lr}
    12de:	b084      	sub	sp, #16
    12e0:	af00      	add	r7, sp, #0
    12e2:	6078      	str	r0, [r7, #4]
    12e4:	6039      	str	r1, [r7, #0]
	uint32_t twim_ch = find_twim_channel_num(twim);
    12e6:	6878      	ldr	r0, [r7, #4]
    12e8:	4b8f      	ldr	r3, [pc, #572]	; (1528 <twi_master_write+0x24c>)
    12ea:	4798      	blx	r3
    12ec:	60b8      	str	r0, [r7, #8]
	uint32_t cmdr_reg;

	/* Reset the TWIM module */
	twim->TWIM_CR = TWIM_CR_MEN;
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	2201      	movs	r2, #1
    12f2:	601a      	str	r2, [r3, #0]
	twim->TWIM_CR = TWIM_CR_SWRST;
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	2280      	movs	r2, #128	; 0x80
    12f8:	601a      	str	r2, [r3, #0]
	twim->TWIM_CR = TWIM_CR_MDIS;
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	2202      	movs	r2, #2
    12fe:	601a      	str	r2, [r3, #0]
	/* Clear the interrupt flags */
	twim->TWIM_IDR = ~0UL;
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	f04f 32ff 	mov.w	r2, #4294967295
    1306:	625a      	str	r2, [r3, #36]	; 0x24
	/* Clear the status flags */
	twim->TWIM_SCR = ~0UL;
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	f04f 32ff 	mov.w	r2, #4294967295
    130e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Initialize bus transfer status */
	transfer_status[twim_ch] = TWI_SUCCESS;
    1310:	4a86      	ldr	r2, [pc, #536]	; (152c <twi_master_write+0x250>)
    1312:	68bb      	ldr	r3, [r7, #8]
    1314:	4413      	add	r3, r2
    1316:	2200      	movs	r2, #0
    1318:	701a      	strb	r2, [r3, #0]
	/* Mask NACK and TXRDY interrupts */
	twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_TXRDY;
    131a:	4a85      	ldr	r2, [pc, #532]	; (1530 <twi_master_write+0x254>)
    131c:	68bb      	ldr	r3, [r7, #8]
    131e:	f240 5102 	movw	r1, #1282	; 0x502
    1322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	/* Set next transfer to false */
	twim_next_cmd_xfer_valid[twim_ch] = false;
    1326:	4a83      	ldr	r2, [pc, #524]	; (1534 <twi_master_write+0x258>)
    1328:	68bb      	ldr	r3, [r7, #8]
    132a:	4413      	add	r3, r2
    132c:	2200      	movs	r2, #0
    132e:	701a      	strb	r2, [r3, #0]
	twim_next_rx_nb_bytes[twim_ch] = 0;
    1330:	4a81      	ldr	r2, [pc, #516]	; (1538 <twi_master_write+0x25c>)
    1332:	68bb      	ldr	r3, [r7, #8]
    1334:	2100      	movs	r1, #0
    1336:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	twim_next_tx_nb_bytes[twim_ch] = 0;
    133a:	4a80      	ldr	r2, [pc, #512]	; (153c <twi_master_write+0x260>)
    133c:	68bb      	ldr	r3, [r7, #8]
    133e:	2100      	movs	r1, #0
    1340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	/* Set initial transfer command value */
	cmdr_reg =  (package->high_speed ? (TWIM_CMDR_HS |
    1344:	683b      	ldr	r3, [r7, #0]
    1346:	7c5b      	ldrb	r3, [r3, #17]
				TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
    1348:	2b00      	cmp	r3, #0
    134a:	d007      	beq.n	135c <twi_master_write+0x80>
    134c:	683b      	ldr	r3, [r7, #0]
    134e:	7c9b      	ldrb	r3, [r3, #18]
    1350:	071b      	lsls	r3, r3, #28
    1352:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    1356:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    135a:	e000      	b.n	135e <twi_master_write+0x82>
    135c:	2200      	movs	r2, #0
		| TWIM_CMDR_SADR(package->chip)
    135e:	683b      	ldr	r3, [r7, #0]
    1360:	681b      	ldr	r3, [r3, #0]
    1362:	0059      	lsls	r1, r3, #1
    1364:	f240 73fe 	movw	r3, #2046	; 0x7fe
    1368:	400b      	ands	r3, r1
    136a:	431a      	orrs	r2, r3
		| TWIM_CMDR_VALID
		| TWIM_CMDR_START
		| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
    136c:	683b      	ldr	r3, [r7, #0]
    136e:	7c1b      	ldrb	r3, [r3, #16]
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <twi_master_write+0x9e>
    1374:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1378:	e000      	b.n	137c <twi_master_write+0xa0>
    137a:	2300      	movs	r3, #0
    137c:	4313      	orrs	r3, r2
	cmdr_reg =  (package->high_speed ? (TWIM_CMDR_HS |
    137e:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
    1382:	60fb      	str	r3, [r7, #12]

	/* Check if internal address access is performed */
	if (package->addr_length) {
    1384:	683b      	ldr	r3, [r7, #0]
    1386:	79db      	ldrb	r3, [r3, #7]
    1388:	2b00      	cmp	r3, #0
    138a:	d028      	beq.n	13de <twi_master_write+0x102>
		/* Selection of first valid byte of the address */
		p_twim_tx_data[twim_ch] = package->addr;
    138c:	683b      	ldr	r3, [r7, #0]
    138e:	1d1a      	adds	r2, r3, #4
    1390:	496b      	ldr	r1, [pc, #428]	; (1540 <twi_master_write+0x264>)
    1392:	68bb      	ldr	r3, [r7, #8]
    1394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/* Set the number of bytes to transmit */
		twim_tx_nb_bytes[twim_ch] = package->addr_length;
    1398:	683b      	ldr	r3, [r7, #0]
    139a:	79db      	ldrb	r3, [r3, #7]
    139c:	4619      	mov	r1, r3
    139e:	4a69      	ldr	r2, [pc, #420]	; (1544 <twi_master_write+0x268>)
    13a0:	68bb      	ldr	r3, [r7, #8]
    13a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/* Set next transfer to true */
		twim_next_cmd_xfer_valid[twim_ch] = true;
    13a6:	4a63      	ldr	r2, [pc, #396]	; (1534 <twi_master_write+0x258>)
    13a8:	68bb      	ldr	r3, [r7, #8]
    13aa:	4413      	add	r3, r2
    13ac:	2201      	movs	r2, #1
    13ae:	701a      	strb	r2, [r3, #0]
		/* Set the number of bytes & address for next transfer */
		p_twim_next_tx_data[twim_ch] = package->buffer;
    13b0:	683b      	ldr	r3, [r7, #0]
    13b2:	689a      	ldr	r2, [r3, #8]
    13b4:	4964      	ldr	r1, [pc, #400]	; (1548 <twi_master_write+0x26c>)
    13b6:	68bb      	ldr	r3, [r7, #8]
    13b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		twim_next_tx_nb_bytes[twim_ch] = package->length;
    13bc:	683b      	ldr	r3, [r7, #0]
    13be:	68da      	ldr	r2, [r3, #12]
    13c0:	495e      	ldr	r1, [pc, #376]	; (153c <twi_master_write+0x260>)
    13c2:	68bb      	ldr	r3, [r7, #8]
    13c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/* Fill transfer command (no stop) */
		cmdr_reg |=  TWIM_CMDR_NBYTES(twim_tx_nb_bytes[twim_ch]);
    13c8:	4a5e      	ldr	r2, [pc, #376]	; (1544 <twi_master_write+0x268>)
    13ca:	68bb      	ldr	r3, [r7, #8]
    13cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    13d0:	041b      	lsls	r3, r3, #16
    13d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    13d6:	68fa      	ldr	r2, [r7, #12]
    13d8:	4313      	orrs	r3, r2
    13da:	60fb      	str	r3, [r7, #12]
    13dc:	e03a      	b.n	1454 <twi_master_write+0x178>
	} else {
		/* Get a pointer to application data */
		p_twim_tx_data[twim_ch] = package->buffer;
    13de:	683b      	ldr	r3, [r7, #0]
    13e0:	689a      	ldr	r2, [r3, #8]
    13e2:	4957      	ldr	r1, [pc, #348]	; (1540 <twi_master_write+0x264>)
    13e4:	68bb      	ldr	r3, [r7, #8]
    13e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/* Fill transfer command */
		if (package->length > TWIM_MAX_NBYTES_PER_XFER) {
    13ea:	683b      	ldr	r3, [r7, #0]
    13ec:	68db      	ldr	r3, [r3, #12]
    13ee:	2bff      	cmp	r3, #255	; 0xff
    13f0:	d91c      	bls.n	142c <twi_master_write+0x150>
			twim_next_cmd_xfer_valid[twim_ch] = true;
    13f2:	4a50      	ldr	r2, [pc, #320]	; (1534 <twi_master_write+0x258>)
    13f4:	68bb      	ldr	r3, [r7, #8]
    13f6:	4413      	add	r3, r2
    13f8:	2201      	movs	r2, #1
    13fa:	701a      	strb	r2, [r3, #0]
			twim_tx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    13fc:	4a51      	ldr	r2, [pc, #324]	; (1544 <twi_master_write+0x268>)
    13fe:	68bb      	ldr	r3, [r7, #8]
    1400:	21ff      	movs	r1, #255	; 0xff
    1402:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			p_twim_next_tx_data[twim_ch] = p_twim_tx_data[twim_ch] + TWIM_MAX_NBYTES_PER_XFER;
    1406:	4a4e      	ldr	r2, [pc, #312]	; (1540 <twi_master_write+0x264>)
    1408:	68bb      	ldr	r3, [r7, #8]
    140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    140e:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1412:	494d      	ldr	r1, [pc, #308]	; (1548 <twi_master_write+0x26c>)
    1414:	68bb      	ldr	r3, [r7, #8]
    1416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			twim_next_tx_nb_bytes[twim_ch] = package->length - TWIM_MAX_NBYTES_PER_XFER;
    141a:	683b      	ldr	r3, [r7, #0]
    141c:	68db      	ldr	r3, [r3, #12]
    141e:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
    1422:	4946      	ldr	r1, [pc, #280]	; (153c <twi_master_write+0x260>)
    1424:	68bb      	ldr	r3, [r7, #8]
    1426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    142a:	e009      	b.n	1440 <twi_master_write+0x164>
		} else {
			twim_tx_nb_bytes[twim_ch] = package->length;
    142c:	683b      	ldr	r3, [r7, #0]
    142e:	68da      	ldr	r2, [r3, #12]
    1430:	4944      	ldr	r1, [pc, #272]	; (1544 <twi_master_write+0x268>)
    1432:	68bb      	ldr	r3, [r7, #8]
    1434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			cmdr_reg |= TWIM_CMDR_STOP;
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    143e:	60fb      	str	r3, [r7, #12]
		}
		cmdr_reg |=  TWIM_CMDR_NBYTES(twim_tx_nb_bytes[twim_ch]);
    1440:	4a40      	ldr	r2, [pc, #256]	; (1544 <twi_master_write+0x268>)
    1442:	68bb      	ldr	r3, [r7, #8]
    1444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1448:	041b      	lsls	r3, r3, #16
    144a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    144e:	68fa      	ldr	r2, [r7, #12]
    1450:	4313      	orrs	r3, r2
    1452:	60fb      	str	r3, [r7, #12]
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = cmdr_reg;
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	68fa      	ldr	r2, [r7, #12]
    1458:	60da      	str	r2, [r3, #12]

	if (twim_next_cmd_xfer_valid[twim_ch]) {
    145a:	4a36      	ldr	r2, [pc, #216]	; (1534 <twi_master_write+0x258>)
    145c:	68bb      	ldr	r3, [r7, #8]
    145e:	4413      	add	r3, r2
    1460:	781b      	ldrb	r3, [r3, #0]
    1462:	b2db      	uxtb	r3, r3
    1464:	2b00      	cmp	r3, #0
    1466:	d01f      	beq.n	14a8 <twi_master_write+0x1cc>
		cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START));
    1468:	68fb      	ldr	r3, [r7, #12]
    146a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    146e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1472:	60fb      	str	r3, [r7, #12]
		if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    1474:	4a31      	ldr	r2, [pc, #196]	; (153c <twi_master_write+0x260>)
    1476:	68bb      	ldr	r3, [r7, #8]
    1478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    147c:	2bff      	cmp	r3, #255	; 0xff
    147e:	d904      	bls.n	148a <twi_master_write+0x1ae>
			cmdr_reg |=  TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER);
    1480:	68fb      	ldr	r3, [r7, #12]
    1482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
    1486:	60fb      	str	r3, [r7, #12]
    1488:	e00b      	b.n	14a2 <twi_master_write+0x1c6>
		} else {
			cmdr_reg |= (TWIM_CMDR_NBYTES(twim_next_tx_nb_bytes[twim_ch]) | TWIM_CMDR_STOP);
    148a:	4a2c      	ldr	r2, [pc, #176]	; (153c <twi_master_write+0x260>)
    148c:	68bb      	ldr	r3, [r7, #8]
    148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1492:	041b      	lsls	r3, r3, #16
    1494:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    1498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    149c:	68fa      	ldr	r2, [r7, #12]
    149e:	4313      	orrs	r3, r2
    14a0:	60fb      	str	r3, [r7, #12]
		}
		twim->TWIM_NCMDR = cmdr_reg;
    14a2:	687b      	ldr	r3, [r7, #4]
    14a4:	68fa      	ldr	r2, [r7, #12]
    14a6:	611a      	str	r2, [r3, #16]
	}

	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	2201      	movs	r2, #1
    14ac:	601a      	str	r2, [r3, #0]
	/* Update IMR through IER */
	twim->TWIM_IER = twim_it_mask[twim_ch];
    14ae:	4a20      	ldr	r2, [pc, #128]	; (1530 <twi_master_write+0x254>)
    14b0:	68bb      	ldr	r3, [r7, #8]
    14b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	621a      	str	r2, [r3, #32]
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
    14ba:	2002      	movs	r0, #2
    14bc:	4b23      	ldr	r3, [pc, #140]	; (154c <twi_master_write+0x270>)
    14be:	4798      	blx	r3
	while (!(transfer_status[twim_ch])
    14c0:	e001      	b.n	14c6 <twi_master_write+0x1ea>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
		sleepmgr_enter_sleep();
    14c2:	4b23      	ldr	r3, [pc, #140]	; (1550 <twi_master_write+0x274>)
    14c4:	4798      	blx	r3
	while (!(transfer_status[twim_ch])
    14c6:	4a19      	ldr	r2, [pc, #100]	; (152c <twi_master_write+0x250>)
    14c8:	68bb      	ldr	r3, [r7, #8]
    14ca:	4413      	add	r3, r2
    14cc:	781b      	ldrb	r3, [r3, #0]
    14ce:	b25b      	sxtb	r3, r3
    14d0:	2b00      	cmp	r3, #0
    14d2:	d107      	bne.n	14e4 <twi_master_write+0x208>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    14d4:	6878      	ldr	r0, [r7, #4]
    14d6:	4b1f      	ldr	r3, [pc, #124]	; (1554 <twi_master_write+0x278>)
    14d8:	4798      	blx	r3
    14da:	4603      	mov	r3, r0
    14dc:	f003 0310 	and.w	r3, r3, #16
    14e0:	2b00      	cmp	r3, #0
    14e2:	d0ee      	beq.n	14c2 <twi_master_write+0x1e6>
	}
	sleepmgr_unlock_mode(SLEEPMGR_SLEEP_1);
    14e4:	2002      	movs	r0, #2
    14e6:	4b1c      	ldr	r3, [pc, #112]	; (1558 <twi_master_write+0x27c>)
    14e8:	4798      	blx	r3
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
	}
#endif

	/* Disable master transfer */
	twim->TWIM_IDR = ~0UL;
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	f04f 32ff 	mov.w	r2, #4294967295
    14f0:	625a      	str	r2, [r3, #36]	; 0x24
	twim->TWIM_CR = TWIM_CR_MDIS;
    14f2:	687b      	ldr	r3, [r7, #4]
    14f4:	2202      	movs	r2, #2
    14f6:	601a      	str	r2, [r3, #0]
	/* Check for nack */
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
    14f8:	4a0c      	ldr	r2, [pc, #48]	; (152c <twi_master_write+0x250>)
    14fa:	68bb      	ldr	r3, [r7, #8]
    14fc:	4413      	add	r3, r2
    14fe:	781b      	ldrb	r3, [r3, #0]
    1500:	b25b      	sxtb	r3, r3
    1502:	f113 0f04 	cmn.w	r3, #4
    1506:	d007      	beq.n	1518 <twi_master_write+0x23c>
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <twi_master_write+0x250>)
    150a:	68bb      	ldr	r3, [r7, #8]
    150c:	4413      	add	r3, r2
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	b25b      	sxtb	r3, r3
    1512:	f113 0f02 	cmn.w	r3, #2
    1516:	d102      	bne.n	151e <twi_master_write+0x242>
		return ERR_IO_ERROR;
    1518:	f04f 33ff 	mov.w	r3, #4294967295
    151c:	e000      	b.n	1520 <twi_master_write+0x244>
	}
	return STATUS_OK;
    151e:	2300      	movs	r3, #0
}
    1520:	4618      	mov	r0, r3
    1522:	3710      	adds	r7, #16
    1524:	46bd      	mov	sp, r7
    1526:	bd80      	pop	{r7, pc}
    1528:	000006bd 	.word	0x000006bd
    152c:	2000031c 	.word	0x2000031c
    1530:	20000340 	.word	0x20000340
    1534:	20000350 	.word	0x20000350
    1538:	20000384 	.word	0x20000384
    153c:	20000374 	.word	0x20000374
    1540:	200002fc 	.word	0x200002fc
    1544:	20000320 	.word	0x20000320
    1548:	20000354 	.word	0x20000354
    154c:	000005b9 	.word	0x000005b9
    1550:	00000675 	.word	0x00000675
    1554:	0000155d 	.word	0x0000155d
    1558:	000005fd 	.word	0x000005fd

0000155c <twim_get_status>:
 * \brief Information about the current status of the TWIM
 *
 * \param twim   Base address of the TWIM
 */
uint32_t twim_get_status(Twim *twim)
{
    155c:	b480      	push	{r7}
    155e:	b083      	sub	sp, #12
    1560:	af00      	add	r7, sp, #0
    1562:	6078      	str	r0, [r7, #4]
	return twim->TWIM_SR;
    1564:	687b      	ldr	r3, [r7, #4]
    1566:	69db      	ldr	r3, [r3, #28]
}
    1568:	4618      	mov	r0, r3
    156a:	370c      	adds	r7, #12
    156c:	46bd      	mov	sp, r7
    156e:	bc80      	pop	{r7}
    1570:	4770      	bx	lr
	...

00001574 <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
    1574:	b580      	push	{r7, lr}
    1576:	b086      	sub	sp, #24
    1578:	af00      	add	r7, sp, #0
    157a:	60f8      	str	r0, [r7, #12]
    157c:	60b9      	str	r1, [r7, #8]
    157e:	607a      	str	r2, [r7, #4]
    1580:	70fb      	strb	r3, [r7, #3]
	uint32_t twim_ch = find_twim_channel_num(twim);
    1582:	68f8      	ldr	r0, [r7, #12]
    1584:	4b1d      	ldr	r3, [pc, #116]	; (15fc <twim_set_callback+0x88>)
    1586:	4798      	blx	r3
    1588:	6138      	str	r0, [r7, #16]
	uint32_t irq_line = 0;
    158a:	2300      	movs	r3, #0
    158c:	617b      	str	r3, [r7, #20]

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    158e:	68fb      	ldr	r3, [r7, #12]
    1590:	4a1b      	ldr	r2, [pc, #108]	; (1600 <twim_set_callback+0x8c>)
    1592:	4293      	cmp	r3, r2
    1594:	d101      	bne.n	159a <twim_set_callback+0x26>
		irq_line = TWIM3_IRQn;
    1596:	234e      	movs	r3, #78	; 0x4e
    1598:	617b      	str	r3, [r7, #20]
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	4a19      	ldr	r2, [pc, #100]	; (1604 <twim_set_callback+0x90>)
    159e:	4293      	cmp	r3, r2
    15a0:	d101      	bne.n	15a6 <twim_set_callback+0x32>
		irq_line = TWIM2_IRQn;
    15a2:	234d      	movs	r3, #77	; 0x4d
    15a4:	617b      	str	r3, [r7, #20]
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    15a6:	68fb      	ldr	r3, [r7, #12]
    15a8:	4a17      	ldr	r2, [pc, #92]	; (1608 <twim_set_callback+0x94>)
    15aa:	4293      	cmp	r3, r2
    15ac:	d101      	bne.n	15b2 <twim_set_callback+0x3e>
		irq_line = TWIM1_IRQn;
    15ae:	233f      	movs	r3, #63	; 0x3f
    15b0:	617b      	str	r3, [r7, #20]
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
    15b2:	68fb      	ldr	r3, [r7, #12]
    15b4:	4a15      	ldr	r2, [pc, #84]	; (160c <twim_set_callback+0x98>)
    15b6:	4293      	cmp	r3, r2
    15b8:	d101      	bne.n	15be <twim_set_callback+0x4a>
		irq_line = TWIM0_IRQn;
    15ba:	233d      	movs	r3, #61	; 0x3d
    15bc:	617b      	str	r3, [r7, #20]
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    15be:	4914      	ldr	r1, [pc, #80]	; (1610 <twim_set_callback+0x9c>)
    15c0:	693b      	ldr	r3, [r7, #16]
    15c2:	687a      	ldr	r2, [r7, #4]
    15c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    15c8:	697b      	ldr	r3, [r7, #20]
    15ca:	b25b      	sxtb	r3, r3
    15cc:	4618      	mov	r0, r3
    15ce:	4b11      	ldr	r3, [pc, #68]	; (1614 <twim_set_callback+0xa0>)
    15d0:	4798      	blx	r3
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
    15d2:	697b      	ldr	r3, [r7, #20]
    15d4:	b25b      	sxtb	r3, r3
    15d6:	78fa      	ldrb	r2, [r7, #3]
    15d8:	4611      	mov	r1, r2
    15da:	4618      	mov	r0, r3
    15dc:	4b0e      	ldr	r3, [pc, #56]	; (1618 <twim_set_callback+0xa4>)
    15de:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)irq_line);
    15e0:	697b      	ldr	r3, [r7, #20]
    15e2:	b25b      	sxtb	r3, r3
    15e4:	4618      	mov	r0, r3
    15e6:	4b0d      	ldr	r3, [pc, #52]	; (161c <twim_set_callback+0xa8>)
    15e8:	4798      	blx	r3
	twim_enable_interrupt(twim, interrupt_source);
    15ea:	68b9      	ldr	r1, [r7, #8]
    15ec:	68f8      	ldr	r0, [r7, #12]
    15ee:	4b0c      	ldr	r3, [pc, #48]	; (1620 <twim_set_callback+0xac>)
    15f0:	4798      	blx	r3
}
    15f2:	bf00      	nop
    15f4:	3718      	adds	r7, #24
    15f6:	46bd      	mov	sp, r7
    15f8:	bd80      	pop	{r7, pc}
    15fa:	bf00      	nop
    15fc:	000006bd 	.word	0x000006bd
    1600:	4007c000 	.word	0x4007c000
    1604:	40078000 	.word	0x40078000
    1608:	4001c000 	.word	0x4001c000
    160c:	40018000 	.word	0x40018000
    1610:	2000047c 	.word	0x2000047c
    1614:	00000439 	.word	0x00000439
    1618:	00000475 	.word	0x00000475
    161c:	00000401 	.word	0x00000401
    1620:	00000dd1 	.word	0x00000dd1

00001624 <TWIM0_Handler>:

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
    1624:	b580      	push	{r7, lr}
    1626:	af00      	add	r7, sp, #0
	twim_callback_pointer[0](TWIM0);
    1628:	4b02      	ldr	r3, [pc, #8]	; (1634 <TWIM0_Handler+0x10>)
    162a:	681b      	ldr	r3, [r3, #0]
    162c:	4802      	ldr	r0, [pc, #8]	; (1638 <TWIM0_Handler+0x14>)
    162e:	4798      	blx	r3
}
    1630:	bf00      	nop
    1632:	bd80      	pop	{r7, pc}
    1634:	2000047c 	.word	0x2000047c
    1638:	40018000 	.word	0x40018000

0000163c <TWIM1_Handler>:
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
    163c:	b580      	push	{r7, lr}
    163e:	af00      	add	r7, sp, #0
	twim_callback_pointer[1](TWIM1);
    1640:	4b02      	ldr	r3, [pc, #8]	; (164c <TWIM1_Handler+0x10>)
    1642:	685b      	ldr	r3, [r3, #4]
    1644:	4802      	ldr	r0, [pc, #8]	; (1650 <TWIM1_Handler+0x14>)
    1646:	4798      	blx	r3
}
    1648:	bf00      	nop
    164a:	bd80      	pop	{r7, pc}
    164c:	2000047c 	.word	0x2000047c
    1650:	4001c000 	.word	0x4001c000

00001654 <TWIM2_Handler>:
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
    1654:	b580      	push	{r7, lr}
    1656:	af00      	add	r7, sp, #0
	twim_callback_pointer[2](TWIM2);
    1658:	4b02      	ldr	r3, [pc, #8]	; (1664 <TWIM2_Handler+0x10>)
    165a:	689b      	ldr	r3, [r3, #8]
    165c:	4802      	ldr	r0, [pc, #8]	; (1668 <TWIM2_Handler+0x14>)
    165e:	4798      	blx	r3
}
    1660:	bf00      	nop
    1662:	bd80      	pop	{r7, pc}
    1664:	2000047c 	.word	0x2000047c
    1668:	40078000 	.word	0x40078000

0000166c <TWIM3_Handler>:
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
    166c:	b580      	push	{r7, lr}
    166e:	af00      	add	r7, sp, #0
	twim_callback_pointer[3](TWIM3);
    1670:	4b02      	ldr	r3, [pc, #8]	; (167c <TWIM3_Handler+0x10>)
    1672:	68db      	ldr	r3, [r3, #12]
    1674:	4802      	ldr	r0, [pc, #8]	; (1680 <TWIM3_Handler+0x14>)
    1676:	4798      	blx	r3
}
    1678:	bf00      	nop
    167a:	bd80      	pop	{r7, pc}
    167c:	2000047c 	.word	0x2000047c
    1680:	4007c000 	.word	0x4007c000

00001684 <lcdca_clear_display_memory>:

/**
 * \brief Clear all the LCDCA display memory.
 */
static inline void lcdca_clear_display_memory(void)
{
    1684:	b480      	push	{r7}
    1686:	af00      	add	r7, sp, #0
	LCDCA->LCDCA_CR = LCDCA_CR_CDM;
    1688:	4b03      	ldr	r3, [pc, #12]	; (1698 <lcdca_clear_display_memory+0x14>)
    168a:	f44f 7280 	mov.w	r2, #256	; 0x100
    168e:	601a      	str	r2, [r3, #0]
}
    1690:	bf00      	nop
    1692:	46bd      	mov	sp, r7
    1694:	bc80      	pop	{r7}
    1696:	4770      	bx	lr
    1698:	40080000 	.word	0x40080000

0000169c <lcdca_blink_disable>:

/**
 * \brief Disable the LCDCA blink mode.
 */
static inline void lcdca_blink_disable(void)
{
    169c:	b480      	push	{r7}
    169e:	af00      	add	r7, sp, #0
	/* Blinking "off" */
	LCDCA->LCDCA_CR  = LCDCA_CR_BSTOP;
    16a0:	4b03      	ldr	r3, [pc, #12]	; (16b0 <lcdca_blink_disable+0x14>)
    16a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    16a6:	601a      	str	r2, [r3, #0]
}
    16a8:	bf00      	nop
    16aa:	46bd      	mov	sp, r7
    16ac:	bc80      	pop	{r7}
    16ae:	4770      	bx	lr
    16b0:	40080000 	.word	0x40080000

000016b4 <lcdca_automated_char_stop>:
 *
 * \note This function also disables the PDCA channel associated with the
 * LCDCA module.
 */
static inline void lcdca_automated_char_stop(void)
{
    16b4:	b580      	push	{r7, lr}
    16b6:	af00      	add	r7, sp, #0
	/* Disable PDCA channel */
	pdca_channel_disable(LCDCA_AUTOMATED_CHAR_DMA_CH);
    16b8:	2003      	movs	r0, #3
    16ba:	4b05      	ldr	r3, [pc, #20]	; (16d0 <lcdca_automated_char_stop+0x1c>)
    16bc:	4798      	blx	r3

	/* Disable automated display */
	LCDCA->LCDCA_ACMCFG &= ~LCDCA_ACMCFG_EN;
    16be:	4a05      	ldr	r2, [pc, #20]	; (16d4 <lcdca_automated_char_stop+0x20>)
    16c0:	4b04      	ldr	r3, [pc, #16]	; (16d4 <lcdca_automated_char_stop+0x20>)
    16c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    16c4:	f023 0301 	bic.w	r3, r3, #1
    16c8:	6493      	str	r3, [r2, #72]	; 0x48
}
    16ca:	bf00      	nop
    16cc:	bd80      	pop	{r7, pc}
    16ce:	bf00      	nop
    16d0:	0000197d 	.word	0x0000197d
    16d4:	40080000 	.word	0x40080000

000016d8 <lcdca_circular_shift_disable>:

/**
 * \brief Disable the LCDCA circular shift mode.
 */
static inline void lcdca_circular_shift_disable(void)
{
    16d8:	b480      	push	{r7}
    16da:	af00      	add	r7, sp, #0
	/* CSR "off" */
	LCDCA->LCDCA_CR  = LCDCA_CR_CSTOP;
    16dc:	4b03      	ldr	r3, [pc, #12]	; (16ec <lcdca_circular_shift_disable+0x14>)
    16de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    16e2:	601a      	str	r2, [r3, #0]
}
    16e4:	bf00      	nop
    16e6:	46bd      	mov	sp, r7
    16e8:	bc80      	pop	{r7}
    16ea:	4770      	bx	lr
    16ec:	40080000 	.word	0x40080000

000016f0 <c42412a_init>:
#include "c42412a.h"
#include "conf_c42412a_lcdca.h"
#include "lcdca.h"

status_code_t c42412a_init(void)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b084      	sub	sp, #16
    16f4:	af00      	add	r7, sp, #0
	struct lcdca_config lcdca_cfg;

	lcdca_clk_init();
    16f6:	4b15      	ldr	r3, [pc, #84]	; (174c <c42412a_init+0x5c>)
    16f8:	4798      	blx	r3
	lcdca_cfg.port_mask = C42412A_PORT_MASK;
    16fa:	2318      	movs	r3, #24
    16fc:	713b      	strb	r3, [r7, #4]
	lcdca_cfg.x_bias = CONF_C42412A_X_BIAS;
    16fe:	2300      	movs	r3, #0
    1700:	717b      	strb	r3, [r7, #5]
	lcdca_cfg.lp_wave = true;
    1702:	2301      	movs	r3, #1
    1704:	71bb      	strb	r3, [r7, #6]
	lcdca_cfg.duty_type = C42412A_LCD_DUTY;
    1706:	2300      	movs	r3, #0
    1708:	71fb      	strb	r3, [r7, #7]
	lcdca_cfg.lcd_pres = CONF_C42412A_PRES;
    170a:	2300      	movs	r3, #0
    170c:	723b      	strb	r3, [r7, #8]
	lcdca_cfg.lcd_clkdiv = CONF_C42412A_CLKDIV;
    170e:	2307      	movs	r3, #7
    1710:	727b      	strb	r3, [r7, #9]
	lcdca_cfg.fc0 = CONF_C42412A_FC0;
    1712:	2302      	movs	r3, #2
    1714:	72bb      	strb	r3, [r7, #10]
	lcdca_cfg.fc1 = CONF_C42412A_FC1;
    1716:	2302      	movs	r3, #2
    1718:	72fb      	strb	r3, [r7, #11]
	lcdca_cfg.fc2 = CONF_C42412A_FC2;
    171a:	2301      	movs	r3, #1
    171c:	733b      	strb	r3, [r7, #12]
	lcdca_cfg.contrast = CONF_C42412A_CONTRAST;
    171e:	231e      	movs	r3, #30
    1720:	737b      	strb	r3, [r7, #13]
	lcdca_set_config(&lcdca_cfg);
    1722:	1d3b      	adds	r3, r7, #4
    1724:	4618      	mov	r0, r3
    1726:	4b0a      	ldr	r3, [pc, #40]	; (1750 <c42412a_init+0x60>)
    1728:	4798      	blx	r3
	lcdca_enable();
    172a:	4b0a      	ldr	r3, [pc, #40]	; (1754 <c42412a_init+0x64>)
    172c:	4798      	blx	r3
	lcdca_enable_timer(LCDCA_TIMER_FC0);
    172e:	2000      	movs	r0, #0
    1730:	4b09      	ldr	r3, [pc, #36]	; (1758 <c42412a_init+0x68>)
    1732:	4798      	blx	r3
	lcdca_enable_timer(LCDCA_TIMER_FC1);
    1734:	2001      	movs	r0, #1
    1736:	4b08      	ldr	r3, [pc, #32]	; (1758 <c42412a_init+0x68>)
    1738:	4798      	blx	r3
	lcdca_enable_timer(LCDCA_TIMER_FC2);
    173a:	2002      	movs	r0, #2
    173c:	4b06      	ldr	r3, [pc, #24]	; (1758 <c42412a_init+0x68>)
    173e:	4798      	blx	r3

	return STATUS_OK;
    1740:	2300      	movs	r3, #0
}
    1742:	4618      	mov	r0, r3
    1744:	3710      	adds	r7, #16
    1746:	46bd      	mov	sp, r7
    1748:	bd80      	pop	{r7, pc}
    174a:	bf00      	nop
    174c:	00001d75 	.word	0x00001d75
    1750:	00001dc5 	.word	0x00001dc5
    1754:	00001e61 	.word	0x00001e61
    1758:	00001efd 	.word	0x00001efd

0000175c <c42412a_clear_all>:
	lcdca_automated_char_stop();
	lcdca_set_display_memory();
}

void c42412a_clear_all(void)
{
    175c:	b580      	push	{r7, lr}
    175e:	af00      	add	r7, sp, #0
	lcdca_blink_disable();
    1760:	4b04      	ldr	r3, [pc, #16]	; (1774 <c42412a_clear_all+0x18>)
    1762:	4798      	blx	r3
	lcdca_circular_shift_disable();
    1764:	4b04      	ldr	r3, [pc, #16]	; (1778 <c42412a_clear_all+0x1c>)
    1766:	4798      	blx	r3
	lcdca_automated_char_stop();
    1768:	4b04      	ldr	r3, [pc, #16]	; (177c <c42412a_clear_all+0x20>)
    176a:	4798      	blx	r3
	lcdca_clear_display_memory();
    176c:	4b04      	ldr	r3, [pc, #16]	; (1780 <c42412a_clear_all+0x24>)
    176e:	4798      	blx	r3
}
    1770:	bf00      	nop
    1772:	bd80      	pop	{r7, pc}
    1774:	0000169d 	.word	0x0000169d
    1778:	000016d9 	.word	0x000016d9
    177c:	000016b5 	.word	0x000016b5
    1780:	00001685 	.word	0x00001685

00001784 <c42412a_show_text>:

void c42412a_show_text(const uint8_t *data)
{
    1784:	b590      	push	{r4, r7, lr}
    1786:	b085      	sub	sp, #20
    1788:	af02      	add	r7, sp, #8
    178a:	6078      	str	r0, [r7, #4]
	lcdca_write_packet(LCDCA_TDG_14SEG4COM, C42412A_FIRST_14SEG_4C, data,
    178c:	2300      	movs	r3, #0
    178e:	9300      	str	r3, [sp, #0]
    1790:	2305      	movs	r3, #5
    1792:	687a      	ldr	r2, [r7, #4]
    1794:	2104      	movs	r1, #4
    1796:	2002      	movs	r0, #2
    1798:	4c02      	ldr	r4, [pc, #8]	; (17a4 <c42412a_show_text+0x20>)
    179a:	47a0      	blx	r4
			C42412A_WIDTH_14SEG_4C, LCDCA_CMCFG_DREV_RIGHT);
}
    179c:	bf00      	nop
    179e:	370c      	adds	r7, #12
    17a0:	46bd      	mov	sp, r7
    17a2:	bd90      	pop	{r4, r7, pc}
    17a4:	00001fc5 	.word	0x00001fc5

000017a8 <c42412a_show_icon>:
	lcdca_write_packet(LCDCA_TDG_14SEG4COM, C42412A_FIRST_14SEG_4C,
			clear_data, C42412A_WIDTH_14SEG_4C, LCDCA_CMCFG_DREV_RIGHT);
}

void c42412a_show_icon(uint8_t icon_com, uint8_t icon_seg)
{
    17a8:	b580      	push	{r7, lr}
    17aa:	b082      	sub	sp, #8
    17ac:	af00      	add	r7, sp, #0
    17ae:	4603      	mov	r3, r0
    17b0:	460a      	mov	r2, r1
    17b2:	71fb      	strb	r3, [r7, #7]
    17b4:	4613      	mov	r3, r2
    17b6:	71bb      	strb	r3, [r7, #6]
	if (icon_com < 2) {
    17b8:	79fb      	ldrb	r3, [r7, #7]
    17ba:	2b01      	cmp	r3, #1
    17bc:	d805      	bhi.n	17ca <c42412a_show_icon+0x22>
		lcdca_clear_blink_pixel(icon_com, icon_seg);
    17be:	79ba      	ldrb	r2, [r7, #6]
    17c0:	79fb      	ldrb	r3, [r7, #7]
    17c2:	4611      	mov	r1, r2
    17c4:	4618      	mov	r0, r3
    17c6:	4b06      	ldr	r3, [pc, #24]	; (17e0 <c42412a_show_icon+0x38>)
    17c8:	4798      	blx	r3
	}

	lcdca_set_pixel(icon_com, icon_seg);
    17ca:	79ba      	ldrb	r2, [r7, #6]
    17cc:	79fb      	ldrb	r3, [r7, #7]
    17ce:	4611      	mov	r1, r2
    17d0:	4618      	mov	r0, r3
    17d2:	4b04      	ldr	r3, [pc, #16]	; (17e4 <c42412a_show_icon+0x3c>)
    17d4:	4798      	blx	r3
}
    17d6:	bf00      	nop
    17d8:	3708      	adds	r7, #8
    17da:	46bd      	mov	sp, r7
    17dc:	bd80      	pop	{r7, pc}
    17de:	bf00      	nop
    17e0:	00001f69 	.word	0x00001f69
    17e4:	00002125 	.word	0x00002125

000017e8 <c42412a_show_wireless>:
		lcdca_set_pixel(C42412A_ICON_BAT_LEVEL_1);
	}
}

void c42412a_show_wireless(enum c42412a_wireless_value val)
{
    17e8:	b580      	push	{r7, lr}
    17ea:	b082      	sub	sp, #8
    17ec:	af00      	add	r7, sp, #0
    17ee:	4603      	mov	r3, r0
    17f0:	71fb      	strb	r3, [r7, #7]
	lcdca_clear_pixel(C42412A_ICON_WLESS_LEVEL_1);
    17f2:	2102      	movs	r1, #2
    17f4:	2003      	movs	r0, #3
    17f6:	4b13      	ldr	r3, [pc, #76]	; (1844 <c42412a_show_wireless+0x5c>)
    17f8:	4798      	blx	r3
	lcdca_clear_pixel(C42412A_ICON_WLESS_LEVEL_2);
    17fa:	2103      	movs	r1, #3
    17fc:	2002      	movs	r0, #2
    17fe:	4b11      	ldr	r3, [pc, #68]	; (1844 <c42412a_show_wireless+0x5c>)
    1800:	4798      	blx	r3
	lcdca_clear_pixel(C42412A_ICON_WLESS_LEVEL_3);
    1802:	2102      	movs	r1, #2
    1804:	2002      	movs	r0, #2
    1806:	4b0f      	ldr	r3, [pc, #60]	; (1844 <c42412a_show_wireless+0x5c>)
    1808:	4798      	blx	r3
	lcdca_set_pixel(C42412A_ICON_WLESS_LEVEL_0);
    180a:	2103      	movs	r1, #3
    180c:	2003      	movs	r0, #3
    180e:	4b0e      	ldr	r3, [pc, #56]	; (1848 <c42412a_show_wireless+0x60>)
    1810:	4798      	blx	r3
	if (val > 2) {
    1812:	79fb      	ldrb	r3, [r7, #7]
    1814:	2b02      	cmp	r3, #2
    1816:	d903      	bls.n	1820 <c42412a_show_wireless+0x38>
		lcdca_set_pixel(C42412A_ICON_WLESS_LEVEL_3);
    1818:	2102      	movs	r1, #2
    181a:	2002      	movs	r0, #2
    181c:	4b0a      	ldr	r3, [pc, #40]	; (1848 <c42412a_show_wireless+0x60>)
    181e:	4798      	blx	r3
	}
	if (val > 1) {
    1820:	79fb      	ldrb	r3, [r7, #7]
    1822:	2b01      	cmp	r3, #1
    1824:	d903      	bls.n	182e <c42412a_show_wireless+0x46>
		lcdca_set_pixel(C42412A_ICON_WLESS_LEVEL_2);
    1826:	2103      	movs	r1, #3
    1828:	2002      	movs	r0, #2
    182a:	4b07      	ldr	r3, [pc, #28]	; (1848 <c42412a_show_wireless+0x60>)
    182c:	4798      	blx	r3
	}
	if (val > 0) {
    182e:	79fb      	ldrb	r3, [r7, #7]
    1830:	2b00      	cmp	r3, #0
    1832:	d003      	beq.n	183c <c42412a_show_wireless+0x54>
		lcdca_set_pixel(C42412A_ICON_WLESS_LEVEL_1);
    1834:	2102      	movs	r1, #2
    1836:	2003      	movs	r0, #3
    1838:	4b03      	ldr	r3, [pc, #12]	; (1848 <c42412a_show_wireless+0x60>)
    183a:	4798      	blx	r3
	}
}
    183c:	bf00      	nop
    183e:	3708      	adds	r7, #8
    1840:	46bd      	mov	sp, r7
    1842:	bd80      	pop	{r7, pc}
    1844:	00002219 	.word	0x00002219
    1848:	00002125 	.word	0x00002125

0000184c <c42412a_show_numeric_dec>:

void c42412a_show_numeric_dec(int32_t value)
{
    184c:	b580      	push	{r7, lr}
    184e:	b084      	sub	sp, #16
    1850:	af00      	add	r7, sp, #0
    1852:	6078      	str	r0, [r7, #4]
	uint8_t lcd_num[6];

	Assert(value > -200000);
	Assert(value < 200000);

	if(value < 0) {
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	2b00      	cmp	r3, #0
    1858:	da04      	bge.n	1864 <c42412a_show_numeric_dec+0x18>
		lcdca_set_pixel(C42412A_ICON_MINUS);
    185a:	2111      	movs	r1, #17
    185c:	2000      	movs	r0, #0
    185e:	4b1b      	ldr	r3, [pc, #108]	; (18cc <c42412a_show_numeric_dec+0x80>)
    1860:	4798      	blx	r3
    1862:	e003      	b.n	186c <c42412a_show_numeric_dec+0x20>
	} else {
		lcdca_clear_pixel(C42412A_ICON_MINUS);
    1864:	2111      	movs	r1, #17
    1866:	2000      	movs	r0, #0
    1868:	4b19      	ldr	r3, [pc, #100]	; (18d0 <c42412a_show_numeric_dec+0x84>)
    186a:	4798      	blx	r3
	}

	value = Abs(value);
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	2b00      	cmp	r3, #0
    1870:	bfb8      	it	lt
    1872:	425b      	neglt	r3, r3
    1874:	607b      	str	r3, [r7, #4]

	if(value > 99999) {
    1876:	687b      	ldr	r3, [r7, #4]
    1878:	4a16      	ldr	r2, [pc, #88]	; (18d4 <c42412a_show_numeric_dec+0x88>)
    187a:	4293      	cmp	r3, r2
    187c:	dd0d      	ble.n	189a <c42412a_show_numeric_dec+0x4e>
		value -= 100000;
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
    1884:	3ba0      	subs	r3, #160	; 0xa0
    1886:	607b      	str	r3, [r7, #4]
		lcdca_set_pixel(C42412A_ICON_MINUS_SEG1);
    1888:	210d      	movs	r1, #13
    188a:	2000      	movs	r0, #0
    188c:	4b0f      	ldr	r3, [pc, #60]	; (18cc <c42412a_show_numeric_dec+0x80>)
    188e:	4798      	blx	r3
		lcdca_set_pixel(C42412A_ICON_MINUS_SEG2);
    1890:	2109      	movs	r1, #9
    1892:	2000      	movs	r0, #0
    1894:	4b0d      	ldr	r3, [pc, #52]	; (18cc <c42412a_show_numeric_dec+0x80>)
    1896:	4798      	blx	r3
    1898:	e007      	b.n	18aa <c42412a_show_numeric_dec+0x5e>
	} else {
		lcdca_clear_pixel(C42412A_ICON_MINUS_SEG1);
    189a:	210d      	movs	r1, #13
    189c:	2000      	movs	r0, #0
    189e:	4b0c      	ldr	r3, [pc, #48]	; (18d0 <c42412a_show_numeric_dec+0x84>)
    18a0:	4798      	blx	r3
		lcdca_clear_pixel(C42412A_ICON_MINUS_SEG2);
    18a2:	2109      	movs	r1, #9
    18a4:	2000      	movs	r0, #0
    18a6:	4b0a      	ldr	r3, [pc, #40]	; (18d0 <c42412a_show_numeric_dec+0x84>)
    18a8:	4798      	blx	r3
	}

	sprintf((char*)lcd_num, "%4d", (int)value);
    18aa:	f107 0308 	add.w	r3, r7, #8
    18ae:	687a      	ldr	r2, [r7, #4]
    18b0:	4909      	ldr	r1, [pc, #36]	; (18d8 <c42412a_show_numeric_dec+0x8c>)
    18b2:	4618      	mov	r0, r3
    18b4:	4b09      	ldr	r3, [pc, #36]	; (18dc <c42412a_show_numeric_dec+0x90>)
    18b6:	4798      	blx	r3

	c42412a_show_text((uint8_t const*)&lcd_num);
    18b8:	f107 0308 	add.w	r3, r7, #8
    18bc:	4618      	mov	r0, r3
    18be:	4b08      	ldr	r3, [pc, #32]	; (18e0 <c42412a_show_numeric_dec+0x94>)
    18c0:	4798      	blx	r3
}
    18c2:	bf00      	nop
    18c4:	3710      	adds	r7, #16
    18c6:	46bd      	mov	sp, r7
    18c8:	bd80      	pop	{r7, pc}
    18ca:	bf00      	nop
    18cc:	00002125 	.word	0x00002125
    18d0:	00002219 	.word	0x00002219
    18d4:	0001869f 	.word	0x0001869f
    18d8:	000077dc 	.word	0x000077dc
    18dc:	000052b5 	.word	0x000052b5
    18e0:	00001785 	.word	0x00001785

000018e4 <pdca_channel_get_handler>:
 *
 * \return channel handled or PDCA_INVALID_ARGUMENT
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
    18e4:	b480      	push	{r7}
    18e6:	b085      	sub	sp, #20
    18e8:	af00      	add	r7, sp, #0
    18ea:	4603      	mov	r3, r0
    18ec:	71fb      	strb	r3, [r7, #7]
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
    18ee:	79fb      	ldrb	r3, [r7, #7]
    18f0:	2b0f      	cmp	r3, #15
    18f2:	d901      	bls.n	18f8 <pdca_channel_get_handler+0x14>
		pdca_ch_number = 0;
    18f4:	2300      	movs	r3, #0
    18f6:	71fb      	strb	r3, [r7, #7]

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    18f8:	79fb      	ldrb	r3, [r7, #7]
    18fa:	019b      	lsls	r3, r3, #6
    18fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1900:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
    1904:	60fb      	str	r3, [r7, #12]
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
    1906:	68fb      	ldr	r3, [r7, #12]
}
    1908:	4618      	mov	r0, r3
    190a:	3714      	adds	r7, #20
    190c:	46bd      	mov	sp, r7
    190e:	bc80      	pop	{r7}
    1910:	4770      	bx	lr
	...

00001914 <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
    1914:	b580      	push	{r7, lr}
    1916:	b086      	sub	sp, #24
    1918:	af00      	add	r7, sp, #0
    191a:	4603      	mov	r3, r0
    191c:	71fb      	strb	r3, [r7, #7]
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    191e:	79fb      	ldrb	r3, [r7, #7]
    1920:	4618      	mov	r0, r3
    1922:	4b15      	ldr	r3, [pc, #84]	; (1978 <pdca_get_channel_status+0x64>)
    1924:	4798      	blx	r3
    1926:	6178      	str	r0, [r7, #20]
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
    1928:	697b      	ldr	r3, [r7, #20]
    192a:	69db      	ldr	r3, [r3, #28]
    192c:	613b      	str	r3, [r7, #16]
	uint32_t intflag = pdca_channel->PDCA_ISR;
    192e:	697b      	ldr	r3, [r7, #20]
    1930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1932:	60fb      	str	r3, [r7, #12]

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
    1934:	693b      	ldr	r3, [r7, #16]
    1936:	f003 0301 	and.w	r3, r3, #1
    193a:	2b00      	cmp	r3, #0
    193c:	d016      	beq.n	196c <pdca_get_channel_status+0x58>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
    193e:	68fb      	ldr	r3, [r7, #12]
    1940:	f003 0304 	and.w	r3, r3, #4
    1944:	2b00      	cmp	r3, #0
    1946:	d001      	beq.n	194c <pdca_get_channel_status+0x38>
			return PDCA_CH_TRANSFER_ERROR;
    1948:	2304      	movs	r3, #4
    194a:	e010      	b.n	196e <pdca_get_channel_status+0x5a>
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	f003 0302 	and.w	r3, r3, #2
    1952:	2b00      	cmp	r3, #0
    1954:	d001      	beq.n	195a <pdca_get_channel_status+0x46>
			return PDCA_CH_TRANSFER_COMPLETED;
    1956:	2303      	movs	r3, #3
    1958:	e009      	b.n	196e <pdca_get_channel_status+0x5a>
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
    195a:	68fb      	ldr	r3, [r7, #12]
    195c:	f003 0301 	and.w	r3, r3, #1
    1960:	2b00      	cmp	r3, #0
    1962:	d001      	beq.n	1968 <pdca_get_channel_status+0x54>
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
    1964:	2302      	movs	r3, #2
    1966:	e002      	b.n	196e <pdca_get_channel_status+0x5a>
		}
		return PDCA_CH_BUSY;
    1968:	2301      	movs	r3, #1
    196a:	e000      	b.n	196e <pdca_get_channel_status+0x5a>
	} else {
		return PDCA_CH_FREE;
    196c:	2300      	movs	r3, #0
	}
}
    196e:	4618      	mov	r0, r3
    1970:	3718      	adds	r7, #24
    1972:	46bd      	mov	sp, r7
    1974:	bd80      	pop	{r7, pc}
    1976:	bf00      	nop
    1978:	000018e5 	.word	0x000018e5

0000197c <pdca_channel_disable>:
 * \brief Disable the PDCA for the given channel
 *
 * \param pdca_ch_number PDCA channel
 */
void pdca_channel_disable(pdca_channel_num_t pdca_ch_number)
{
    197c:	b580      	push	{r7, lr}
    197e:	b084      	sub	sp, #16
    1980:	af00      	add	r7, sp, #0
    1982:	4603      	mov	r3, r0
    1984:	71fb      	strb	r3, [r7, #7]
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    1986:	79fb      	ldrb	r3, [r7, #7]
    1988:	4618      	mov	r0, r3
    198a:	4b05      	ldr	r3, [pc, #20]	; (19a0 <pdca_channel_disable+0x24>)
    198c:	4798      	blx	r3
    198e:	60f8      	str	r0, [r7, #12]
			pdca_channel_get_handler(pdca_ch_number);

	/* Disable transfer */
	pdca_channel->PDCA_CR = PDCA_CR_TDIS;
    1990:	68fb      	ldr	r3, [r7, #12]
    1992:	2202      	movs	r2, #2
    1994:	615a      	str	r2, [r3, #20]

}
    1996:	bf00      	nop
    1998:	3710      	adds	r7, #16
    199a:	46bd      	mov	sp, r7
    199c:	bd80      	pop	{r7, pc}
    199e:	bf00      	nop
    19a0:	000018e5 	.word	0x000018e5

000019a4 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
    19a4:	b580      	push	{r7, lr}
    19a6:	b084      	sub	sp, #16
    19a8:	af00      	add	r7, sp, #0
    19aa:	4603      	mov	r3, r0
    19ac:	71fb      	strb	r3, [r7, #7]
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
    19ae:	79fb      	ldrb	r3, [r7, #7]
    19b0:	4618      	mov	r0, r3
    19b2:	4b0a      	ldr	r3, [pc, #40]	; (19dc <pdca_channel_interrupt+0x38>)
    19b4:	4798      	blx	r3
    19b6:	4603      	mov	r3, r0
    19b8:	73fb      	strb	r3, [r7, #15]

	if (pdca_callback_pointer[pdca_ch_number]) {
    19ba:	79fb      	ldrb	r3, [r7, #7]
    19bc:	4a08      	ldr	r2, [pc, #32]	; (19e0 <pdca_channel_interrupt+0x3c>)
    19be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    19c2:	2b00      	cmp	r3, #0
    19c4:	d006      	beq.n	19d4 <pdca_channel_interrupt+0x30>
		pdca_callback_pointer[pdca_ch_number] (status);
    19c6:	79fb      	ldrb	r3, [r7, #7]
    19c8:	4a05      	ldr	r2, [pc, #20]	; (19e0 <pdca_channel_interrupt+0x3c>)
    19ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    19ce:	7bfa      	ldrb	r2, [r7, #15]
    19d0:	4610      	mov	r0, r2
    19d2:	4798      	blx	r3
	} else {
		Assert(false); /* Catch unexpected interrupt */
	}
}
    19d4:	bf00      	nop
    19d6:	3710      	adds	r7, #16
    19d8:	46bd      	mov	sp, r7
    19da:	bd80      	pop	{r7, pc}
    19dc:	00001915 	.word	0x00001915
    19e0:	2000048c 	.word	0x2000048c

000019e4 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
    19e4:	b580      	push	{r7, lr}
    19e6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(0);
    19e8:	2000      	movs	r0, #0
    19ea:	4b02      	ldr	r3, [pc, #8]	; (19f4 <PDCA_0_Handler+0x10>)
    19ec:	4798      	blx	r3
}
    19ee:	bf00      	nop
    19f0:	bd80      	pop	{r7, pc}
    19f2:	bf00      	nop
    19f4:	000019a5 	.word	0x000019a5

000019f8 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(1);
    19fc:	2001      	movs	r0, #1
    19fe:	4b02      	ldr	r3, [pc, #8]	; (1a08 <PDCA_1_Handler+0x10>)
    1a00:	4798      	blx	r3
}
    1a02:	bf00      	nop
    1a04:	bd80      	pop	{r7, pc}
    1a06:	bf00      	nop
    1a08:	000019a5 	.word	0x000019a5

00001a0c <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
    1a0c:	b580      	push	{r7, lr}
    1a0e:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(2);
    1a10:	2002      	movs	r0, #2
    1a12:	4b02      	ldr	r3, [pc, #8]	; (1a1c <PDCA_2_Handler+0x10>)
    1a14:	4798      	blx	r3
}
    1a16:	bf00      	nop
    1a18:	bd80      	pop	{r7, pc}
    1a1a:	bf00      	nop
    1a1c:	000019a5 	.word	0x000019a5

00001a20 <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
    1a20:	b580      	push	{r7, lr}
    1a22:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(3);
    1a24:	2003      	movs	r0, #3
    1a26:	4b02      	ldr	r3, [pc, #8]	; (1a30 <PDCA_3_Handler+0x10>)
    1a28:	4798      	blx	r3
}
    1a2a:	bf00      	nop
    1a2c:	bd80      	pop	{r7, pc}
    1a2e:	bf00      	nop
    1a30:	000019a5 	.word	0x000019a5

00001a34 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
    1a34:	b580      	push	{r7, lr}
    1a36:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(4);
    1a38:	2004      	movs	r0, #4
    1a3a:	4b02      	ldr	r3, [pc, #8]	; (1a44 <PDCA_4_Handler+0x10>)
    1a3c:	4798      	blx	r3
}
    1a3e:	bf00      	nop
    1a40:	bd80      	pop	{r7, pc}
    1a42:	bf00      	nop
    1a44:	000019a5 	.word	0x000019a5

00001a48 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
    1a48:	b580      	push	{r7, lr}
    1a4a:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(5);
    1a4c:	2005      	movs	r0, #5
    1a4e:	4b02      	ldr	r3, [pc, #8]	; (1a58 <PDCA_5_Handler+0x10>)
    1a50:	4798      	blx	r3
}
    1a52:	bf00      	nop
    1a54:	bd80      	pop	{r7, pc}
    1a56:	bf00      	nop
    1a58:	000019a5 	.word	0x000019a5

00001a5c <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(6);
    1a60:	2006      	movs	r0, #6
    1a62:	4b02      	ldr	r3, [pc, #8]	; (1a6c <PDCA_6_Handler+0x10>)
    1a64:	4798      	blx	r3
}
    1a66:	bf00      	nop
    1a68:	bd80      	pop	{r7, pc}
    1a6a:	bf00      	nop
    1a6c:	000019a5 	.word	0x000019a5

00001a70 <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
    1a70:	b580      	push	{r7, lr}
    1a72:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(7);
    1a74:	2007      	movs	r0, #7
    1a76:	4b02      	ldr	r3, [pc, #8]	; (1a80 <PDCA_7_Handler+0x10>)
    1a78:	4798      	blx	r3
}
    1a7a:	bf00      	nop
    1a7c:	bd80      	pop	{r7, pc}
    1a7e:	bf00      	nop
    1a80:	000019a5 	.word	0x000019a5

00001a84 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
    1a84:	b580      	push	{r7, lr}
    1a86:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(8);
    1a88:	2008      	movs	r0, #8
    1a8a:	4b02      	ldr	r3, [pc, #8]	; (1a94 <PDCA_8_Handler+0x10>)
    1a8c:	4798      	blx	r3
}
    1a8e:	bf00      	nop
    1a90:	bd80      	pop	{r7, pc}
    1a92:	bf00      	nop
    1a94:	000019a5 	.word	0x000019a5

00001a98 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
    1a98:	b580      	push	{r7, lr}
    1a9a:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(9);
    1a9c:	2009      	movs	r0, #9
    1a9e:	4b02      	ldr	r3, [pc, #8]	; (1aa8 <PDCA_9_Handler+0x10>)
    1aa0:	4798      	blx	r3
}
    1aa2:	bf00      	nop
    1aa4:	bd80      	pop	{r7, pc}
    1aa6:	bf00      	nop
    1aa8:	000019a5 	.word	0x000019a5

00001aac <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
    1aac:	b580      	push	{r7, lr}
    1aae:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(10);
    1ab0:	200a      	movs	r0, #10
    1ab2:	4b02      	ldr	r3, [pc, #8]	; (1abc <PDCA_10_Handler+0x10>)
    1ab4:	4798      	blx	r3
}
    1ab6:	bf00      	nop
    1ab8:	bd80      	pop	{r7, pc}
    1aba:	bf00      	nop
    1abc:	000019a5 	.word	0x000019a5

00001ac0 <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(11);
    1ac4:	200b      	movs	r0, #11
    1ac6:	4b02      	ldr	r3, [pc, #8]	; (1ad0 <PDCA_11_Handler+0x10>)
    1ac8:	4798      	blx	r3
}
    1aca:	bf00      	nop
    1acc:	bd80      	pop	{r7, pc}
    1ace:	bf00      	nop
    1ad0:	000019a5 	.word	0x000019a5

00001ad4 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
    1ad4:	b580      	push	{r7, lr}
    1ad6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(12);
    1ad8:	200c      	movs	r0, #12
    1ada:	4b02      	ldr	r3, [pc, #8]	; (1ae4 <PDCA_12_Handler+0x10>)
    1adc:	4798      	blx	r3
}
    1ade:	bf00      	nop
    1ae0:	bd80      	pop	{r7, pc}
    1ae2:	bf00      	nop
    1ae4:	000019a5 	.word	0x000019a5

00001ae8 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(13);
    1aec:	200d      	movs	r0, #13
    1aee:	4b02      	ldr	r3, [pc, #8]	; (1af8 <PDCA_13_Handler+0x10>)
    1af0:	4798      	blx	r3
}
    1af2:	bf00      	nop
    1af4:	bd80      	pop	{r7, pc}
    1af6:	bf00      	nop
    1af8:	000019a5 	.word	0x000019a5

00001afc <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(14);
    1b00:	200e      	movs	r0, #14
    1b02:	4b02      	ldr	r3, [pc, #8]	; (1b0c <PDCA_14_Handler+0x10>)
    1b04:	4798      	blx	r3
}
    1b06:	bf00      	nop
    1b08:	bd80      	pop	{r7, pc}
    1b0a:	bf00      	nop
    1b0c:	000019a5 	.word	0x000019a5

00001b10 <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
    1b10:	b580      	push	{r7, lr}
    1b12:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(15);
    1b14:	200f      	movs	r0, #15
    1b16:	4b02      	ldr	r3, [pc, #8]	; (1b20 <PDCA_15_Handler+0x10>)
    1b18:	4798      	blx	r3
}
    1b1a:	bf00      	nop
    1b1c:	bd80      	pop	{r7, pc}
    1b1e:	bf00      	nop
    1b20:	000019a5 	.word	0x000019a5

00001b24 <cpu_irq_save>:
{
    1b24:	b480      	push	{r7}
    1b26:	b083      	sub	sp, #12
    1b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1b2a:	f3ef 8310 	mrs	r3, PRIMASK
    1b2e:	607b      	str	r3, [r7, #4]
  return(result);
    1b30:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1b32:	2b00      	cmp	r3, #0
    1b34:	bf0c      	ite	eq
    1b36:	2301      	moveq	r3, #1
    1b38:	2300      	movne	r3, #0
    1b3a:	b2db      	uxtb	r3, r3
    1b3c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1b3e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1b40:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b44:	4b04      	ldr	r3, [pc, #16]	; (1b58 <cpu_irq_save+0x34>)
    1b46:	2200      	movs	r2, #0
    1b48:	701a      	strb	r2, [r3, #0]
	return flags;
    1b4a:	683b      	ldr	r3, [r7, #0]
}
    1b4c:	4618      	mov	r0, r3
    1b4e:	370c      	adds	r7, #12
    1b50:	46bd      	mov	sp, r7
    1b52:	bc80      	pop	{r7}
    1b54:	4770      	bx	lr
    1b56:	bf00      	nop
    1b58:	20000074 	.word	0x20000074

00001b5c <cpu_irq_is_enabled_flags>:
{
    1b5c:	b480      	push	{r7}
    1b5e:	b083      	sub	sp, #12
    1b60:	af00      	add	r7, sp, #0
    1b62:	6078      	str	r0, [r7, #4]
	return (flags);
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	2b00      	cmp	r3, #0
    1b68:	bf14      	ite	ne
    1b6a:	2301      	movne	r3, #1
    1b6c:	2300      	moveq	r3, #0
    1b6e:	b2db      	uxtb	r3, r3
}
    1b70:	4618      	mov	r0, r3
    1b72:	370c      	adds	r7, #12
    1b74:	46bd      	mov	sp, r7
    1b76:	bc80      	pop	{r7}
    1b78:	4770      	bx	lr
	...

00001b7c <cpu_irq_restore>:
{
    1b7c:	b580      	push	{r7, lr}
    1b7e:	b082      	sub	sp, #8
    1b80:	af00      	add	r7, sp, #0
    1b82:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1b84:	6878      	ldr	r0, [r7, #4]
    1b86:	4b07      	ldr	r3, [pc, #28]	; (1ba4 <cpu_irq_restore+0x28>)
    1b88:	4798      	blx	r3
    1b8a:	4603      	mov	r3, r0
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d005      	beq.n	1b9c <cpu_irq_restore+0x20>
		cpu_irq_enable();
    1b90:	4b05      	ldr	r3, [pc, #20]	; (1ba8 <cpu_irq_restore+0x2c>)
    1b92:	2201      	movs	r2, #1
    1b94:	701a      	strb	r2, [r3, #0]
    1b96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1b9a:	b662      	cpsie	i
}
    1b9c:	bf00      	nop
    1b9e:	3708      	adds	r7, #8
    1ba0:	46bd      	mov	sp, r7
    1ba2:	bd80      	pop	{r7, pc}
    1ba4:	00001b5d 	.word	0x00001b5d
    1ba8:	20000074 	.word	0x20000074

00001bac <osc_enable>:
extern void osc_priv_disable_rcfast(void);
extern void osc_priv_enable_rc1m(void);
extern void osc_priv_disable_rc1m(void);

static inline void osc_enable(uint8_t id)
{
    1bac:	b580      	push	{r7, lr}
    1bae:	b082      	sub	sp, #8
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	4603      	mov	r3, r0
    1bb4:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    1bb6:	79fb      	ldrb	r3, [r7, #7]
    1bb8:	2b06      	cmp	r3, #6
    1bba:	d823      	bhi.n	1c04 <osc_enable+0x58>
    1bbc:	a201      	add	r2, pc, #4	; (adr r2, 1bc4 <osc_enable+0x18>)
    1bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1bc2:	bf00      	nop
    1bc4:	00001be1 	.word	0x00001be1
    1bc8:	00001be7 	.word	0x00001be7
    1bcc:	00001bed 	.word	0x00001bed
    1bd0:	00001bf3 	.word	0x00001bf3
    1bd4:	00001bf9 	.word	0x00001bf9
    1bd8:	00001bff 	.word	0x00001bff
    1bdc:	00001c05 	.word	0x00001c05
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    1be0:	4b0b      	ldr	r3, [pc, #44]	; (1c10 <osc_enable+0x64>)
    1be2:	4798      	blx	r3
		break;
    1be4:	e00f      	b.n	1c06 <osc_enable+0x5a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    1be6:	4b0b      	ldr	r3, [pc, #44]	; (1c14 <osc_enable+0x68>)
    1be8:	4798      	blx	r3
		break;
    1bea:	e00c      	b.n	1c06 <osc_enable+0x5a>
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
    1bec:	4b0a      	ldr	r3, [pc, #40]	; (1c18 <osc_enable+0x6c>)
    1bee:	4798      	blx	r3
		break;
    1bf0:	e009      	b.n	1c06 <osc_enable+0x5a>

	case OSC_ID_RC80M:
		osc_priv_enable_rc80m();
    1bf2:	4b0a      	ldr	r3, [pc, #40]	; (1c1c <osc_enable+0x70>)
    1bf4:	4798      	blx	r3
		break;
    1bf6:	e006      	b.n	1c06 <osc_enable+0x5a>

	case OSC_ID_RCFAST:
		osc_priv_enable_rcfast();
    1bf8:	4b09      	ldr	r3, [pc, #36]	; (1c20 <osc_enable+0x74>)
    1bfa:	4798      	blx	r3
		break;
    1bfc:	e003      	b.n	1c06 <osc_enable+0x5a>

	case OSC_ID_RC1M:
		osc_priv_enable_rc1m();
    1bfe:	4b09      	ldr	r3, [pc, #36]	; (1c24 <osc_enable+0x78>)
    1c00:	4798      	blx	r3
		break;
    1c02:	e000      	b.n	1c06 <osc_enable+0x5a>
		/* RCSYS is always running */
		break;

	default:
		/* unhandled_case(id); */
		break;
    1c04:	bf00      	nop
	}
}
    1c06:	bf00      	nop
    1c08:	3708      	adds	r7, #8
    1c0a:	46bd      	mov	sp, r7
    1c0c:	bd80      	pop	{r7, pc}
    1c0e:	bf00      	nop
    1c10:	000023c1 	.word	0x000023c1
    1c14:	000023fd 	.word	0x000023fd
    1c18:	00002439 	.word	0x00002439
    1c1c:	000024b9 	.word	0x000024b9
    1c20:	000024f9 	.word	0x000024f9
    1c24:	00002479 	.word	0x00002479

00001c28 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
    1c28:	b480      	push	{r7}
    1c2a:	b083      	sub	sp, #12
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	4603      	mov	r3, r0
    1c30:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    1c32:	79fb      	ldrb	r3, [r7, #7]
    1c34:	2b06      	cmp	r3, #6
    1c36:	d84f      	bhi.n	1cd8 <osc_is_ready+0xb0>
    1c38:	a201      	add	r2, pc, #4	; (adr r2, 1c40 <osc_is_ready+0x18>)
    1c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1c3e:	bf00      	nop
    1c40:	00001c5d 	.word	0x00001c5d
    1c44:	00001c71 	.word	0x00001c71
    1c48:	00001c85 	.word	0x00001c85
    1c4c:	00001c99 	.word	0x00001c99
    1c50:	00001cad 	.word	0x00001cad
    1c54:	00001cc1 	.word	0x00001cc1
    1c58:	00001cd5 	.word	0x00001cd5
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    1c5c:	4b21      	ldr	r3, [pc, #132]	; (1ce4 <osc_is_ready+0xbc>)
    1c5e:	695b      	ldr	r3, [r3, #20]
    1c60:	f003 0301 	and.w	r3, r3, #1
    1c64:	2b00      	cmp	r3, #0
    1c66:	bf14      	ite	ne
    1c68:	2301      	movne	r3, #1
    1c6a:	2300      	moveq	r3, #0
    1c6c:	b2db      	uxtb	r3, r3
    1c6e:	e034      	b.n	1cda <osc_is_ready+0xb2>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    1c70:	4b1d      	ldr	r3, [pc, #116]	; (1ce8 <osc_is_ready+0xc0>)
    1c72:	695b      	ldr	r3, [r3, #20]
    1c74:	f003 0301 	and.w	r3, r3, #1
    1c78:	2b00      	cmp	r3, #0
    1c7a:	bf14      	ite	ne
    1c7c:	2301      	movne	r3, #1
    1c7e:	2300      	moveq	r3, #0
    1c80:	b2db      	uxtb	r3, r3
    1c82:	e02a      	b.n	1cda <osc_is_ready+0xb2>
#endif

	case OSC_ID_RC32K:
		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
    1c84:	4b18      	ldr	r3, [pc, #96]	; (1ce8 <osc_is_ready+0xc0>)
    1c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c88:	f003 0301 	and.w	r3, r3, #1
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	bf14      	ite	ne
    1c90:	2301      	movne	r3, #1
    1c92:	2300      	moveq	r3, #0
    1c94:	b2db      	uxtb	r3, r3
    1c96:	e020      	b.n	1cda <osc_is_ready+0xb2>

	case OSC_ID_RC80M:
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
    1c98:	4b12      	ldr	r3, [pc, #72]	; (1ce4 <osc_is_ready+0xbc>)
    1c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1c9c:	f003 0301 	and.w	r3, r3, #1
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	bf14      	ite	ne
    1ca4:	2301      	movne	r3, #1
    1ca6:	2300      	moveq	r3, #0
    1ca8:	b2db      	uxtb	r3, r3
    1caa:	e016      	b.n	1cda <osc_is_ready+0xb2>

	case OSC_ID_RCFAST:
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    1cac:	4b0d      	ldr	r3, [pc, #52]	; (1ce4 <osc_is_ready+0xbc>)
    1cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1cb0:	f003 0301 	and.w	r3, r3, #1
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	bf14      	ite	ne
    1cb8:	2301      	movne	r3, #1
    1cba:	2300      	moveq	r3, #0
    1cbc:	b2db      	uxtb	r3, r3
    1cbe:	e00c      	b.n	1cda <osc_is_ready+0xb2>

	case OSC_ID_RC1M:
		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
    1cc0:	4b09      	ldr	r3, [pc, #36]	; (1ce8 <osc_is_ready+0xc0>)
    1cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1cc4:	f003 0301 	and.w	r3, r3, #1
    1cc8:	2b00      	cmp	r3, #0
    1cca:	bf14      	ite	ne
    1ccc:	2301      	movne	r3, #1
    1cce:	2300      	moveq	r3, #0
    1cd0:	b2db      	uxtb	r3, r3
    1cd2:	e002      	b.n	1cda <osc_is_ready+0xb2>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
    1cd4:	2301      	movs	r3, #1
    1cd6:	e000      	b.n	1cda <osc_is_ready+0xb2>

	default:
		/* unhandled_case(id); */
		return false;
    1cd8:	2300      	movs	r3, #0
	}
}
    1cda:	4618      	mov	r0, r3
    1cdc:	370c      	adds	r7, #12
    1cde:	46bd      	mov	sp, r7
    1ce0:	bc80      	pop	{r7}
    1ce2:	4770      	bx	lr
    1ce4:	400e0800 	.word	0x400e0800
    1ce8:	400f0400 	.word	0x400f0400

00001cec <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    1cec:	b580      	push	{r7, lr}
    1cee:	b082      	sub	sp, #8
    1cf0:	af00      	add	r7, sp, #0
    1cf2:	4603      	mov	r3, r0
    1cf4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
    1cf6:	bf00      	nop
    1cf8:	79fb      	ldrb	r3, [r7, #7]
    1cfa:	4618      	mov	r0, r3
    1cfc:	4b05      	ldr	r3, [pc, #20]	; (1d14 <osc_wait_ready+0x28>)
    1cfe:	4798      	blx	r3
    1d00:	4603      	mov	r3, r0
    1d02:	f083 0301 	eor.w	r3, r3, #1
    1d06:	b2db      	uxtb	r3, r3
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d1f5      	bne.n	1cf8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
    1d0c:	bf00      	nop
    1d0e:	3708      	adds	r7, #8
    1d10:	46bd      	mov	sp, r7
    1d12:	bd80      	pop	{r7, pc}
    1d14:	00001c29 	.word	0x00001c29

00001d18 <lcdca_clear_status>:

/**
 * \brief Clear the LCDCA beginning of frame interrupt status.
 */
static inline void lcdca_clear_status(void)
{
    1d18:	b480      	push	{r7}
    1d1a:	af00      	add	r7, sp, #0
	LCDCA->LCDCA_SCR = LCDCA_SCR_FC0R;
    1d1c:	4b03      	ldr	r3, [pc, #12]	; (1d2c <lcdca_clear_status+0x14>)
    1d1e:	2201      	movs	r2, #1
    1d20:	611a      	str	r2, [r3, #16]
}
    1d22:	bf00      	nop
    1d24:	46bd      	mov	sp, r7
    1d26:	bc80      	pop	{r7}
    1d28:	4770      	bx	lr
    1d2a:	bf00      	nop
    1d2c:	40080000 	.word	0x40080000

00001d30 <sleepmgr_lock_mode>:
{
    1d30:	b580      	push	{r7, lr}
    1d32:	b084      	sub	sp, #16
    1d34:	af00      	add	r7, sp, #0
    1d36:	4603      	mov	r3, r0
    1d38:	71fb      	strb	r3, [r7, #7]
	if(sleepmgr_locks[mode] >= 0xff) {
    1d3a:	79fb      	ldrb	r3, [r7, #7]
    1d3c:	4a0a      	ldr	r2, [pc, #40]	; (1d68 <sleepmgr_lock_mode+0x38>)
    1d3e:	5cd3      	ldrb	r3, [r2, r3]
    1d40:	2bff      	cmp	r3, #255	; 0xff
    1d42:	d100      	bne.n	1d46 <sleepmgr_lock_mode+0x16>
		while (true) {
    1d44:	e7fe      	b.n	1d44 <sleepmgr_lock_mode+0x14>
	flags = cpu_irq_save();
    1d46:	4b09      	ldr	r3, [pc, #36]	; (1d6c <sleepmgr_lock_mode+0x3c>)
    1d48:	4798      	blx	r3
    1d4a:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
    1d4c:	79fb      	ldrb	r3, [r7, #7]
    1d4e:	4a06      	ldr	r2, [pc, #24]	; (1d68 <sleepmgr_lock_mode+0x38>)
    1d50:	5cd2      	ldrb	r2, [r2, r3]
    1d52:	3201      	adds	r2, #1
    1d54:	b2d1      	uxtb	r1, r2
    1d56:	4a04      	ldr	r2, [pc, #16]	; (1d68 <sleepmgr_lock_mode+0x38>)
    1d58:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    1d5a:	68f8      	ldr	r0, [r7, #12]
    1d5c:	4b04      	ldr	r3, [pc, #16]	; (1d70 <sleepmgr_lock_mode+0x40>)
    1d5e:	4798      	blx	r3
}
    1d60:	bf00      	nop
    1d62:	3710      	adds	r7, #16
    1d64:	46bd      	mov	sp, r7
    1d66:	bd80      	pop	{r7, pc}
    1d68:	20000474 	.word	0x20000474
    1d6c:	00001b25 	.word	0x00001b25
    1d70:	00001b7d 	.word	0x00001b7d

00001d74 <lcdca_clk_init>:

/**
 * \brief LCDCA clock initialization.
 */
void lcdca_clk_init(void)
{
    1d74:	b580      	push	{r7, lr}
    1d76:	af00      	add	r7, sp, #0
	/* Enable APB clock for LCDCA */
	sysclk_enable_peripheral_clock(LCDCA);
    1d78:	480b      	ldr	r0, [pc, #44]	; (1da8 <lcdca_clk_init+0x34>)
    1d7a:	4b0c      	ldr	r3, [pc, #48]	; (1dac <lcdca_clk_init+0x38>)
    1d7c:	4798      	blx	r3

	/* Switch LCD input to selected source clock */
#if (CONF_LCDCA_SOURCE_CLK == OSC_ID_OSC32)
	if (!osc_is_ready(OSC_ID_OSC32)) {
    1d7e:	2001      	movs	r0, #1
    1d80:	4b0b      	ldr	r3, [pc, #44]	; (1db0 <lcdca_clk_init+0x3c>)
    1d82:	4798      	blx	r3
    1d84:	4603      	mov	r3, r0
    1d86:	f083 0301 	eor.w	r3, r3, #1
    1d8a:	b2db      	uxtb	r3, r3
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d005      	beq.n	1d9c <lcdca_clk_init+0x28>
		osc_enable(OSC_ID_OSC32);
    1d90:	2001      	movs	r0, #1
    1d92:	4b08      	ldr	r3, [pc, #32]	; (1db4 <lcdca_clk_init+0x40>)
    1d94:	4798      	blx	r3
		osc_wait_ready(OSC_ID_OSC32);
    1d96:	2001      	movs	r0, #1
    1d98:	4b07      	ldr	r3, [pc, #28]	; (1db8 <lcdca_clk_init+0x44>)
    1d9a:	4798      	blx	r3
	}
	bpm_set_clk32_source(BPM, BPM_CLK32_SOURCE_OSC32K);
    1d9c:	2100      	movs	r1, #0
    1d9e:	4807      	ldr	r0, [pc, #28]	; (1dbc <lcdca_clk_init+0x48>)
    1da0:	4b07      	ldr	r3, [pc, #28]	; (1dc0 <lcdca_clk_init+0x4c>)
    1da2:	4798      	blx	r3
		osc_enable(OSC_ID_RC32K);
		osc_wait_ready(OSC_ID_RC32K);
	}
	bpm_set_clk32_source(BPM, BPM_CLK32_SOURCE_RC32K);
#endif
}
    1da4:	bf00      	nop
    1da6:	bd80      	pop	{r7, pc}
    1da8:	40080000 	.word	0x40080000
    1dac:	000028cd 	.word	0x000028cd
    1db0:	00001c29 	.word	0x00001c29
    1db4:	00001bad 	.word	0x00001bad
    1db8:	00001ced 	.word	0x00001ced
    1dbc:	400f0000 	.word	0x400f0000
    1dc0:	000036a9 	.word	0x000036a9

00001dc4 <lcdca_set_config>:
 *
 * \param[in] lcdca_cfg Pointer to an LCDCA configuration structure
 */
void lcdca_set_config(
		struct lcdca_config *lcdca_cfg)
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b082      	sub	sp, #8
    1dc8:	af00      	add	r7, sp, #0
    1dca:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(lcdca_cfg);
	
	/* Disable LCD controller and frame counter timer */
	LCDCA->LCDCA_CR = LCDCA_CR_DIS | LCDCA_CR_FC0DIS | LCDCA_CR_FC1DIS |
    1dcc:	4b22      	ldr	r3, [pc, #136]	; (1e58 <lcdca_set_config+0x94>)
    1dce:	2255      	movs	r2, #85	; 0x55
    1dd0:	601a      	str	r2, [r3, #0]
		LCDCA_CR_FC2DIS;
	/* Set new timer */
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    1dd2:	4921      	ldr	r1, [pc, #132]	; (1e58 <lcdca_set_config+0x94>)
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	7a1b      	ldrb	r3, [r3, #8]
    1dd8:	061b      	lsls	r3, r3, #24
    1dda:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	79db      	ldrb	r3, [r3, #7]
    1de2:	041b      	lsls	r3, r3, #16
    1de4:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    1de8:	431a      	orrs	r2, r3
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
    1dea:	687b      	ldr	r3, [r7, #4]
    1dec:	799b      	ldrb	r3, [r3, #6]
    1dee:	021b      	lsls	r3, r3, #8
    1df0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
    1df4:	431a      	orrs	r2, r3
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	795b      	ldrb	r3, [r3, #5]
    1dfa:	005b      	lsls	r3, r3, #1
    1dfc:	f003 030e 	and.w	r3, r3, #14
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
    1e00:	4313      	orrs	r3, r2
			(uint32_t)lcdca_cfg->lcd_pres;
    1e02:	687a      	ldr	r2, [r7, #4]
    1e04:	7912      	ldrb	r2, [r2, #4]
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
    1e06:	4313      	orrs	r3, r2
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    1e08:	608b      	str	r3, [r1, #8]

	/* Set basic configuration */
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    1e0a:	4913      	ldr	r1, [pc, #76]	; (1e58 <lcdca_set_config+0x94>)
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	781b      	ldrb	r3, [r3, #0]
    1e10:	061b      	lsls	r3, r3, #24
    1e12:	f003 527c 	and.w	r2, r3, #1056964608	; 0x3f000000
			(lcdca_cfg->x_bias ? LCDCA_CFG_XBIAS : 0) |
    1e16:	687b      	ldr	r3, [r7, #4]
    1e18:	785b      	ldrb	r3, [r3, #1]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d001      	beq.n	1e22 <lcdca_set_config+0x5e>
    1e1e:	2301      	movs	r3, #1
    1e20:	e000      	b.n	1e24 <lcdca_set_config+0x60>
    1e22:	2300      	movs	r3, #0
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    1e24:	431a      	orrs	r2, r3
			(lcdca_cfg->lp_wave ? 0 : LCDCA_CFG_WMOD) |
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	789b      	ldrb	r3, [r3, #2]
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d001      	beq.n	1e32 <lcdca_set_config+0x6e>
    1e2e:	2300      	movs	r3, #0
    1e30:	e000      	b.n	1e34 <lcdca_set_config+0x70>
    1e32:	2302      	movs	r3, #2
			(lcdca_cfg->x_bias ? LCDCA_CFG_XBIAS : 0) |
    1e34:	431a      	orrs	r2, r3
			LCDCA_CFG_DUTY(lcdca_cfg->duty_type);
    1e36:	687b      	ldr	r3, [r7, #4]
    1e38:	78db      	ldrb	r3, [r3, #3]
    1e3a:	021b      	lsls	r3, r3, #8
    1e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
			(lcdca_cfg->lp_wave ? 0 : LCDCA_CFG_WMOD) |
    1e40:	4313      	orrs	r3, r2
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    1e42:	604b      	str	r3, [r1, #4]

	/* Set contrast */
	lcdca_set_contrast(lcdca_cfg->contrast);
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	f993 3009 	ldrsb.w	r3, [r3, #9]
    1e4a:	4618      	mov	r0, r3
    1e4c:	4b03      	ldr	r3, [pc, #12]	; (1e5c <lcdca_set_config+0x98>)
    1e4e:	4798      	blx	r3
}
    1e50:	bf00      	nop
    1e52:	3708      	adds	r7, #8
    1e54:	46bd      	mov	sp, r7
    1e56:	bd80      	pop	{r7, pc}
    1e58:	40080000 	.word	0x40080000
    1e5c:	00001ea1 	.word	0x00001ea1

00001e60 <lcdca_enable>:

/**
 * \brief Enable the LCDCA module.
 */
void lcdca_enable(void)
{
    1e60:	b580      	push	{r7, lr}
    1e62:	af00      	add	r7, sp, #0
	sleepmgr_lock_mode(SLEEPMGR_RET);
    1e64:	2006      	movs	r0, #6
    1e66:	4b0c      	ldr	r3, [pc, #48]	; (1e98 <lcdca_enable+0x38>)
    1e68:	4798      	blx	r3
	/* Enable all display memory */
	LCDCA->LCDCA_CFG &= ~LCDCA_CFG_BLANK;
    1e6a:	4a0c      	ldr	r2, [pc, #48]	; (1e9c <lcdca_enable+0x3c>)
    1e6c:	4b0b      	ldr	r3, [pc, #44]	; (1e9c <lcdca_enable+0x3c>)
    1e6e:	685b      	ldr	r3, [r3, #4]
    1e70:	f023 0304 	bic.w	r3, r3, #4
    1e74:	6053      	str	r3, [r2, #4]
	LCDCA->LCDCA_CR = LCDCA_CR_EN;
    1e76:	4b09      	ldr	r3, [pc, #36]	; (1e9c <lcdca_enable+0x3c>)
    1e78:	2202      	movs	r2, #2
    1e7a:	601a      	str	r2, [r3, #0]
	/* Clear all display memory */
	LCDCA->LCDCA_CR = LCDCA_CR_CDM;
    1e7c:	4b07      	ldr	r3, [pc, #28]	; (1e9c <lcdca_enable+0x3c>)
    1e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1e82:	601a      	str	r2, [r3, #0]
	/* Wait enable signal */
	while (!(LCDCA->LCDCA_SR & LCDCA_SR_EN)) {
    1e84:	bf00      	nop
    1e86:	4b05      	ldr	r3, [pc, #20]	; (1e9c <lcdca_enable+0x3c>)
    1e88:	68db      	ldr	r3, [r3, #12]
    1e8a:	f003 0310 	and.w	r3, r3, #16
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d0f9      	beq.n	1e86 <lcdca_enable+0x26>
	}
}
    1e92:	bf00      	nop
    1e94:	bd80      	pop	{r7, pc}
    1e96:	bf00      	nop
    1e98:	00001d31 	.word	0x00001d31
    1e9c:	40080000 	.word	0x40080000

00001ea0 <lcdca_set_contrast>:
 *
 * \param[in] contrast Contrast value (range -32 to 31 inclusive)
 */
void lcdca_set_contrast(
		int8_t contrast)
{
    1ea0:	b480      	push	{r7}
    1ea2:	b087      	sub	sp, #28
    1ea4:	af00      	add	r7, sp, #0
    1ea6:	4603      	mov	r3, r0
    1ea8:	71fb      	strb	r3, [r7, #7]
	uint32_t cfg = LCDCA->LCDCA_CFG;
    1eaa:	4b13      	ldr	r3, [pc, #76]	; (1ef8 <lcdca_set_contrast+0x58>)
    1eac:	685b      	ldr	r3, [r3, #4]
    1eae:	613b      	str	r3, [r7, #16]
	uint32_t fcst_filed;
	int8_t fcst_val_msk = (LCDCA_CFG_FCST_Msk >> (LCDCA_CFG_FCST_Pos + 1));
    1eb0:	231f      	movs	r3, #31
    1eb2:	73fb      	strb	r3, [r7, #15]
	int8_t fcst_sign_msk = ((LCDCA_CFG_FCST_Msk >> LCDCA_CFG_FCST_Pos) + 1) >> 1;
    1eb4:	2320      	movs	r3, #32
    1eb6:	73bb      	strb	r3, [r7, #14]

	/* Clear previous contrast value */
	cfg &= ~LCDCA_CFG_FCST_Msk;
    1eb8:	693b      	ldr	r3, [r7, #16]
    1eba:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    1ebe:	613b      	str	r3, [r7, #16]
	/*
	 * Convert contrast value to the value in FCST field:
	 * FCST is a signed number (two's complement).
	 */
	fcst_filed = (contrast & fcst_val_msk);
    1ec0:	79fa      	ldrb	r2, [r7, #7]
    1ec2:	7bfb      	ldrb	r3, [r7, #15]
    1ec4:	4013      	ands	r3, r2
    1ec6:	b25b      	sxtb	r3, r3
    1ec8:	617b      	str	r3, [r7, #20]
	if (contrast < 0) {
    1eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	da04      	bge.n	1edc <lcdca_set_contrast+0x3c>
		fcst_filed |= fcst_sign_msk;
    1ed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
    1ed6:	697a      	ldr	r2, [r7, #20]
    1ed8:	4313      	orrs	r3, r2
    1eda:	617b      	str	r3, [r7, #20]
	}
	/* Write new value */
	LCDCA->LCDCA_CFG = cfg | LCDCA_CFG_FCST(fcst_filed);
    1edc:	4906      	ldr	r1, [pc, #24]	; (1ef8 <lcdca_set_contrast+0x58>)
    1ede:	697b      	ldr	r3, [r7, #20]
    1ee0:	041b      	lsls	r3, r3, #16
    1ee2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
    1ee6:	693b      	ldr	r3, [r7, #16]
    1ee8:	4313      	orrs	r3, r2
    1eea:	604b      	str	r3, [r1, #4]
}
    1eec:	bf00      	nop
    1eee:	371c      	adds	r7, #28
    1ef0:	46bd      	mov	sp, r7
    1ef2:	bc80      	pop	{r7}
    1ef4:	4770      	bx	lr
    1ef6:	bf00      	nop
    1ef8:	40080000 	.word	0x40080000

00001efc <lcdca_enable_timer>:
 *
 * \param[in] lcd_timer Timer number to be enabled
 */
void lcdca_enable_timer(
		uint8_t lcd_timer)
{
    1efc:	b480      	push	{r7}
    1efe:	b083      	sub	sp, #12
    1f00:	af00      	add	r7, sp, #0
    1f02:	4603      	mov	r3, r0
    1f04:	71fb      	strb	r3, [r7, #7]
	if (lcd_timer == LCDCA_TIMER_FC0) {
    1f06:	79fb      	ldrb	r3, [r7, #7]
    1f08:	2b00      	cmp	r3, #0
    1f0a:	d10a      	bne.n	1f22 <lcdca_enable_timer+0x26>
		LCDCA->LCDCA_CR = LCDCA_CR_FC0EN;
    1f0c:	4b15      	ldr	r3, [pc, #84]	; (1f64 <lcdca_enable_timer+0x68>)
    1f0e:	2208      	movs	r2, #8
    1f10:	601a      	str	r2, [r3, #0]
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC0S)) {
    1f12:	bf00      	nop
    1f14:	4b13      	ldr	r3, [pc, #76]	; (1f64 <lcdca_enable_timer+0x68>)
    1f16:	68db      	ldr	r3, [r3, #12]
    1f18:	f003 0302 	and.w	r3, r3, #2
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d0f9      	beq.n	1f14 <lcdca_enable_timer+0x18>
	} else if (lcd_timer == LCDCA_TIMER_FC2) {
		LCDCA->LCDCA_CR = LCDCA_CR_FC2EN;
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC2S)) {
		}
	}
}
    1f20:	e01a      	b.n	1f58 <lcdca_enable_timer+0x5c>
	} else if (lcd_timer == LCDCA_TIMER_FC1) {
    1f22:	79fb      	ldrb	r3, [r7, #7]
    1f24:	2b01      	cmp	r3, #1
    1f26:	d10a      	bne.n	1f3e <lcdca_enable_timer+0x42>
		LCDCA->LCDCA_CR = LCDCA_CR_FC1EN;
    1f28:	4b0e      	ldr	r3, [pc, #56]	; (1f64 <lcdca_enable_timer+0x68>)
    1f2a:	2220      	movs	r2, #32
    1f2c:	601a      	str	r2, [r3, #0]
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC1S)) {
    1f2e:	bf00      	nop
    1f30:	4b0c      	ldr	r3, [pc, #48]	; (1f64 <lcdca_enable_timer+0x68>)
    1f32:	68db      	ldr	r3, [r3, #12]
    1f34:	f003 0304 	and.w	r3, r3, #4
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d0f9      	beq.n	1f30 <lcdca_enable_timer+0x34>
}
    1f3c:	e00c      	b.n	1f58 <lcdca_enable_timer+0x5c>
	} else if (lcd_timer == LCDCA_TIMER_FC2) {
    1f3e:	79fb      	ldrb	r3, [r7, #7]
    1f40:	2b02      	cmp	r3, #2
    1f42:	d109      	bne.n	1f58 <lcdca_enable_timer+0x5c>
		LCDCA->LCDCA_CR = LCDCA_CR_FC2EN;
    1f44:	4b07      	ldr	r3, [pc, #28]	; (1f64 <lcdca_enable_timer+0x68>)
    1f46:	2280      	movs	r2, #128	; 0x80
    1f48:	601a      	str	r2, [r3, #0]
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC2S)) {
    1f4a:	bf00      	nop
    1f4c:	4b05      	ldr	r3, [pc, #20]	; (1f64 <lcdca_enable_timer+0x68>)
    1f4e:	68db      	ldr	r3, [r3, #12]
    1f50:	f003 0308 	and.w	r3, r3, #8
    1f54:	2b00      	cmp	r3, #0
    1f56:	d0f9      	beq.n	1f4c <lcdca_enable_timer+0x50>
}
    1f58:	bf00      	nop
    1f5a:	370c      	adds	r7, #12
    1f5c:	46bd      	mov	sp, r7
    1f5e:	bc80      	pop	{r7}
    1f60:	4770      	bx	lr
    1f62:	bf00      	nop
    1f64:	40080000 	.word	0x40080000

00001f68 <lcdca_clear_blink_pixel>:
 * \param[in] pix_seg Pixel/segment SEGy coordinate (range 0 to 1 inclusive)
 */
void lcdca_clear_blink_pixel(
		uint8_t pix_com,
		uint8_t pix_seg)
{
    1f68:	b480      	push	{r7}
    1f6a:	b083      	sub	sp, #12
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	4603      	mov	r3, r0
    1f70:	460a      	mov	r2, r1
    1f72:	71fb      	strb	r3, [r7, #7]
    1f74:	4613      	mov	r3, r2
    1f76:	71bb      	strb	r3, [r7, #6]
	/* Validate parameters. */
	Assert(pix_seg<=1);
	
	if (pix_seg == 0) {
    1f78:	79bb      	ldrb	r3, [r7, #6]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d10c      	bne.n	1f98 <lcdca_clear_blink_pixel+0x30>
		LCDCA->LCDCA_BCFG &= ~LCDCA_BCFG_BSS0(1 << pix_com);
    1f7e:	4910      	ldr	r1, [pc, #64]	; (1fc0 <lcdca_clear_blink_pixel+0x58>)
    1f80:	4b0f      	ldr	r3, [pc, #60]	; (1fc0 <lcdca_clear_blink_pixel+0x58>)
    1f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1f84:	79fb      	ldrb	r3, [r7, #7]
    1f86:	2001      	movs	r0, #1
    1f88:	fa00 f303 	lsl.w	r3, r0, r3
    1f8c:	021b      	lsls	r3, r3, #8
    1f8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1f92:	43db      	mvns	r3, r3
    1f94:	4013      	ands	r3, r2
    1f96:	638b      	str	r3, [r1, #56]	; 0x38
	}

	if (pix_seg == 1) {
    1f98:	79bb      	ldrb	r3, [r7, #6]
    1f9a:	2b01      	cmp	r3, #1
    1f9c:	d10b      	bne.n	1fb6 <lcdca_clear_blink_pixel+0x4e>
		LCDCA->LCDCA_BCFG &= ~LCDCA_BCFG_BSS1(1 << pix_com);
    1f9e:	4908      	ldr	r1, [pc, #32]	; (1fc0 <lcdca_clear_blink_pixel+0x58>)
    1fa0:	4b07      	ldr	r3, [pc, #28]	; (1fc0 <lcdca_clear_blink_pixel+0x58>)
    1fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1fa4:	79fb      	ldrb	r3, [r7, #7]
    1fa6:	2001      	movs	r0, #1
    1fa8:	fa00 f303 	lsl.w	r3, r0, r3
    1fac:	031b      	lsls	r3, r3, #12
    1fae:	b29b      	uxth	r3, r3
    1fb0:	43db      	mvns	r3, r3
    1fb2:	4013      	ands	r3, r2
    1fb4:	638b      	str	r3, [r1, #56]	; 0x38
	}
}
    1fb6:	bf00      	nop
    1fb8:	370c      	adds	r7, #12
    1fba:	46bd      	mov	sp, r7
    1fbc:	bc80      	pop	{r7}
    1fbe:	4770      	bx	lr
    1fc0:	40080000 	.word	0x40080000

00001fc4 <lcdca_write_packet>:
 void lcdca_write_packet(
		uint8_t lcd_tdg, uint8_t first_seg,
		const uint8_t *data,
		size_t width,
		uint8_t dir)
{
    1fc4:	b480      	push	{r7}
    1fc6:	b085      	sub	sp, #20
    1fc8:	af00      	add	r7, sp, #0
    1fca:	60ba      	str	r2, [r7, #8]
    1fcc:	607b      	str	r3, [r7, #4]
    1fce:	4603      	mov	r3, r0
    1fd0:	73fb      	strb	r3, [r7, #15]
    1fd2:	460b      	mov	r3, r1
    1fd4:	73bb      	strb	r3, [r7, #14]
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
    1fd6:	4914      	ldr	r1, [pc, #80]	; (2028 <lcdca_write_packet+0x64>)
    1fd8:	7bfb      	ldrb	r3, [r7, #15]
    1fda:	005b      	lsls	r3, r3, #1
    1fdc:	f003 0206 	and.w	r2, r3, #6
			| LCDCA_CMCFG_STSEG(first_seg)
    1fe0:	7bbb      	ldrb	r3, [r7, #14]
    1fe2:	021b      	lsls	r3, r3, #8
    1fe4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    1fe8:	431a      	orrs	r2, r3
			| (dir ? LCDCA_CMCFG_DREV_LEFT : LCDCA_CMCFG_DREV_RIGHT);
    1fea:	7e3b      	ldrb	r3, [r7, #24]
    1fec:	2b00      	cmp	r3, #0
    1fee:	d001      	beq.n	1ff4 <lcdca_write_packet+0x30>
    1ff0:	2301      	movs	r3, #1
    1ff2:	e000      	b.n	1ff6 <lcdca_write_packet+0x32>
    1ff4:	2300      	movs	r3, #0
    1ff6:	4313      	orrs	r3, r2
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
    1ff8:	640b      	str	r3, [r1, #64]	; 0x40

	while (width--) {
    1ffa:	e009      	b.n	2010 <lcdca_write_packet+0x4c>
		if (*data == '\0') {
    1ffc:	68bb      	ldr	r3, [r7, #8]
    1ffe:	781b      	ldrb	r3, [r3, #0]
    2000:	2b00      	cmp	r3, #0
    2002:	d00b      	beq.n	201c <lcdca_write_packet+0x58>
			break; /* Stop on NULL char */
		}

		LCDCA->LCDCA_CMDR = (*data++);
    2004:	4908      	ldr	r1, [pc, #32]	; (2028 <lcdca_write_packet+0x64>)
    2006:	68bb      	ldr	r3, [r7, #8]
    2008:	1c5a      	adds	r2, r3, #1
    200a:	60ba      	str	r2, [r7, #8]
    200c:	781b      	ldrb	r3, [r3, #0]
    200e:	644b      	str	r3, [r1, #68]	; 0x44
	while (width--) {
    2010:	687b      	ldr	r3, [r7, #4]
    2012:	1e5a      	subs	r2, r3, #1
    2014:	607a      	str	r2, [r7, #4]
    2016:	2b00      	cmp	r3, #0
    2018:	d1f0      	bne.n	1ffc <lcdca_write_packet+0x38>
	}
}
    201a:	e000      	b.n	201e <lcdca_write_packet+0x5a>
			break; /* Stop on NULL char */
    201c:	bf00      	nop
}
    201e:	bf00      	nop
    2020:	3714      	adds	r7, #20
    2022:	46bd      	mov	sp, r7
    2024:	bc80      	pop	{r7}
    2026:	4770      	bx	lr
    2028:	40080000 	.word	0x40080000

0000202c <lcdca_get_pixel_register>:
 *
 * \return The address of register controlling specified pixel.
 */
static uint64_t lcdca_get_pixel_register(
		uint8_t pix_com)
{
    202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2030:	b085      	sub	sp, #20
    2032:	af00      	add	r7, sp, #0
    2034:	71f8      	strb	r0, [r7, #7]
	uint64_t register_value = 0;
    2036:	f04f 0a00 	mov.w	sl, #0
    203a:	f04f 0b00 	mov.w	fp, #0
    203e:	e9c7 ab02 	strd	sl, fp, [r7, #8]

	switch (pix_com) {
    2042:	79f8      	ldrb	r0, [r7, #7]
    2044:	2803      	cmp	r0, #3
    2046:	d862      	bhi.n	210e <lcdca_get_pixel_register+0xe2>
    2048:	f20f 0e04 	addw	lr, pc, #4
    204c:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
    2050:	00002061 	.word	0x00002061
    2054:	0000208d 	.word	0x0000208d
    2058:	000020b7 	.word	0x000020b7
    205c:	000020e1 	.word	0x000020e1
	case 0:
		register_value = (uint64_t)LCDCA->LCDCA_DRL0;
    2060:	4b2f      	ldr	r3, [pc, #188]	; (2120 <lcdca_get_pixel_register+0xf4>)
    2062:	695b      	ldr	r3, [r3, #20]
    2064:	f04f 0400 	mov.w	r4, #0
    2068:	e9c7 3402 	strd	r3, r4, [r7, #8]
		register_value |= ((uint64_t)LCDCA->LCDCA_DRH0 << 32);
    206c:	4b2c      	ldr	r3, [pc, #176]	; (2120 <lcdca_get_pixel_register+0xf4>)
    206e:	699b      	ldr	r3, [r3, #24]
    2070:	f04f 0400 	mov.w	r4, #0
    2074:	4699      	mov	r9, r3
    2076:	f04f 0800 	mov.w	r8, #0
    207a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    207e:	ea43 0308 	orr.w	r3, r3, r8
    2082:	ea44 0409 	orr.w	r4, r4, r9
    2086:	e9c7 3402 	strd	r3, r4, [r7, #8]
		break;
    208a:	e040      	b.n	210e <lcdca_get_pixel_register+0xe2>

	case 1:
		register_value = (uint64_t)LCDCA->LCDCA_DRL1;
    208c:	4b24      	ldr	r3, [pc, #144]	; (2120 <lcdca_get_pixel_register+0xf4>)
    208e:	69db      	ldr	r3, [r3, #28]
    2090:	f04f 0400 	mov.w	r4, #0
    2094:	e9c7 3402 	strd	r3, r4, [r7, #8]
		register_value |= ((uint64_t)LCDCA->LCDCA_DRH1 << 32);
    2098:	4b21      	ldr	r3, [pc, #132]	; (2120 <lcdca_get_pixel_register+0xf4>)
    209a:	6a1b      	ldr	r3, [r3, #32]
    209c:	f04f 0400 	mov.w	r4, #0
    20a0:	001e      	movs	r6, r3
    20a2:	2500      	movs	r5, #0
    20a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    20a8:	ea43 0305 	orr.w	r3, r3, r5
    20ac:	ea44 0406 	orr.w	r4, r4, r6
    20b0:	e9c7 3402 	strd	r3, r4, [r7, #8]
		break;
    20b4:	e02b      	b.n	210e <lcdca_get_pixel_register+0xe2>

	case 2:
		register_value = (uint64_t)LCDCA->LCDCA_DRL2;
    20b6:	4b1a      	ldr	r3, [pc, #104]	; (2120 <lcdca_get_pixel_register+0xf4>)
    20b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    20ba:	f04f 0400 	mov.w	r4, #0
    20be:	e9c7 3402 	strd	r3, r4, [r7, #8]
		register_value |= ((uint64_t)LCDCA->LCDCA_DRH2 << 32);
    20c2:	4b17      	ldr	r3, [pc, #92]	; (2120 <lcdca_get_pixel_register+0xf4>)
    20c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    20c6:	f04f 0400 	mov.w	r4, #0
    20ca:	001a      	movs	r2, r3
    20cc:	2100      	movs	r1, #0
    20ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    20d2:	ea43 0301 	orr.w	r3, r3, r1
    20d6:	ea44 0402 	orr.w	r4, r4, r2
    20da:	e9c7 3402 	strd	r3, r4, [r7, #8]
		break;
    20de:	e016      	b.n	210e <lcdca_get_pixel_register+0xe2>

	case 3:
		register_value = (uint64_t)LCDCA->LCDCA_DRL3;
    20e0:	4a0f      	ldr	r2, [pc, #60]	; (2120 <lcdca_get_pixel_register+0xf4>)
    20e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    20e4:	4611      	mov	r1, r2
    20e6:	f04f 0200 	mov.w	r2, #0
    20ea:	e9c7 1202 	strd	r1, r2, [r7, #8]
		register_value |= ((uint64_t)LCDCA->LCDCA_DRH3 << 32);
    20ee:	4a0c      	ldr	r2, [pc, #48]	; (2120 <lcdca_get_pixel_register+0xf4>)
    20f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
    20f2:	4611      	mov	r1, r2
    20f4:	f04f 0200 	mov.w	r2, #0
    20f8:	000c      	movs	r4, r1
    20fa:	2300      	movs	r3, #0
    20fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    2100:	ea43 0301 	orr.w	r3, r3, r1
    2104:	ea44 0402 	orr.w	r4, r4, r2
    2108:	e9c7 3402 	strd	r3, r4, [r7, #8]
		break;
    210c:	bf00      	nop
	}
	return register_value;
    210e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
    2112:	4618      	mov	r0, r3
    2114:	4621      	mov	r1, r4
    2116:	3714      	adds	r7, #20
    2118:	46bd      	mov	sp, r7
    211a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    211e:	bf00      	nop
    2120:	40080000 	.word	0x40080000

00002124 <lcdca_set_pixel>:
 * \param[in] pix_seg Pixel/segment SEGy coordinate
 */
 void lcdca_set_pixel(
		uint8_t pix_com,
		uint8_t pix_seg)
{
    2124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2128:	b089      	sub	sp, #36	; 0x24
    212a:	af00      	add	r7, sp, #0
    212c:	4603      	mov	r3, r0
    212e:	460a      	mov	r2, r1
    2130:	75fb      	strb	r3, [r7, #23]
    2132:	4613      	mov	r3, r2
    2134:	75bb      	strb	r3, [r7, #22]
	if ((pix_com < LCDCA_MAX_NR_OF_COM) &&
    2136:	7dfb      	ldrb	r3, [r7, #23]
    2138:	2b03      	cmp	r3, #3
    213a:	d863      	bhi.n	2204 <lcdca_set_pixel+0xe0>
    213c:	7dbb      	ldrb	r3, [r7, #22]
    213e:	2b27      	cmp	r3, #39	; 0x27
    2140:	d860      	bhi.n	2204 <lcdca_set_pixel+0xe0>
			(pix_seg < LCDCA_MAX_NBR_OF_SEG)) {
		uint64_t register_value = lcdca_get_pixel_register(pix_com);
    2142:	7dfb      	ldrb	r3, [r7, #23]
    2144:	4618      	mov	r0, r3
    2146:	4b32      	ldr	r3, [pc, #200]	; (2210 <lcdca_set_pixel+0xec>)
    2148:	4798      	blx	r3
    214a:	e9c7 0106 	strd	r0, r1, [r7, #24]

		register_value |= ((uint64_t)1 << pix_seg);
    214e:	7db9      	ldrb	r1, [r7, #22]
    2150:	f04f 0301 	mov.w	r3, #1
    2154:	f04f 0400 	mov.w	r4, #0
    2158:	f1a1 0020 	sub.w	r0, r1, #32
    215c:	f1c1 0220 	rsb	r2, r1, #32
    2160:	fa04 f601 	lsl.w	r6, r4, r1
    2164:	fa03 f000 	lsl.w	r0, r3, r0
    2168:	4306      	orrs	r6, r0
    216a:	fa23 f202 	lsr.w	r2, r3, r2
    216e:	4316      	orrs	r6, r2
    2170:	fa03 f501 	lsl.w	r5, r3, r1
    2174:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    2178:	ea43 0305 	orr.w	r3, r3, r5
    217c:	ea44 0406 	orr.w	r4, r4, r6
    2180:	e9c7 3406 	strd	r3, r4, [r7, #24]
		switch (pix_com) {
    2184:	7dfb      	ldrb	r3, [r7, #23]
    2186:	2b03      	cmp	r3, #3
    2188:	d83c      	bhi.n	2204 <lcdca_set_pixel+0xe0>
    218a:	a201      	add	r2, pc, #4	; (adr r2, 2190 <lcdca_set_pixel+0x6c>)
    218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2190:	000021a1 	.word	0x000021a1
    2194:	000021bb 	.word	0x000021bb
    2198:	000021d5 	.word	0x000021d5
    219c:	000021ed 	.word	0x000021ed
		case 0:
			LCDCA->LCDCA_DRL0 = register_value;
    21a0:	4a1c      	ldr	r2, [pc, #112]	; (2214 <lcdca_set_pixel+0xf0>)
    21a2:	69bb      	ldr	r3, [r7, #24]
    21a4:	6153      	str	r3, [r2, #20]
			LCDCA->LCDCA_DRH0 = (register_value >> 32);
    21a6:	4a1b      	ldr	r2, [pc, #108]	; (2214 <lcdca_set_pixel+0xf0>)
    21a8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    21ac:	0023      	movs	r3, r4
    21ae:	60bb      	str	r3, [r7, #8]
    21b0:	2300      	movs	r3, #0
    21b2:	60fb      	str	r3, [r7, #12]
    21b4:	68bb      	ldr	r3, [r7, #8]
    21b6:	6193      	str	r3, [r2, #24]
			break;
    21b8:	e024      	b.n	2204 <lcdca_set_pixel+0xe0>

		case 1:
			LCDCA->LCDCA_DRL1 = register_value;
    21ba:	4a16      	ldr	r2, [pc, #88]	; (2214 <lcdca_set_pixel+0xf0>)
    21bc:	69bb      	ldr	r3, [r7, #24]
    21be:	61d3      	str	r3, [r2, #28]
			LCDCA->LCDCA_DRH1 = (register_value >> 32);
    21c0:	4a14      	ldr	r2, [pc, #80]	; (2214 <lcdca_set_pixel+0xf0>)
    21c2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    21c6:	0023      	movs	r3, r4
    21c8:	603b      	str	r3, [r7, #0]
    21ca:	2300      	movs	r3, #0
    21cc:	607b      	str	r3, [r7, #4]
    21ce:	683b      	ldr	r3, [r7, #0]
    21d0:	6213      	str	r3, [r2, #32]
			break;
    21d2:	e017      	b.n	2204 <lcdca_set_pixel+0xe0>

		case 2:
			LCDCA->LCDCA_DRL2 = register_value;
    21d4:	4a0f      	ldr	r2, [pc, #60]	; (2214 <lcdca_set_pixel+0xf0>)
    21d6:	69bb      	ldr	r3, [r7, #24]
    21d8:	6253      	str	r3, [r2, #36]	; 0x24
			LCDCA->LCDCA_DRH2 = (register_value >> 32);
    21da:	4a0e      	ldr	r2, [pc, #56]	; (2214 <lcdca_set_pixel+0xf0>)
    21dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    21e0:	46a2      	mov	sl, r4
    21e2:	f04f 0b00 	mov.w	fp, #0
    21e6:	4653      	mov	r3, sl
    21e8:	6293      	str	r3, [r2, #40]	; 0x28
			break;
    21ea:	e00b      	b.n	2204 <lcdca_set_pixel+0xe0>

		case 3:
			LCDCA->LCDCA_DRL3 = register_value;
    21ec:	4a09      	ldr	r2, [pc, #36]	; (2214 <lcdca_set_pixel+0xf0>)
    21ee:	69bb      	ldr	r3, [r7, #24]
    21f0:	62d3      	str	r3, [r2, #44]	; 0x2c
			LCDCA->LCDCA_DRH3 = (register_value >> 32);
    21f2:	4a08      	ldr	r2, [pc, #32]	; (2214 <lcdca_set_pixel+0xf0>)
    21f4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    21f8:	46a0      	mov	r8, r4
    21fa:	f04f 0900 	mov.w	r9, #0
    21fe:	4643      	mov	r3, r8
    2200:	6313      	str	r3, [r2, #48]	; 0x30
			break;
    2202:	bf00      	nop
		}
	}
}
    2204:	bf00      	nop
    2206:	3724      	adds	r7, #36	; 0x24
    2208:	46bd      	mov	sp, r7
    220a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    220e:	bf00      	nop
    2210:	0000202d 	.word	0x0000202d
    2214:	40080000 	.word	0x40080000

00002218 <lcdca_clear_pixel>:
 *
 * \param[in] pix_com Pixel/segment COMx coordinate
 * \param[in] pix_seg Pixel/segment SEGy coordinate
 */
 void lcdca_clear_pixel(uint8_t pix_com, uint8_t pix_seg)
{
    2218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    221c:	b089      	sub	sp, #36	; 0x24
    221e:	af00      	add	r7, sp, #0
    2220:	4603      	mov	r3, r0
    2222:	460a      	mov	r2, r1
    2224:	75fb      	strb	r3, [r7, #23]
    2226:	4613      	mov	r3, r2
    2228:	75bb      	strb	r3, [r7, #22]
	if ((pix_com < LCDCA_MAX_NR_OF_COM) &&
    222a:	7dfb      	ldrb	r3, [r7, #23]
    222c:	2b03      	cmp	r3, #3
    222e:	d867      	bhi.n	2300 <lcdca_clear_pixel+0xe8>
    2230:	7dbb      	ldrb	r3, [r7, #22]
    2232:	2b27      	cmp	r3, #39	; 0x27
    2234:	d864      	bhi.n	2300 <lcdca_clear_pixel+0xe8>
			(pix_seg < LCDCA_MAX_NBR_OF_SEG)) {
		uint64_t register_value = lcdca_get_pixel_register(pix_com);
    2236:	7dfb      	ldrb	r3, [r7, #23]
    2238:	4618      	mov	r0, r3
    223a:	4b34      	ldr	r3, [pc, #208]	; (230c <lcdca_clear_pixel+0xf4>)
    223c:	4798      	blx	r3
    223e:	e9c7 0106 	strd	r0, r1, [r7, #24]

		register_value &= ~((uint64_t)1 << pix_seg);
    2242:	7db9      	ldrb	r1, [r7, #22]
    2244:	f04f 0301 	mov.w	r3, #1
    2248:	f04f 0400 	mov.w	r4, #0
    224c:	f1a1 0020 	sub.w	r0, r1, #32
    2250:	f1c1 0220 	rsb	r2, r1, #32
    2254:	fa04 f601 	lsl.w	r6, r4, r1
    2258:	fa03 f000 	lsl.w	r0, r3, r0
    225c:	4306      	orrs	r6, r0
    225e:	fa23 f202 	lsr.w	r2, r3, r2
    2262:	4316      	orrs	r6, r2
    2264:	fa03 f501 	lsl.w	r5, r3, r1
    2268:	ea6f 0305 	mvn.w	r3, r5
    226c:	ea6f 0406 	mvn.w	r4, r6
    2270:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    2274:	ea03 0301 	and.w	r3, r3, r1
    2278:	ea04 0402 	and.w	r4, r4, r2
    227c:	e9c7 3406 	strd	r3, r4, [r7, #24]
		switch (pix_com) {
    2280:	7dfb      	ldrb	r3, [r7, #23]
    2282:	2b03      	cmp	r3, #3
    2284:	d83c      	bhi.n	2300 <lcdca_clear_pixel+0xe8>
    2286:	a201      	add	r2, pc, #4	; (adr r2, 228c <lcdca_clear_pixel+0x74>)
    2288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    228c:	0000229d 	.word	0x0000229d
    2290:	000022b7 	.word	0x000022b7
    2294:	000022d1 	.word	0x000022d1
    2298:	000022e9 	.word	0x000022e9
		case 0:
			LCDCA->LCDCA_DRL0 = register_value;
    229c:	4a1c      	ldr	r2, [pc, #112]	; (2310 <lcdca_clear_pixel+0xf8>)
    229e:	69bb      	ldr	r3, [r7, #24]
    22a0:	6153      	str	r3, [r2, #20]
			LCDCA->LCDCA_DRH0 = (register_value >> 32);
    22a2:	4a1b      	ldr	r2, [pc, #108]	; (2310 <lcdca_clear_pixel+0xf8>)
    22a4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    22a8:	0023      	movs	r3, r4
    22aa:	60bb      	str	r3, [r7, #8]
    22ac:	2300      	movs	r3, #0
    22ae:	60fb      	str	r3, [r7, #12]
    22b0:	68bb      	ldr	r3, [r7, #8]
    22b2:	6193      	str	r3, [r2, #24]
			break;
    22b4:	e024      	b.n	2300 <lcdca_clear_pixel+0xe8>

		case 1:
			LCDCA->LCDCA_DRL1 = register_value;
    22b6:	4a16      	ldr	r2, [pc, #88]	; (2310 <lcdca_clear_pixel+0xf8>)
    22b8:	69bb      	ldr	r3, [r7, #24]
    22ba:	61d3      	str	r3, [r2, #28]
			LCDCA->LCDCA_DRH1 = (register_value >> 32);
    22bc:	4a14      	ldr	r2, [pc, #80]	; (2310 <lcdca_clear_pixel+0xf8>)
    22be:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    22c2:	0023      	movs	r3, r4
    22c4:	603b      	str	r3, [r7, #0]
    22c6:	2300      	movs	r3, #0
    22c8:	607b      	str	r3, [r7, #4]
    22ca:	683b      	ldr	r3, [r7, #0]
    22cc:	6213      	str	r3, [r2, #32]
			break;
    22ce:	e017      	b.n	2300 <lcdca_clear_pixel+0xe8>

		case 2:
			LCDCA->LCDCA_DRL2 = register_value;
    22d0:	4a0f      	ldr	r2, [pc, #60]	; (2310 <lcdca_clear_pixel+0xf8>)
    22d2:	69bb      	ldr	r3, [r7, #24]
    22d4:	6253      	str	r3, [r2, #36]	; 0x24
			LCDCA->LCDCA_DRH2 = (register_value >> 32);
    22d6:	4a0e      	ldr	r2, [pc, #56]	; (2310 <lcdca_clear_pixel+0xf8>)
    22d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    22dc:	46a2      	mov	sl, r4
    22de:	f04f 0b00 	mov.w	fp, #0
    22e2:	4653      	mov	r3, sl
    22e4:	6293      	str	r3, [r2, #40]	; 0x28
			break;
    22e6:	e00b      	b.n	2300 <lcdca_clear_pixel+0xe8>

		case 3:
			LCDCA->LCDCA_DRL3 = register_value;
    22e8:	4a09      	ldr	r2, [pc, #36]	; (2310 <lcdca_clear_pixel+0xf8>)
    22ea:	69bb      	ldr	r3, [r7, #24]
    22ec:	62d3      	str	r3, [r2, #44]	; 0x2c
			LCDCA->LCDCA_DRH3 = (register_value >> 32);
    22ee:	4a08      	ldr	r2, [pc, #32]	; (2310 <lcdca_clear_pixel+0xf8>)
    22f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    22f4:	46a0      	mov	r8, r4
    22f6:	f04f 0900 	mov.w	r9, #0
    22fa:	4643      	mov	r3, r8
    22fc:	6313      	str	r3, [r2, #48]	; 0x30
			break;
    22fe:	bf00      	nop
		}
	}
}
    2300:	bf00      	nop
    2302:	3724      	adds	r7, #36	; 0x24
    2304:	46bd      	mov	sp, r7
    2306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    230a:	bf00      	nop
    230c:	0000202d 	.word	0x0000202d
    2310:	40080000 	.word	0x40080000

00002314 <LCDCA_Handler>:

/**
 * \internal LCDCA interrupt handler.
 */
void LCDCA_Handler(void)
{
    2314:	b580      	push	{r7, lr}
    2316:	af00      	add	r7, sp, #0
	/* Clear interrupt flags */
	lcdca_clear_status();
    2318:	4b05      	ldr	r3, [pc, #20]	; (2330 <LCDCA_Handler+0x1c>)
    231a:	4798      	blx	r3

	/* Interrupt handler */
	if (lcdca_callback_pointer != NULL) {
    231c:	4b05      	ldr	r3, [pc, #20]	; (2334 <LCDCA_Handler+0x20>)
    231e:	681b      	ldr	r3, [r3, #0]
    2320:	2b00      	cmp	r3, #0
    2322:	d002      	beq.n	232a <LCDCA_Handler+0x16>
		lcdca_callback_pointer();
    2324:	4b03      	ldr	r3, [pc, #12]	; (2334 <LCDCA_Handler+0x20>)
    2326:	681b      	ldr	r3, [r3, #0]
    2328:	4798      	blx	r3
	}
}
    232a:	bf00      	nop
    232c:	bd80      	pop	{r7, pc}
    232e:	bf00      	nop
    2330:	00001d19 	.word	0x00001d19
    2334:	20000394 	.word	0x20000394

00002338 <cpu_irq_save>:
{
    2338:	b480      	push	{r7}
    233a:	b083      	sub	sp, #12
    233c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    233e:	f3ef 8310 	mrs	r3, PRIMASK
    2342:	607b      	str	r3, [r7, #4]
  return(result);
    2344:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2346:	2b00      	cmp	r3, #0
    2348:	bf0c      	ite	eq
    234a:	2301      	moveq	r3, #1
    234c:	2300      	movne	r3, #0
    234e:	b2db      	uxtb	r3, r3
    2350:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2352:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2354:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2358:	4b04      	ldr	r3, [pc, #16]	; (236c <cpu_irq_save+0x34>)
    235a:	2200      	movs	r2, #0
    235c:	701a      	strb	r2, [r3, #0]
	return flags;
    235e:	683b      	ldr	r3, [r7, #0]
}
    2360:	4618      	mov	r0, r3
    2362:	370c      	adds	r7, #12
    2364:	46bd      	mov	sp, r7
    2366:	bc80      	pop	{r7}
    2368:	4770      	bx	lr
    236a:	bf00      	nop
    236c:	20000074 	.word	0x20000074

00002370 <cpu_irq_is_enabled_flags>:
{
    2370:	b480      	push	{r7}
    2372:	b083      	sub	sp, #12
    2374:	af00      	add	r7, sp, #0
    2376:	6078      	str	r0, [r7, #4]
	return (flags);
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	2b00      	cmp	r3, #0
    237c:	bf14      	ite	ne
    237e:	2301      	movne	r3, #1
    2380:	2300      	moveq	r3, #0
    2382:	b2db      	uxtb	r3, r3
}
    2384:	4618      	mov	r0, r3
    2386:	370c      	adds	r7, #12
    2388:	46bd      	mov	sp, r7
    238a:	bc80      	pop	{r7}
    238c:	4770      	bx	lr
	...

00002390 <cpu_irq_restore>:
{
    2390:	b580      	push	{r7, lr}
    2392:	b082      	sub	sp, #8
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    2398:	6878      	ldr	r0, [r7, #4]
    239a:	4b07      	ldr	r3, [pc, #28]	; (23b8 <cpu_irq_restore+0x28>)
    239c:	4798      	blx	r3
    239e:	4603      	mov	r3, r0
    23a0:	2b00      	cmp	r3, #0
    23a2:	d005      	beq.n	23b0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    23a4:	4b05      	ldr	r3, [pc, #20]	; (23bc <cpu_irq_restore+0x2c>)
    23a6:	2201      	movs	r2, #1
    23a8:	701a      	strb	r2, [r3, #0]
    23aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    23ae:	b662      	cpsie	i
}
    23b0:	bf00      	nop
    23b2:	3708      	adds	r7, #8
    23b4:	46bd      	mov	sp, r7
    23b6:	bd80      	pop	{r7, pc}
    23b8:	00002371 	.word	0x00002371
    23bc:	20000074 	.word	0x20000074

000023c0 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
    23c0:	b580      	push	{r7, lr}
    23c2:	b082      	sub	sp, #8
    23c4:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
    23c6:	4b08      	ldr	r3, [pc, #32]	; (23e8 <osc_priv_enable_osc0+0x28>)
    23c8:	4798      	blx	r3
    23ca:	6078      	str	r0, [r7, #4]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    23cc:	4b07      	ldr	r3, [pc, #28]	; (23ec <osc_priv_enable_osc0+0x2c>)
    23ce:	4a08      	ldr	r2, [pc, #32]	; (23f0 <osc_priv_enable_osc0+0x30>)
    23d0:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_OSCCTRL0 - (uint32_t)SCIF);
	SCIF->SCIF_OSCCTRL0 =
    23d2:	4b06      	ldr	r3, [pc, #24]	; (23ec <osc_priv_enable_osc0+0x2c>)
    23d4:	4a07      	ldr	r2, [pc, #28]	; (23f4 <osc_priv_enable_osc0+0x34>)
    23d6:	621a      	str	r2, [r3, #32]
# if BOARD_OSC0_IS_XTAL == true
			| OSC0_GAIN_VALUE
#endif
			| OSC0_MODE_VALUE
			| SCIF_OSCCTRL0_OSCEN;
	cpu_irq_restore(flags);
    23d8:	6878      	ldr	r0, [r7, #4]
    23da:	4b07      	ldr	r3, [pc, #28]	; (23f8 <osc_priv_enable_osc0+0x38>)
    23dc:	4798      	blx	r3
}
    23de:	bf00      	nop
    23e0:	3708      	adds	r7, #8
    23e2:	46bd      	mov	sp, r7
    23e4:	bd80      	pop	{r7, pc}
    23e6:	bf00      	nop
    23e8:	00002339 	.word	0x00002339
    23ec:	400e0800 	.word	0x400e0800
    23f0:	aa000020 	.word	0xaa000020
    23f4:	00010307 	.word	0x00010307
    23f8:	00002391 	.word	0x00002391

000023fc <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
    23fc:	b580      	push	{r7, lr}
    23fe:	b082      	sub	sp, #8
    2400:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
    2402:	4b08      	ldr	r3, [pc, #32]	; (2424 <osc_priv_enable_osc32+0x28>)
    2404:	4798      	blx	r3
    2406:	6078      	str	r0, [r7, #4]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    2408:	4b07      	ldr	r3, [pc, #28]	; (2428 <osc_priv_enable_osc32+0x2c>)
    240a:	4a08      	ldr	r2, [pc, #32]	; (242c <osc_priv_enable_osc32+0x30>)
    240c:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    240e:	4b06      	ldr	r3, [pc, #24]	; (2428 <osc_priv_enable_osc32+0x2c>)
    2410:	4a07      	ldr	r2, [pc, #28]	; (2430 <osc_priv_enable_osc32+0x34>)
    2412:	621a      	str	r2, [r3, #32]
			| BOARD_OSC32_SELCURR
			| OSC32_MODE_VALUE
			| BSCIF_OSCCTRL32_EN1K
			| BSCIF_OSCCTRL32_EN32K
			| BSCIF_OSCCTRL32_OSC32EN;
	cpu_irq_restore(flags);
    2414:	6878      	ldr	r0, [r7, #4]
    2416:	4b07      	ldr	r3, [pc, #28]	; (2434 <osc_priv_enable_osc32+0x38>)
    2418:	4798      	blx	r3
}
    241a:	bf00      	nop
    241c:	3708      	adds	r7, #8
    241e:	46bd      	mov	sp, r7
    2420:	bd80      	pop	{r7, pc}
    2422:	bf00      	nop
    2424:	00002339 	.word	0x00002339
    2428:	400f0400 	.word	0x400f0400
    242c:	aa000020 	.word	0xaa000020
    2430:	0005a10d 	.word	0x0005a10d
    2434:	00002391 	.word	0x00002391

00002438 <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC32_HZ */

void osc_priv_enable_rc32k(void)
{
    2438:	b580      	push	{r7, lr}
    243a:	b082      	sub	sp, #8
    243c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    243e:	4b0a      	ldr	r3, [pc, #40]	; (2468 <osc_priv_enable_rc32k+0x30>)
    2440:	4798      	blx	r3
    2442:	6078      	str	r0, [r7, #4]
	temp = BSCIF->BSCIF_RC32KCR;
    2444:	4b09      	ldr	r3, [pc, #36]	; (246c <osc_priv_enable_rc32k+0x34>)
    2446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2448:	603b      	str	r3, [r7, #0]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    244a:	4b08      	ldr	r3, [pc, #32]	; (246c <osc_priv_enable_rc32k+0x34>)
    244c:	4a08      	ldr	r2, [pc, #32]	; (2470 <osc_priv_enable_rc32k+0x38>)
    244e:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_RC32KCR - (uint32_t)BSCIF);
	BSCIF->BSCIF_RC32KCR = temp | BSCIF_RC32KCR_EN32K | BSCIF_RC32KCR_EN;
    2450:	4a06      	ldr	r2, [pc, #24]	; (246c <osc_priv_enable_rc32k+0x34>)
    2452:	683b      	ldr	r3, [r7, #0]
    2454:	f043 0305 	orr.w	r3, r3, #5
    2458:	6253      	str	r3, [r2, #36]	; 0x24
	cpu_irq_restore(flags);
    245a:	6878      	ldr	r0, [r7, #4]
    245c:	4b05      	ldr	r3, [pc, #20]	; (2474 <osc_priv_enable_rc32k+0x3c>)
    245e:	4798      	blx	r3
}
    2460:	bf00      	nop
    2462:	3708      	adds	r7, #8
    2464:	46bd      	mov	sp, r7
    2466:	bd80      	pop	{r7, pc}
    2468:	00002339 	.word	0x00002339
    246c:	400f0400 	.word	0x400f0400
    2470:	aa000024 	.word	0xaa000024
    2474:	00002391 	.word	0x00002391

00002478 <osc_priv_enable_rc1m>:
	BSCIF->BSCIF_RC32KCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc1m(void)
{
    2478:	b580      	push	{r7, lr}
    247a:	b082      	sub	sp, #8
    247c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    247e:	4b0a      	ldr	r3, [pc, #40]	; (24a8 <osc_priv_enable_rc1m+0x30>)
    2480:	4798      	blx	r3
    2482:	6078      	str	r0, [r7, #4]
	temp = BSCIF->BSCIF_RC1MCR;
    2484:	4b09      	ldr	r3, [pc, #36]	; (24ac <osc_priv_enable_rc1m+0x34>)
    2486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2488:	603b      	str	r3, [r7, #0]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    248a:	4b08      	ldr	r3, [pc, #32]	; (24ac <osc_priv_enable_rc1m+0x34>)
    248c:	4a08      	ldr	r2, [pc, #32]	; (24b0 <osc_priv_enable_rc1m+0x38>)
    248e:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_RC1MCR - (uint32_t)BSCIF);
	BSCIF->BSCIF_RC1MCR = temp | BSCIF_RC1MCR_CLKOE;
    2490:	4a06      	ldr	r2, [pc, #24]	; (24ac <osc_priv_enable_rc1m+0x34>)
    2492:	683b      	ldr	r3, [r7, #0]
    2494:	f043 0301 	orr.w	r3, r3, #1
    2498:	6593      	str	r3, [r2, #88]	; 0x58
	cpu_irq_restore(flags);
    249a:	6878      	ldr	r0, [r7, #4]
    249c:	4b05      	ldr	r3, [pc, #20]	; (24b4 <osc_priv_enable_rc1m+0x3c>)
    249e:	4798      	blx	r3
}
    24a0:	bf00      	nop
    24a2:	3708      	adds	r7, #8
    24a4:	46bd      	mov	sp, r7
    24a6:	bd80      	pop	{r7, pc}
    24a8:	00002339 	.word	0x00002339
    24ac:	400f0400 	.word	0x400f0400
    24b0:	aa000058 	.word	0xaa000058
    24b4:	00002391 	.word	0x00002391

000024b8 <osc_priv_enable_rc80m>:
	BSCIF->BSCIF_RC1MCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc80m(void)
{
    24b8:	b580      	push	{r7, lr}
    24ba:	b082      	sub	sp, #8
    24bc:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    24be:	4b0a      	ldr	r3, [pc, #40]	; (24e8 <osc_priv_enable_rc80m+0x30>)
    24c0:	4798      	blx	r3
    24c2:	6078      	str	r0, [r7, #4]
	temp = SCIF->SCIF_RC80MCR;
    24c4:	4b09      	ldr	r3, [pc, #36]	; (24ec <osc_priv_enable_rc80m+0x34>)
    24c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    24c8:	603b      	str	r3, [r7, #0]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    24ca:	4b08      	ldr	r3, [pc, #32]	; (24ec <osc_priv_enable_rc80m+0x34>)
    24cc:	4a08      	ldr	r2, [pc, #32]	; (24f0 <osc_priv_enable_rc80m+0x38>)
    24ce:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RC80MCR - (uint32_t)SCIF);
	SCIF->SCIF_RC80MCR = temp | SCIF_RC80MCR_EN;
    24d0:	4a06      	ldr	r2, [pc, #24]	; (24ec <osc_priv_enable_rc80m+0x34>)
    24d2:	683b      	ldr	r3, [r7, #0]
    24d4:	f043 0301 	orr.w	r3, r3, #1
    24d8:	6513      	str	r3, [r2, #80]	; 0x50
	cpu_irq_restore(flags);
    24da:	6878      	ldr	r0, [r7, #4]
    24dc:	4b05      	ldr	r3, [pc, #20]	; (24f4 <osc_priv_enable_rc80m+0x3c>)
    24de:	4798      	blx	r3
}
    24e0:	bf00      	nop
    24e2:	3708      	adds	r7, #8
    24e4:	46bd      	mov	sp, r7
    24e6:	bd80      	pop	{r7, pc}
    24e8:	00002339 	.word	0x00002339
    24ec:	400e0800 	.word	0x400e0800
    24f0:	aa000050 	.word	0xaa000050
    24f4:	00002391 	.word	0x00002391

000024f8 <osc_priv_enable_rcfast>:
	SCIF->SCIF_RC80MCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rcfast(void)
{
    24f8:	b580      	push	{r7, lr}
    24fa:	b082      	sub	sp, #8
    24fc:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    24fe:	4b0c      	ldr	r3, [pc, #48]	; (2530 <osc_priv_enable_rcfast+0x38>)
    2500:	4798      	blx	r3
    2502:	6078      	str	r0, [r7, #4]
	// Let FCD and calibration value by default
	temp = SCIF->SCIF_RCFASTCFG;
    2504:	4b0b      	ldr	r3, [pc, #44]	; (2534 <osc_priv_enable_rcfast+0x3c>)
    2506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2508:	603b      	str	r3, [r7, #0]
	// Clear previous FRANGE value
	temp &= ~SCIF_RCFASTCFG_FRANGE_Msk;
    250a:	683b      	ldr	r3, [r7, #0]
    250c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    2510:	603b      	str	r3, [r7, #0]

	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    2512:	4b08      	ldr	r3, [pc, #32]	; (2534 <osc_priv_enable_rcfast+0x3c>)
    2514:	4a08      	ldr	r2, [pc, #32]	; (2538 <osc_priv_enable_rcfast+0x40>)
    2516:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RCFASTCFG - (uint32_t)SCIF);
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
    2518:	4a06      	ldr	r2, [pc, #24]	; (2534 <osc_priv_enable_rcfast+0x3c>)
		| SCIF_RCFASTCFG_FRANGE(CONFIG_RCFAST_FRANGE);
    251a:	683b      	ldr	r3, [r7, #0]
    251c:	f043 0301 	orr.w	r3, r3, #1
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
    2520:	6493      	str	r3, [r2, #72]	; 0x48
	cpu_irq_restore(flags);
    2522:	6878      	ldr	r0, [r7, #4]
    2524:	4b05      	ldr	r3, [pc, #20]	; (253c <osc_priv_enable_rcfast+0x44>)
    2526:	4798      	blx	r3
}
    2528:	bf00      	nop
    252a:	3708      	adds	r7, #8
    252c:	46bd      	mov	sp, r7
    252e:	bd80      	pop	{r7, pc}
    2530:	00002339 	.word	0x00002339
    2534:	400e0800 	.word	0x400e0800
    2538:	aa000048 	.word	0xaa000048
    253c:	00002391 	.word	0x00002391

00002540 <cpu_irq_save>:
{
    2540:	b480      	push	{r7}
    2542:	b083      	sub	sp, #12
    2544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2546:	f3ef 8310 	mrs	r3, PRIMASK
    254a:	607b      	str	r3, [r7, #4]
  return(result);
    254c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    254e:	2b00      	cmp	r3, #0
    2550:	bf0c      	ite	eq
    2552:	2301      	moveq	r3, #1
    2554:	2300      	movne	r3, #0
    2556:	b2db      	uxtb	r3, r3
    2558:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    255a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    255c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2560:	4b04      	ldr	r3, [pc, #16]	; (2574 <cpu_irq_save+0x34>)
    2562:	2200      	movs	r2, #0
    2564:	701a      	strb	r2, [r3, #0]
	return flags;
    2566:	683b      	ldr	r3, [r7, #0]
}
    2568:	4618      	mov	r0, r3
    256a:	370c      	adds	r7, #12
    256c:	46bd      	mov	sp, r7
    256e:	bc80      	pop	{r7}
    2570:	4770      	bx	lr
    2572:	bf00      	nop
    2574:	20000074 	.word	0x20000074

00002578 <cpu_irq_is_enabled_flags>:
{
    2578:	b480      	push	{r7}
    257a:	b083      	sub	sp, #12
    257c:	af00      	add	r7, sp, #0
    257e:	6078      	str	r0, [r7, #4]
	return (flags);
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	2b00      	cmp	r3, #0
    2584:	bf14      	ite	ne
    2586:	2301      	movne	r3, #1
    2588:	2300      	moveq	r3, #0
    258a:	b2db      	uxtb	r3, r3
}
    258c:	4618      	mov	r0, r3
    258e:	370c      	adds	r7, #12
    2590:	46bd      	mov	sp, r7
    2592:	bc80      	pop	{r7}
    2594:	4770      	bx	lr
	...

00002598 <cpu_irq_restore>:
{
    2598:	b580      	push	{r7, lr}
    259a:	b082      	sub	sp, #8
    259c:	af00      	add	r7, sp, #0
    259e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    25a0:	6878      	ldr	r0, [r7, #4]
    25a2:	4b07      	ldr	r3, [pc, #28]	; (25c0 <cpu_irq_restore+0x28>)
    25a4:	4798      	blx	r3
    25a6:	4603      	mov	r3, r0
    25a8:	2b00      	cmp	r3, #0
    25aa:	d005      	beq.n	25b8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    25ac:	4b05      	ldr	r3, [pc, #20]	; (25c4 <cpu_irq_restore+0x2c>)
    25ae:	2201      	movs	r2, #1
    25b0:	701a      	strb	r2, [r3, #0]
    25b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    25b6:	b662      	cpsie	i
}
    25b8:	bf00      	nop
    25ba:	3708      	adds	r7, #8
    25bc:	46bd      	mov	sp, r7
    25be:	bd80      	pop	{r7, pc}
    25c0:	00002579 	.word	0x00002579
    25c4:	20000074 	.word	0x20000074

000025c8 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	b082      	sub	sp, #8
    25cc:	af00      	add	r7, sp, #0
    25ce:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    25d0:	6879      	ldr	r1, [r7, #4]
    25d2:	2001      	movs	r0, #1
    25d4:	4b02      	ldr	r3, [pc, #8]	; (25e0 <sysclk_enable_hsb_module+0x18>)
    25d6:	4798      	blx	r3
}
    25d8:	bf00      	nop
    25da:	3708      	adds	r7, #8
    25dc:	46bd      	mov	sp, r7
    25de:	bd80      	pop	{r7, pc}
    25e0:	000026dd 	.word	0x000026dd

000025e4 <sysclk_disable_hsb_module>:
/**
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
    25e4:	b580      	push	{r7, lr}
    25e6:	b082      	sub	sp, #8
    25e8:	af00      	add	r7, sp, #0
    25ea:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    25ec:	6879      	ldr	r1, [r7, #4]
    25ee:	2001      	movs	r0, #1
    25f0:	4b02      	ldr	r3, [pc, #8]	; (25fc <sysclk_disable_hsb_module+0x18>)
    25f2:	4798      	blx	r3
}
    25f4:	bf00      	nop
    25f6:	3708      	adds	r7, #8
    25f8:	46bd      	mov	sp, r7
    25fa:	bd80      	pop	{r7, pc}
    25fc:	00002745 	.word	0x00002745

00002600 <sysclk_enable_pbc_module>:
/**
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
    2606:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    2608:	6879      	ldr	r1, [r7, #4]
    260a:	2004      	movs	r0, #4
    260c:	4b02      	ldr	r3, [pc, #8]	; (2618 <sysclk_enable_pbc_module+0x18>)
    260e:	4798      	blx	r3
}
    2610:	bf00      	nop
    2612:	3708      	adds	r7, #8
    2614:	46bd      	mov	sp, r7
    2616:	bd80      	pop	{r7, pc}
    2618:	000026dd 	.word	0x000026dd

0000261c <sysclk_disable_pbc_module>:
/**
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
    261c:	b580      	push	{r7, lr}
    261e:	b082      	sub	sp, #8
    2620:	af00      	add	r7, sp, #0
    2622:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    2624:	6879      	ldr	r1, [r7, #4]
    2626:	2004      	movs	r0, #4
    2628:	4b02      	ldr	r3, [pc, #8]	; (2634 <sysclk_disable_pbc_module+0x18>)
    262a:	4798      	blx	r3
}
    262c:	bf00      	nop
    262e:	3708      	adds	r7, #8
    2630:	46bd      	mov	sp, r7
    2632:	bd80      	pop	{r7, pc}
    2634:	00002745 	.word	0x00002745

00002638 <sysclk_enable_pbd_module>:
/**
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
    2638:	b580      	push	{r7, lr}
    263a:	b082      	sub	sp, #8
    263c:	af00      	add	r7, sp, #0
    263e:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    2640:	6879      	ldr	r1, [r7, #4]
    2642:	2005      	movs	r0, #5
    2644:	4b02      	ldr	r3, [pc, #8]	; (2650 <sysclk_enable_pbd_module+0x18>)
    2646:	4798      	blx	r3
}
    2648:	bf00      	nop
    264a:	3708      	adds	r7, #8
    264c:	46bd      	mov	sp, r7
    264e:	bd80      	pop	{r7, pc}
    2650:	000026dd 	.word	0x000026dd

00002654 <sysclk_disable_pbd_module>:
/**
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
    2654:	b580      	push	{r7, lr}
    2656:	b082      	sub	sp, #8
    2658:	af00      	add	r7, sp, #0
    265a:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    265c:	6879      	ldr	r1, [r7, #4]
    265e:	2005      	movs	r0, #5
    2660:	4b02      	ldr	r3, [pc, #8]	; (266c <sysclk_disable_pbd_module+0x18>)
    2662:	4798      	blx	r3
}
    2664:	bf00      	nop
    2666:	3708      	adds	r7, #8
    2668:	46bd      	mov	sp, r7
    266a:	bd80      	pop	{r7, pc}
    266c:	00002745 	.word	0x00002745

00002670 <sysclk_enable_pba_divmask>:
/**
 * \brief Enable divided clock mask derived from the PBA clock
 * \param mask mask of the divided clock in the PBADIVMASK register
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
    2670:	b480      	push	{r7}
    2672:	b085      	sub	sp, #20
    2674:	af00      	add	r7, sp, #0
    2676:	6078      	str	r0, [r7, #4]
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2678:	4b08      	ldr	r3, [pc, #32]	; (269c <sysclk_enable_pba_divmask+0x2c>)
    267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    267c:	60fb      	str	r3, [r7, #12]
	temp_mask |= mask;
    267e:	68fa      	ldr	r2, [r7, #12]
    2680:	687b      	ldr	r3, [r7, #4]
    2682:	4313      	orrs	r3, r2
    2684:	60fb      	str	r3, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2686:	4b05      	ldr	r3, [pc, #20]	; (269c <sysclk_enable_pba_divmask+0x2c>)
    2688:	4a05      	ldr	r2, [pc, #20]	; (26a0 <sysclk_enable_pba_divmask+0x30>)
    268a:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    268c:	4a03      	ldr	r2, [pc, #12]	; (269c <sysclk_enable_pba_divmask+0x2c>)
    268e:	68fb      	ldr	r3, [r7, #12]
    2690:	6413      	str	r3, [r2, #64]	; 0x40
}
    2692:	bf00      	nop
    2694:	3714      	adds	r7, #20
    2696:	46bd      	mov	sp, r7
    2698:	bc80      	pop	{r7}
    269a:	4770      	bx	lr
    269c:	400e0000 	.word	0x400e0000
    26a0:	aa000040 	.word	0xaa000040

000026a4 <sysclk_disable_pba_divmask>:
/**
 * \brief Disable divided clock mask derived from the PBA clock
 * \param mask mask of the divided clock in the PBADIVMASK register
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
    26a4:	b480      	push	{r7}
    26a6:	b085      	sub	sp, #20
    26a8:	af00      	add	r7, sp, #0
    26aa:	6078      	str	r0, [r7, #4]
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    26ac:	4b09      	ldr	r3, [pc, #36]	; (26d4 <sysclk_disable_pba_divmask+0x30>)
    26ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    26b0:	60fb      	str	r3, [r7, #12]
	temp_mask &= ~mask;
    26b2:	687b      	ldr	r3, [r7, #4]
    26b4:	43db      	mvns	r3, r3
    26b6:	68fa      	ldr	r2, [r7, #12]
    26b8:	4013      	ands	r3, r2
    26ba:	60fb      	str	r3, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    26bc:	4b05      	ldr	r3, [pc, #20]	; (26d4 <sysclk_disable_pba_divmask+0x30>)
    26be:	4a06      	ldr	r2, [pc, #24]	; (26d8 <sysclk_disable_pba_divmask+0x34>)
    26c0:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    26c2:	4a04      	ldr	r2, [pc, #16]	; (26d4 <sysclk_disable_pba_divmask+0x30>)
    26c4:	68fb      	ldr	r3, [r7, #12]
    26c6:	6413      	str	r3, [r2, #64]	; 0x40
}
    26c8:	bf00      	nop
    26ca:	3714      	adds	r7, #20
    26cc:	46bd      	mov	sp, r7
    26ce:	bc80      	pop	{r7}
    26d0:	4770      	bx	lr
    26d2:	bf00      	nop
    26d4:	400e0000 	.word	0x400e0000
    26d8:	aa000040 	.word	0xaa000040

000026dc <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    26dc:	b580      	push	{r7, lr}
    26de:	b084      	sub	sp, #16
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
    26e4:	6039      	str	r1, [r7, #0]
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
    26e6:	4b13      	ldr	r3, [pc, #76]	; (2734 <sysclk_priv_enable_module+0x58>)
    26e8:	4798      	blx	r3
    26ea:	60f8      	str	r0, [r7, #12]

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    26ec:	687b      	ldr	r3, [r7, #4]
    26ee:	009a      	lsls	r2, r3, #2
    26f0:	4b11      	ldr	r3, [pc, #68]	; (2738 <sysclk_priv_enable_module+0x5c>)
    26f2:	4413      	add	r3, r2
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	60bb      	str	r3, [r7, #8]
	mask |= 1U << module_index;
    26f8:	2201      	movs	r2, #1
    26fa:	683b      	ldr	r3, [r7, #0]
    26fc:	fa02 f303 	lsl.w	r3, r2, r3
    2700:	68ba      	ldr	r2, [r7, #8]
    2702:	4313      	orrs	r3, r2
    2704:	60bb      	str	r3, [r7, #8]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    2706:	4a0d      	ldr	r2, [pc, #52]	; (273c <sysclk_priv_enable_module+0x60>)
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	3308      	adds	r3, #8
    270c:	009b      	lsls	r3, r3, #2
    270e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    2712:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    2716:	6593      	str	r3, [r2, #88]	; 0x58
	*(&PM->PM_CPUMASK + bus_id) = mask;
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	009a      	lsls	r2, r3, #2
    271c:	4b06      	ldr	r3, [pc, #24]	; (2738 <sysclk_priv_enable_module+0x5c>)
    271e:	4413      	add	r3, r2
    2720:	68ba      	ldr	r2, [r7, #8]
    2722:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    2724:	68f8      	ldr	r0, [r7, #12]
    2726:	4b06      	ldr	r3, [pc, #24]	; (2740 <sysclk_priv_enable_module+0x64>)
    2728:	4798      	blx	r3
}
    272a:	bf00      	nop
    272c:	3710      	adds	r7, #16
    272e:	46bd      	mov	sp, r7
    2730:	bd80      	pop	{r7, pc}
    2732:	bf00      	nop
    2734:	00002541 	.word	0x00002541
    2738:	400e0020 	.word	0x400e0020
    273c:	400e0000 	.word	0x400e0000
    2740:	00002599 	.word	0x00002599

00002744 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    2744:	b580      	push	{r7, lr}
    2746:	b084      	sub	sp, #16
    2748:	af00      	add	r7, sp, #0
    274a:	6078      	str	r0, [r7, #4]
    274c:	6039      	str	r1, [r7, #0]
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
    274e:	4b13      	ldr	r3, [pc, #76]	; (279c <sysclk_priv_disable_module+0x58>)
    2750:	4798      	blx	r3
    2752:	60f8      	str	r0, [r7, #12]

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	009a      	lsls	r2, r3, #2
    2758:	4b11      	ldr	r3, [pc, #68]	; (27a0 <sysclk_priv_disable_module+0x5c>)
    275a:	4413      	add	r3, r2
    275c:	681b      	ldr	r3, [r3, #0]
    275e:	60bb      	str	r3, [r7, #8]
	mask &= ~(1U << module_index);
    2760:	2201      	movs	r2, #1
    2762:	683b      	ldr	r3, [r7, #0]
    2764:	fa02 f303 	lsl.w	r3, r2, r3
    2768:	43db      	mvns	r3, r3
    276a:	68ba      	ldr	r2, [r7, #8]
    276c:	4013      	ands	r3, r2
    276e:	60bb      	str	r3, [r7, #8]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    2770:	4a0c      	ldr	r2, [pc, #48]	; (27a4 <sysclk_priv_disable_module+0x60>)
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	3308      	adds	r3, #8
    2776:	009b      	lsls	r3, r3, #2
    2778:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    277c:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    2780:	6593      	str	r3, [r2, #88]	; 0x58
	*(&PM->PM_CPUMASK + bus_id) = mask;
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	009a      	lsls	r2, r3, #2
    2786:	4b06      	ldr	r3, [pc, #24]	; (27a0 <sysclk_priv_disable_module+0x5c>)
    2788:	4413      	add	r3, r2
    278a:	68ba      	ldr	r2, [r7, #8]
    278c:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    278e:	68f8      	ldr	r0, [r7, #12]
    2790:	4b05      	ldr	r3, [pc, #20]	; (27a8 <sysclk_priv_disable_module+0x64>)
    2792:	4798      	blx	r3
}
    2794:	bf00      	nop
    2796:	3710      	adds	r7, #16
    2798:	46bd      	mov	sp, r7
    279a:	bd80      	pop	{r7, pc}
    279c:	00002541 	.word	0x00002541
    27a0:	400e0020 	.word	0x400e0020
    27a4:	400e0000 	.word	0x400e0000
    27a8:	00002599 	.word	0x00002599

000027ac <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    27ac:	b580      	push	{r7, lr}
    27ae:	b084      	sub	sp, #16
    27b0:	af00      	add	r7, sp, #0
    27b2:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
    27b4:	4b0a      	ldr	r3, [pc, #40]	; (27e0 <sysclk_enable_pba_module+0x34>)
    27b6:	4798      	blx	r3
    27b8:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBAMASK == 0) {
    27ba:	4b0a      	ldr	r3, [pc, #40]	; (27e4 <sysclk_enable_pba_module+0x38>)
    27bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27be:	2b00      	cmp	r3, #0
    27c0:	d102      	bne.n	27c8 <sysclk_enable_pba_module+0x1c>
		sysclk_enable_hsb_module(SYSCLK_PBA_BRIDGE);
    27c2:	2005      	movs	r0, #5
    27c4:	4b08      	ldr	r3, [pc, #32]	; (27e8 <sysclk_enable_pba_module+0x3c>)
    27c6:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    27c8:	68f8      	ldr	r0, [r7, #12]
    27ca:	4b08      	ldr	r3, [pc, #32]	; (27ec <sysclk_enable_pba_module+0x40>)
    27cc:	4798      	blx	r3

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    27ce:	6879      	ldr	r1, [r7, #4]
    27d0:	2002      	movs	r0, #2
    27d2:	4b07      	ldr	r3, [pc, #28]	; (27f0 <sysclk_enable_pba_module+0x44>)
    27d4:	4798      	blx	r3
}
    27d6:	bf00      	nop
    27d8:	3710      	adds	r7, #16
    27da:	46bd      	mov	sp, r7
    27dc:	bd80      	pop	{r7, pc}
    27de:	bf00      	nop
    27e0:	00002541 	.word	0x00002541
    27e4:	400e0000 	.word	0x400e0000
    27e8:	000025c9 	.word	0x000025c9
    27ec:	00002599 	.word	0x00002599
    27f0:	000026dd 	.word	0x000026dd

000027f4 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    27f4:	b580      	push	{r7, lr}
    27f6:	b084      	sub	sp, #16
    27f8:	af00      	add	r7, sp, #0
    27fa:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    27fc:	6879      	ldr	r1, [r7, #4]
    27fe:	2002      	movs	r0, #2
    2800:	4b09      	ldr	r3, [pc, #36]	; (2828 <sysclk_disable_pba_module+0x34>)
    2802:	4798      	blx	r3

	/* Disable the bridge if possible */
	flags = cpu_irq_save();
    2804:	4b09      	ldr	r3, [pc, #36]	; (282c <sysclk_disable_pba_module+0x38>)
    2806:	4798      	blx	r3
    2808:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBAMASK == 0) {
    280a:	4b09      	ldr	r3, [pc, #36]	; (2830 <sysclk_disable_pba_module+0x3c>)
    280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    280e:	2b00      	cmp	r3, #0
    2810:	d102      	bne.n	2818 <sysclk_disable_pba_module+0x24>
		sysclk_disable_hsb_module(SYSCLK_PBA_BRIDGE);
    2812:	2005      	movs	r0, #5
    2814:	4b07      	ldr	r3, [pc, #28]	; (2834 <sysclk_disable_pba_module+0x40>)
    2816:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    2818:	68f8      	ldr	r0, [r7, #12]
    281a:	4b07      	ldr	r3, [pc, #28]	; (2838 <sysclk_disable_pba_module+0x44>)
    281c:	4798      	blx	r3
}
    281e:	bf00      	nop
    2820:	3710      	adds	r7, #16
    2822:	46bd      	mov	sp, r7
    2824:	bd80      	pop	{r7, pc}
    2826:	bf00      	nop
    2828:	00002745 	.word	0x00002745
    282c:	00002541 	.word	0x00002541
    2830:	400e0000 	.word	0x400e0000
    2834:	000025e5 	.word	0x000025e5
    2838:	00002599 	.word	0x00002599

0000283c <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    283c:	b580      	push	{r7, lr}
    283e:	b084      	sub	sp, #16
    2840:	af00      	add	r7, sp, #0
    2842:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
    2844:	4b0a      	ldr	r3, [pc, #40]	; (2870 <sysclk_enable_pbb_module+0x34>)
    2846:	4798      	blx	r3
    2848:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBBMASK == 0) {
    284a:	4b0a      	ldr	r3, [pc, #40]	; (2874 <sysclk_enable_pbb_module+0x38>)
    284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    284e:	2b00      	cmp	r3, #0
    2850:	d102      	bne.n	2858 <sysclk_enable_pbb_module+0x1c>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
    2852:	2006      	movs	r0, #6
    2854:	4b08      	ldr	r3, [pc, #32]	; (2878 <sysclk_enable_pbb_module+0x3c>)
    2856:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    2858:	68f8      	ldr	r0, [r7, #12]
    285a:	4b08      	ldr	r3, [pc, #32]	; (287c <sysclk_enable_pbb_module+0x40>)
    285c:	4798      	blx	r3

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    285e:	6879      	ldr	r1, [r7, #4]
    2860:	2003      	movs	r0, #3
    2862:	4b07      	ldr	r3, [pc, #28]	; (2880 <sysclk_enable_pbb_module+0x44>)
    2864:	4798      	blx	r3
}
    2866:	bf00      	nop
    2868:	3710      	adds	r7, #16
    286a:	46bd      	mov	sp, r7
    286c:	bd80      	pop	{r7, pc}
    286e:	bf00      	nop
    2870:	00002541 	.word	0x00002541
    2874:	400e0000 	.word	0x400e0000
    2878:	000025c9 	.word	0x000025c9
    287c:	00002599 	.word	0x00002599
    2880:	000026dd 	.word	0x000026dd

00002884 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    2884:	b580      	push	{r7, lr}
    2886:	b084      	sub	sp, #16
    2888:	af00      	add	r7, sp, #0
    288a:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    288c:	6879      	ldr	r1, [r7, #4]
    288e:	2003      	movs	r0, #3
    2890:	4b09      	ldr	r3, [pc, #36]	; (28b8 <sysclk_disable_pbb_module+0x34>)
    2892:	4798      	blx	r3

	/* Disable the bridge if possible */
	flags = cpu_irq_save();
    2894:	4b09      	ldr	r3, [pc, #36]	; (28bc <sysclk_disable_pbb_module+0x38>)
    2896:	4798      	blx	r3
    2898:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBBMASK == 0) {
    289a:	4b09      	ldr	r3, [pc, #36]	; (28c0 <sysclk_disable_pbb_module+0x3c>)
    289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    289e:	2b00      	cmp	r3, #0
    28a0:	d102      	bne.n	28a8 <sysclk_disable_pbb_module+0x24>
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);
    28a2:	2006      	movs	r0, #6
    28a4:	4b07      	ldr	r3, [pc, #28]	; (28c4 <sysclk_disable_pbb_module+0x40>)
    28a6:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    28a8:	68f8      	ldr	r0, [r7, #12]
    28aa:	4b07      	ldr	r3, [pc, #28]	; (28c8 <sysclk_disable_pbb_module+0x44>)
    28ac:	4798      	blx	r3
}
    28ae:	bf00      	nop
    28b0:	3710      	adds	r7, #16
    28b2:	46bd      	mov	sp, r7
    28b4:	bd80      	pop	{r7, pc}
    28b6:	bf00      	nop
    28b8:	00002745 	.word	0x00002745
    28bc:	00002541 	.word	0x00002541
    28c0:	400e0000 	.word	0x400e0000
    28c4:	000025e5 	.word	0x000025e5
    28c8:	00002599 	.word	0x00002599

000028cc <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
	switch ((uintptr_t)module) {
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	4aa9      	ldr	r2, [pc, #676]	; (2b7c <sysclk_enable_peripheral_clock+0x2b0>)
    28d8:	4293      	cmp	r3, r2
    28da:	f000 8146 	beq.w	2b6a <sysclk_enable_peripheral_clock+0x29e>
    28de:	4aa7      	ldr	r2, [pc, #668]	; (2b7c <sysclk_enable_peripheral_clock+0x2b0>)
    28e0:	4293      	cmp	r3, r2
    28e2:	d86c      	bhi.n	29be <sysclk_enable_peripheral_clock+0xf2>
    28e4:	4aa6      	ldr	r2, [pc, #664]	; (2b80 <sysclk_enable_peripheral_clock+0x2b4>)
    28e6:	4293      	cmp	r3, r2
    28e8:	f000 810a 	beq.w	2b00 <sysclk_enable_peripheral_clock+0x234>
    28ec:	4aa4      	ldr	r2, [pc, #656]	; (2b80 <sysclk_enable_peripheral_clock+0x2b4>)
    28ee:	4293      	cmp	r3, r2
    28f0:	d830      	bhi.n	2954 <sysclk_enable_peripheral_clock+0x88>
    28f2:	4aa4      	ldr	r2, [pc, #656]	; (2b84 <sysclk_enable_peripheral_clock+0x2b8>)
    28f4:	4293      	cmp	r3, r2
    28f6:	f000 80ec 	beq.w	2ad2 <sysclk_enable_peripheral_clock+0x206>
    28fa:	4aa2      	ldr	r2, [pc, #648]	; (2b84 <sysclk_enable_peripheral_clock+0x2b8>)
    28fc:	4293      	cmp	r3, r2
    28fe:	d814      	bhi.n	292a <sysclk_enable_peripheral_clock+0x5e>
    2900:	4aa1      	ldr	r2, [pc, #644]	; (2b88 <sysclk_enable_peripheral_clock+0x2bc>)
    2902:	4293      	cmp	r3, r2
    2904:	f000 80d3 	beq.w	2aae <sysclk_enable_peripheral_clock+0x1e2>
    2908:	4a9f      	ldr	r2, [pc, #636]	; (2b88 <sysclk_enable_peripheral_clock+0x2bc>)
    290a:	4293      	cmp	r3, r2
    290c:	d804      	bhi.n	2918 <sysclk_enable_peripheral_clock+0x4c>
    290e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    2912:	f000 80c8 	beq.w	2aa6 <sysclk_enable_peripheral_clock+0x1da>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    2916:	e1e4      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    2918:	4a9c      	ldr	r2, [pc, #624]	; (2b8c <sysclk_enable_peripheral_clock+0x2c0>)
    291a:	4293      	cmp	r3, r2
    291c:	f000 80cb 	beq.w	2ab6 <sysclk_enable_peripheral_clock+0x1ea>
    2920:	4a9b      	ldr	r2, [pc, #620]	; (2b90 <sysclk_enable_peripheral_clock+0x2c4>)
    2922:	4293      	cmp	r3, r2
    2924:	f000 80ce 	beq.w	2ac4 <sysclk_enable_peripheral_clock+0x1f8>
		return;
    2928:	e1db      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    292a:	4a9a      	ldr	r2, [pc, #616]	; (2b94 <sysclk_enable_peripheral_clock+0x2c8>)
    292c:	4293      	cmp	r3, r2
    292e:	f000 80d8 	beq.w	2ae2 <sysclk_enable_peripheral_clock+0x216>
    2932:	4a98      	ldr	r2, [pc, #608]	; (2b94 <sysclk_enable_peripheral_clock+0x2c8>)
    2934:	4293      	cmp	r3, r2
    2936:	d804      	bhi.n	2942 <sysclk_enable_peripheral_clock+0x76>
    2938:	4a97      	ldr	r2, [pc, #604]	; (2b98 <sysclk_enable_peripheral_clock+0x2cc>)
    293a:	4293      	cmp	r3, r2
    293c:	f000 80cd 	beq.w	2ada <sysclk_enable_peripheral_clock+0x20e>
		return;
    2940:	e1cf      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    2942:	4a96      	ldr	r2, [pc, #600]	; (2b9c <sysclk_enable_peripheral_clock+0x2d0>)
    2944:	4293      	cmp	r3, r2
    2946:	f000 80d0 	beq.w	2aea <sysclk_enable_peripheral_clock+0x21e>
    294a:	4a95      	ldr	r2, [pc, #596]	; (2ba0 <sysclk_enable_peripheral_clock+0x2d4>)
    294c:	4293      	cmp	r3, r2
    294e:	f000 80d0 	beq.w	2af2 <sysclk_enable_peripheral_clock+0x226>
		return;
    2952:	e1c6      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    2954:	4a93      	ldr	r2, [pc, #588]	; (2ba4 <sysclk_enable_peripheral_clock+0x2d8>)
    2956:	4293      	cmp	r3, r2
    2958:	f000 80ef 	beq.w	2b3a <sysclk_enable_peripheral_clock+0x26e>
    295c:	4a91      	ldr	r2, [pc, #580]	; (2ba4 <sysclk_enable_peripheral_clock+0x2d8>)
    295e:	4293      	cmp	r3, r2
    2960:	d814      	bhi.n	298c <sysclk_enable_peripheral_clock+0xc0>
    2962:	4a91      	ldr	r2, [pc, #580]	; (2ba8 <sysclk_enable_peripheral_clock+0x2dc>)
    2964:	4293      	cmp	r3, r2
    2966:	f000 80d9 	beq.w	2b1c <sysclk_enable_peripheral_clock+0x250>
    296a:	4a8f      	ldr	r2, [pc, #572]	; (2ba8 <sysclk_enable_peripheral_clock+0x2dc>)
    296c:	4293      	cmp	r3, r2
    296e:	d804      	bhi.n	297a <sysclk_enable_peripheral_clock+0xae>
    2970:	4a8e      	ldr	r2, [pc, #568]	; (2bac <sysclk_enable_peripheral_clock+0x2e0>)
    2972:	4293      	cmp	r3, r2
    2974:	f000 80cb 	beq.w	2b0e <sysclk_enable_peripheral_clock+0x242>
		return;
    2978:	e1b3      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    297a:	4a8d      	ldr	r2, [pc, #564]	; (2bb0 <sysclk_enable_peripheral_clock+0x2e4>)
    297c:	4293      	cmp	r3, r2
    297e:	f000 80d4 	beq.w	2b2a <sysclk_enable_peripheral_clock+0x25e>
    2982:	4a8c      	ldr	r2, [pc, #560]	; (2bb4 <sysclk_enable_peripheral_clock+0x2e8>)
    2984:	4293      	cmp	r3, r2
    2986:	f000 80d4 	beq.w	2b32 <sysclk_enable_peripheral_clock+0x266>
		return;
    298a:	e1aa      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    298c:	4a8a      	ldr	r2, [pc, #552]	; (2bb8 <sysclk_enable_peripheral_clock+0x2ec>)
    298e:	4293      	cmp	r3, r2
    2990:	f000 80df 	beq.w	2b52 <sysclk_enable_peripheral_clock+0x286>
    2994:	4a88      	ldr	r2, [pc, #544]	; (2bb8 <sysclk_enable_peripheral_clock+0x2ec>)
    2996:	4293      	cmp	r3, r2
    2998:	d808      	bhi.n	29ac <sysclk_enable_peripheral_clock+0xe0>
    299a:	4a88      	ldr	r2, [pc, #544]	; (2bbc <sysclk_enable_peripheral_clock+0x2f0>)
    299c:	4293      	cmp	r3, r2
    299e:	f000 80d0 	beq.w	2b42 <sysclk_enable_peripheral_clock+0x276>
    29a2:	4a87      	ldr	r2, [pc, #540]	; (2bc0 <sysclk_enable_peripheral_clock+0x2f4>)
    29a4:	4293      	cmp	r3, r2
    29a6:	f000 80d0 	beq.w	2b4a <sysclk_enable_peripheral_clock+0x27e>
		return;
    29aa:	e19a      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    29ac:	4a85      	ldr	r2, [pc, #532]	; (2bc4 <sysclk_enable_peripheral_clock+0x2f8>)
    29ae:	4293      	cmp	r3, r2
    29b0:	f000 80d3 	beq.w	2b5a <sysclk_enable_peripheral_clock+0x28e>
    29b4:	4a84      	ldr	r2, [pc, #528]	; (2bc8 <sysclk_enable_peripheral_clock+0x2fc>)
    29b6:	4293      	cmp	r3, r2
    29b8:	f000 80d3 	beq.w	2b62 <sysclk_enable_peripheral_clock+0x296>
		return;
    29bc:	e191      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    29be:	4a83      	ldr	r2, [pc, #524]	; (2bcc <sysclk_enable_peripheral_clock+0x300>)
    29c0:	4293      	cmp	r3, r2
    29c2:	f000 8162 	beq.w	2c8a <sysclk_enable_peripheral_clock+0x3be>
    29c6:	4a81      	ldr	r2, [pc, #516]	; (2bcc <sysclk_enable_peripheral_clock+0x300>)
    29c8:	4293      	cmp	r3, r2
    29ca:	d833      	bhi.n	2a34 <sysclk_enable_peripheral_clock+0x168>
    29cc:	4a80      	ldr	r2, [pc, #512]	; (2bd0 <sysclk_enable_peripheral_clock+0x304>)
    29ce:	4293      	cmp	r3, r2
    29d0:	f000 813e 	beq.w	2c50 <sysclk_enable_peripheral_clock+0x384>
    29d4:	4a7e      	ldr	r2, [pc, #504]	; (2bd0 <sysclk_enable_peripheral_clock+0x304>)
    29d6:	4293      	cmp	r3, r2
    29d8:	d814      	bhi.n	2a04 <sysclk_enable_peripheral_clock+0x138>
    29da:	4a7e      	ldr	r2, [pc, #504]	; (2bd4 <sysclk_enable_peripheral_clock+0x308>)
    29dc:	4293      	cmp	r3, r2
    29de:	f000 8125 	beq.w	2c2c <sysclk_enable_peripheral_clock+0x360>
    29e2:	4a7c      	ldr	r2, [pc, #496]	; (2bd4 <sysclk_enable_peripheral_clock+0x308>)
    29e4:	4293      	cmp	r3, r2
    29e6:	d804      	bhi.n	29f2 <sysclk_enable_peripheral_clock+0x126>
    29e8:	4a7b      	ldr	r2, [pc, #492]	; (2bd8 <sysclk_enable_peripheral_clock+0x30c>)
    29ea:	4293      	cmp	r3, r2
    29ec:	f000 80c1 	beq.w	2b72 <sysclk_enable_peripheral_clock+0x2a6>
		return;
    29f0:	e177      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    29f2:	4a7a      	ldr	r2, [pc, #488]	; (2bdc <sysclk_enable_peripheral_clock+0x310>)
    29f4:	4293      	cmp	r3, r2
    29f6:	f000 811d 	beq.w	2c34 <sysclk_enable_peripheral_clock+0x368>
    29fa:	4a79      	ldr	r2, [pc, #484]	; (2be0 <sysclk_enable_peripheral_clock+0x314>)
    29fc:	4293      	cmp	r3, r2
    29fe:	f000 8120 	beq.w	2c42 <sysclk_enable_peripheral_clock+0x376>
		return;
    2a02:	e16e      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    2a04:	4a77      	ldr	r2, [pc, #476]	; (2be4 <sysclk_enable_peripheral_clock+0x318>)
    2a06:	4293      	cmp	r3, r2
    2a08:	f000 8134 	beq.w	2c74 <sysclk_enable_peripheral_clock+0x3a8>
    2a0c:	4a75      	ldr	r2, [pc, #468]	; (2be4 <sysclk_enable_peripheral_clock+0x318>)
    2a0e:	4293      	cmp	r3, r2
    2a10:	d808      	bhi.n	2a24 <sysclk_enable_peripheral_clock+0x158>
    2a12:	4a75      	ldr	r2, [pc, #468]	; (2be8 <sysclk_enable_peripheral_clock+0x31c>)
    2a14:	4293      	cmp	r3, r2
    2a16:	f000 811f 	beq.w	2c58 <sysclk_enable_peripheral_clock+0x38c>
    2a1a:	4a74      	ldr	r2, [pc, #464]	; (2bec <sysclk_enable_peripheral_clock+0x320>)
    2a1c:	4293      	cmp	r3, r2
    2a1e:	f000 8122 	beq.w	2c66 <sysclk_enable_peripheral_clock+0x39a>
		return;
    2a22:	e15e      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    2a24:	4a72      	ldr	r2, [pc, #456]	; (2bf0 <sysclk_enable_peripheral_clock+0x324>)
    2a26:	4293      	cmp	r3, r2
    2a28:	f000 812b 	beq.w	2c82 <sysclk_enable_peripheral_clock+0x3b6>
    2a2c:	4a71      	ldr	r2, [pc, #452]	; (2bf4 <sysclk_enable_peripheral_clock+0x328>)
    2a2e:	4293      	cmp	r3, r2
    2a30:	d035      	beq.n	2a9e <sysclk_enable_peripheral_clock+0x1d2>
		return;
    2a32:	e156      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    2a34:	4a70      	ldr	r2, [pc, #448]	; (2bf8 <sysclk_enable_peripheral_clock+0x32c>)
    2a36:	4293      	cmp	r3, r2
    2a38:	f000 813b 	beq.w	2cb2 <sysclk_enable_peripheral_clock+0x3e6>
    2a3c:	4a6e      	ldr	r2, [pc, #440]	; (2bf8 <sysclk_enable_peripheral_clock+0x32c>)
    2a3e:	4293      	cmp	r3, r2
    2a40:	d814      	bhi.n	2a6c <sysclk_enable_peripheral_clock+0x1a0>
    2a42:	4a6e      	ldr	r2, [pc, #440]	; (2bfc <sysclk_enable_peripheral_clock+0x330>)
    2a44:	4293      	cmp	r3, r2
    2a46:	f000 8128 	beq.w	2c9a <sysclk_enable_peripheral_clock+0x3ce>
    2a4a:	4a6c      	ldr	r2, [pc, #432]	; (2bfc <sysclk_enable_peripheral_clock+0x330>)
    2a4c:	4293      	cmp	r3, r2
    2a4e:	d804      	bhi.n	2a5a <sysclk_enable_peripheral_clock+0x18e>
    2a50:	4a6b      	ldr	r2, [pc, #428]	; (2c00 <sysclk_enable_peripheral_clock+0x334>)
    2a52:	4293      	cmp	r3, r2
    2a54:	f000 811d 	beq.w	2c92 <sysclk_enable_peripheral_clock+0x3c6>
		return;
    2a58:	e143      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    2a5a:	4a6a      	ldr	r2, [pc, #424]	; (2c04 <sysclk_enable_peripheral_clock+0x338>)
    2a5c:	4293      	cmp	r3, r2
    2a5e:	f000 8120 	beq.w	2ca2 <sysclk_enable_peripheral_clock+0x3d6>
    2a62:	4a69      	ldr	r2, [pc, #420]	; (2c08 <sysclk_enable_peripheral_clock+0x33c>)
    2a64:	4293      	cmp	r3, r2
    2a66:	f000 8120 	beq.w	2caa <sysclk_enable_peripheral_clock+0x3de>
		return;
    2a6a:	e13a      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    2a6c:	4a67      	ldr	r2, [pc, #412]	; (2c0c <sysclk_enable_peripheral_clock+0x340>)
    2a6e:	4293      	cmp	r3, r2
    2a70:	f000 812b 	beq.w	2cca <sysclk_enable_peripheral_clock+0x3fe>
    2a74:	4a65      	ldr	r2, [pc, #404]	; (2c0c <sysclk_enable_peripheral_clock+0x340>)
    2a76:	4293      	cmp	r3, r2
    2a78:	d808      	bhi.n	2a8c <sysclk_enable_peripheral_clock+0x1c0>
    2a7a:	4a65      	ldr	r2, [pc, #404]	; (2c10 <sysclk_enable_peripheral_clock+0x344>)
    2a7c:	4293      	cmp	r3, r2
    2a7e:	f000 811c 	beq.w	2cba <sysclk_enable_peripheral_clock+0x3ee>
    2a82:	4a64      	ldr	r2, [pc, #400]	; (2c14 <sysclk_enable_peripheral_clock+0x348>)
    2a84:	4293      	cmp	r3, r2
    2a86:	f000 811c 	beq.w	2cc2 <sysclk_enable_peripheral_clock+0x3f6>
		return;
    2a8a:	e12a      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    2a8c:	4a62      	ldr	r2, [pc, #392]	; (2c18 <sysclk_enable_peripheral_clock+0x34c>)
    2a8e:	4293      	cmp	r3, r2
    2a90:	f000 811f 	beq.w	2cd2 <sysclk_enable_peripheral_clock+0x406>
    2a94:	4a61      	ldr	r2, [pc, #388]	; (2c1c <sysclk_enable_peripheral_clock+0x350>)
    2a96:	4293      	cmp	r3, r2
    2a98:	f000 811f 	beq.w	2cda <sysclk_enable_peripheral_clock+0x40e>
		return;
    2a9c:	e121      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
    2a9e:	2009      	movs	r0, #9
    2aa0:	4b5f      	ldr	r3, [pc, #380]	; (2c20 <sysclk_enable_peripheral_clock+0x354>)
    2aa2:	4798      	blx	r3
		break;
    2aa4:	e11d      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_IISC);
    2aa6:	2000      	movs	r0, #0
    2aa8:	4b5e      	ldr	r3, [pc, #376]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2aaa:	4798      	blx	r3
		break;
    2aac:	e119      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_SPI);
    2aae:	2001      	movs	r0, #1
    2ab0:	4b5c      	ldr	r3, [pc, #368]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2ab2:	4798      	blx	r3
		break;
    2ab4:	e115      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TC0);
    2ab6:	2002      	movs	r0, #2
    2ab8:	4b5a      	ldr	r3, [pc, #360]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2aba:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_TIMER_CLOCK2
    2abc:	2055      	movs	r0, #85	; 0x55
    2abe:	4b5a      	ldr	r3, [pc, #360]	; (2c28 <sysclk_enable_peripheral_clock+0x35c>)
    2ac0:	4798      	blx	r3
		break;
    2ac2:	e10e      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TC1);
    2ac4:	2003      	movs	r0, #3
    2ac6:	4b57      	ldr	r3, [pc, #348]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2ac8:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_TIMER_CLOCK2
    2aca:	2055      	movs	r0, #85	; 0x55
    2acc:	4b56      	ldr	r3, [pc, #344]	; (2c28 <sysclk_enable_peripheral_clock+0x35c>)
    2ace:	4798      	blx	r3
		break;
    2ad0:	e107      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    2ad2:	2004      	movs	r0, #4
    2ad4:	4b53      	ldr	r3, [pc, #332]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2ad6:	4798      	blx	r3
		break;
    2ad8:	e103      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    2ada:	2005      	movs	r0, #5
    2adc:	4b51      	ldr	r3, [pc, #324]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2ade:	4798      	blx	r3
		break;
    2ae0:	e0ff      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    2ae2:	2006      	movs	r0, #6
    2ae4:	4b4f      	ldr	r3, [pc, #316]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2ae6:	4798      	blx	r3
		break;
    2ae8:	e0fb      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    2aea:	2007      	movs	r0, #7
    2aec:	4b4d      	ldr	r3, [pc, #308]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2aee:	4798      	blx	r3
		break;
    2af0:	e0f7      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART0);
    2af2:	2008      	movs	r0, #8
    2af4:	4b4b      	ldr	r3, [pc, #300]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2af6:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    2af8:	2004      	movs	r0, #4
    2afa:	4b4b      	ldr	r3, [pc, #300]	; (2c28 <sysclk_enable_peripheral_clock+0x35c>)
    2afc:	4798      	blx	r3
		break;
    2afe:	e0f0      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART1);
    2b00:	2009      	movs	r0, #9
    2b02:	4b48      	ldr	r3, [pc, #288]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b04:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    2b06:	2004      	movs	r0, #4
    2b08:	4b47      	ldr	r3, [pc, #284]	; (2c28 <sysclk_enable_peripheral_clock+0x35c>)
    2b0a:	4798      	blx	r3
		break;
    2b0c:	e0e9      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART2);
    2b0e:	200a      	movs	r0, #10
    2b10:	4b44      	ldr	r3, [pc, #272]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b12:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    2b14:	2004      	movs	r0, #4
    2b16:	4b44      	ldr	r3, [pc, #272]	; (2c28 <sysclk_enable_peripheral_clock+0x35c>)
    2b18:	4798      	blx	r3
		break;
    2b1a:	e0e2      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART3);
    2b1c:	200b      	movs	r0, #11
    2b1e:	4b41      	ldr	r3, [pc, #260]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b20:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    2b22:	2004      	movs	r0, #4
    2b24:	4b40      	ldr	r3, [pc, #256]	; (2c28 <sysclk_enable_peripheral_clock+0x35c>)
    2b26:	4798      	blx	r3
		break;
    2b28:	e0db      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    2b2a:	200c      	movs	r0, #12
    2b2c:	4b3d      	ldr	r3, [pc, #244]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b2e:	4798      	blx	r3
		break;
    2b30:	e0d7      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_DACC);
    2b32:	200d      	movs	r0, #13
    2b34:	4b3b      	ldr	r3, [pc, #236]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b36:	4798      	blx	r3
		break;
    2b38:	e0d3      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    2b3a:	200e      	movs	r0, #14
    2b3c:	4b39      	ldr	r3, [pc, #228]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b3e:	4798      	blx	r3
		break;
    2b40:	e0cf      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_GLOC);
    2b42:	200f      	movs	r0, #15
    2b44:	4b37      	ldr	r3, [pc, #220]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b46:	4798      	blx	r3
		break;
    2b48:	e0cb      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    2b4a:	2010      	movs	r0, #16
    2b4c:	4b35      	ldr	r3, [pc, #212]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b4e:	4798      	blx	r3
		break;
    2b50:	e0c7      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TRNG);
    2b52:	2011      	movs	r0, #17
    2b54:	4b33      	ldr	r3, [pc, #204]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b56:	4798      	blx	r3
		break;
    2b58:	e0c3      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_PARC);
    2b5a:	2012      	movs	r0, #18
    2b5c:	4b31      	ldr	r3, [pc, #196]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b5e:	4798      	blx	r3
		break;
    2b60:	e0bf      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_CATB);
    2b62:	2013      	movs	r0, #19
    2b64:	4b2f      	ldr	r3, [pc, #188]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b66:	4798      	blx	r3
		break;
    2b68:	e0bb      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    2b6a:	2015      	movs	r0, #21
    2b6c:	4b2d      	ldr	r3, [pc, #180]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b6e:	4798      	blx	r3
		break;
    2b70:	e0b7      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    2b72:	2016      	movs	r0, #22
    2b74:	4b2b      	ldr	r3, [pc, #172]	; (2c24 <sysclk_enable_peripheral_clock+0x358>)
    2b76:	4798      	blx	r3
		break;
    2b78:	e0b3      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
    2b7a:	bf00      	nop
    2b7c:	40078000 	.word	0x40078000
    2b80:	40028000 	.word	0x40028000
    2b84:	40018000 	.word	0x40018000
    2b88:	40008000 	.word	0x40008000
    2b8c:	40010000 	.word	0x40010000
    2b90:	40014000 	.word	0x40014000
    2b94:	4001c000 	.word	0x4001c000
    2b98:	40018400 	.word	0x40018400
    2b9c:	4001c400 	.word	0x4001c400
    2ba0:	40024000 	.word	0x40024000
    2ba4:	40040000 	.word	0x40040000
    2ba8:	40030000 	.word	0x40030000
    2bac:	4002c000 	.word	0x4002c000
    2bb0:	40038000 	.word	0x40038000
    2bb4:	4003c000 	.word	0x4003c000
    2bb8:	40068000 	.word	0x40068000
    2bbc:	40060000 	.word	0x40060000
    2bc0:	40064000 	.word	0x40064000
    2bc4:	4006c000 	.word	0x4006c000
    2bc8:	40070000 	.word	0x40070000
    2bcc:	400e0000 	.word	0x400e0000
    2bd0:	400a1000 	.word	0x400a1000
    2bd4:	40080000 	.word	0x40080000
    2bd8:	4007c000 	.word	0x4007c000
    2bdc:	400a0000 	.word	0x400a0000
    2be0:	400a0400 	.word	0x400a0400
    2be4:	400a5000 	.word	0x400a5000
    2be8:	400a2000 	.word	0x400a2000
    2bec:	400a4000 	.word	0x400a4000
    2bf0:	400a6000 	.word	0x400a6000
    2bf4:	400b0000 	.word	0x400b0000
    2bf8:	400f0000 	.word	0x400f0000
    2bfc:	400e0800 	.word	0x400e0800
    2c00:	400e0400 	.word	0x400e0400
    2c04:	400e0c00 	.word	0x400e0c00
    2c08:	400e1000 	.word	0x400e1000
    2c0c:	400f0c00 	.word	0x400f0c00
    2c10:	400f0400 	.word	0x400f0400
    2c14:	400f0800 	.word	0x400f0800
    2c18:	400f1000 	.word	0x400f1000
    2c1c:	400f1400 	.word	0x400f1400
    2c20:	000025c9 	.word	0x000025c9
    2c24:	000027ad 	.word	0x000027ad
    2c28:	00002671 	.word	0x00002671
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    2c2c:	2017      	movs	r0, #23
    2c2e:	4b2e      	ldr	r3, [pc, #184]	; (2ce8 <sysclk_enable_peripheral_clock+0x41c>)
    2c30:	4798      	blx	r3
		break;
    2c32:	e056      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
    2c34:	2001      	movs	r0, #1
    2c36:	4b2d      	ldr	r3, [pc, #180]	; (2cec <sysclk_enable_peripheral_clock+0x420>)
    2c38:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    2c3a:	2000      	movs	r0, #0
    2c3c:	4b2c      	ldr	r3, [pc, #176]	; (2cf0 <sysclk_enable_peripheral_clock+0x424>)
    2c3e:	4798      	blx	r3
		break;
    2c40:	e04f      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
    2c42:	2002      	movs	r0, #2
    2c44:	4b29      	ldr	r3, [pc, #164]	; (2cec <sysclk_enable_peripheral_clock+0x420>)
    2c46:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    2c48:	2001      	movs	r0, #1
    2c4a:	4b29      	ldr	r3, [pc, #164]	; (2cf0 <sysclk_enable_peripheral_clock+0x424>)
    2c4c:	4798      	blx	r3
		break;
    2c4e:	e048      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    2c50:	2002      	movs	r0, #2
    2c52:	4b27      	ldr	r3, [pc, #156]	; (2cf0 <sysclk_enable_peripheral_clock+0x424>)
    2c54:	4798      	blx	r3
		break;
    2c56:	e044      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
    2c58:	2000      	movs	r0, #0
    2c5a:	4b24      	ldr	r3, [pc, #144]	; (2cec <sysclk_enable_peripheral_clock+0x420>)
    2c5c:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    2c5e:	2003      	movs	r0, #3
    2c60:	4b23      	ldr	r3, [pc, #140]	; (2cf0 <sysclk_enable_peripheral_clock+0x424>)
    2c62:	4798      	blx	r3
		break;
    2c64:	e03d      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
    2c66:	2004      	movs	r0, #4
    2c68:	4b20      	ldr	r3, [pc, #128]	; (2cec <sysclk_enable_peripheral_clock+0x420>)
    2c6a:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    2c6c:	2004      	movs	r0, #4
    2c6e:	4b20      	ldr	r3, [pc, #128]	; (2cf0 <sysclk_enable_peripheral_clock+0x424>)
    2c70:	4798      	blx	r3
		break;
    2c72:	e036      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
    2c74:	2003      	movs	r0, #3
    2c76:	4b1d      	ldr	r3, [pc, #116]	; (2cec <sysclk_enable_peripheral_clock+0x420>)
    2c78:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    2c7a:	2005      	movs	r0, #5
    2c7c:	4b1c      	ldr	r3, [pc, #112]	; (2cf0 <sysclk_enable_peripheral_clock+0x424>)
    2c7e:	4798      	blx	r3
		break;
    2c80:	e02f      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    2c82:	2006      	movs	r0, #6
    2c84:	4b1a      	ldr	r3, [pc, #104]	; (2cf0 <sysclk_enable_peripheral_clock+0x424>)
    2c86:	4798      	blx	r3
		break;
    2c88:	e02b      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_PM);
    2c8a:	2000      	movs	r0, #0
    2c8c:	4b19      	ldr	r3, [pc, #100]	; (2cf4 <sysclk_enable_peripheral_clock+0x428>)
    2c8e:	4798      	blx	r3
		break;
    2c90:	e027      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_CHIPID);
    2c92:	2001      	movs	r0, #1
    2c94:	4b17      	ldr	r3, [pc, #92]	; (2cf4 <sysclk_enable_peripheral_clock+0x428>)
    2c96:	4798      	blx	r3
		break;
    2c98:	e023      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_SCIF);
    2c9a:	2002      	movs	r0, #2
    2c9c:	4b15      	ldr	r3, [pc, #84]	; (2cf4 <sysclk_enable_peripheral_clock+0x428>)
    2c9e:	4798      	blx	r3
		break;
    2ca0:	e01f      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_FREQM);
    2ca2:	2003      	movs	r0, #3
    2ca4:	4b13      	ldr	r3, [pc, #76]	; (2cf4 <sysclk_enable_peripheral_clock+0x428>)
    2ca6:	4798      	blx	r3
		break;
    2ca8:	e01b      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_GPIO);
    2caa:	2004      	movs	r0, #4
    2cac:	4b11      	ldr	r3, [pc, #68]	; (2cf4 <sysclk_enable_peripheral_clock+0x428>)
    2cae:	4798      	blx	r3
		break;
    2cb0:	e017      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_BPM);
    2cb2:	2000      	movs	r0, #0
    2cb4:	4b10      	ldr	r3, [pc, #64]	; (2cf8 <sysclk_enable_peripheral_clock+0x42c>)
    2cb6:	4798      	blx	r3
		break;
    2cb8:	e013      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_BSCIF);
    2cba:	2001      	movs	r0, #1
    2cbc:	4b0e      	ldr	r3, [pc, #56]	; (2cf8 <sysclk_enable_peripheral_clock+0x42c>)
    2cbe:	4798      	blx	r3
		break;
    2cc0:	e00f      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_AST);
    2cc2:	2002      	movs	r0, #2
    2cc4:	4b0c      	ldr	r3, [pc, #48]	; (2cf8 <sysclk_enable_peripheral_clock+0x42c>)
    2cc6:	4798      	blx	r3
		break;
    2cc8:	e00b      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_WDT);
    2cca:	2003      	movs	r0, #3
    2ccc:	4b0a      	ldr	r3, [pc, #40]	; (2cf8 <sysclk_enable_peripheral_clock+0x42c>)
    2cce:	4798      	blx	r3
		break;
    2cd0:	e007      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_EIC);
    2cd2:	2004      	movs	r0, #4
    2cd4:	4b08      	ldr	r3, [pc, #32]	; (2cf8 <sysclk_enable_peripheral_clock+0x42c>)
    2cd6:	4798      	blx	r3
		break;
    2cd8:	e003      	b.n	2ce2 <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
    2cda:	2005      	movs	r0, #5
    2cdc:	4b06      	ldr	r3, [pc, #24]	; (2cf8 <sysclk_enable_peripheral_clock+0x42c>)
    2cde:	4798      	blx	r3
		break;
    2ce0:	bf00      	nop
	}
}
    2ce2:	3708      	adds	r7, #8
    2ce4:	46bd      	mov	sp, r7
    2ce6:	bd80      	pop	{r7, pc}
    2ce8:	000027ad 	.word	0x000027ad
    2cec:	000025c9 	.word	0x000025c9
    2cf0:	0000283d 	.word	0x0000283d
    2cf4:	00002601 	.word	0x00002601
    2cf8:	00002639 	.word	0x00002639

00002cfc <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    2cfc:	b580      	push	{r7, lr}
    2cfe:	b082      	sub	sp, #8
    2d00:	af00      	add	r7, sp, #0
    2d02:	6078      	str	r0, [r7, #4]
	switch ((uintptr_t)module) {
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	4aa7      	ldr	r2, [pc, #668]	; (2fa4 <sysclk_disable_peripheral_clock+0x2a8>)
    2d08:	4293      	cmp	r3, r2
    2d0a:	f000 8134 	beq.w	2f76 <sysclk_disable_peripheral_clock+0x27a>
    2d0e:	4aa5      	ldr	r2, [pc, #660]	; (2fa4 <sysclk_disable_peripheral_clock+0x2a8>)
    2d10:	4293      	cmp	r3, r2
    2d12:	d86c      	bhi.n	2dee <sysclk_disable_peripheral_clock+0xf2>
    2d14:	4aa4      	ldr	r2, [pc, #656]	; (2fa8 <sysclk_disable_peripheral_clock+0x2ac>)
    2d16:	4293      	cmp	r3, r2
    2d18:	f000 8101 	beq.w	2f1e <sysclk_disable_peripheral_clock+0x222>
    2d1c:	4aa2      	ldr	r2, [pc, #648]	; (2fa8 <sysclk_disable_peripheral_clock+0x2ac>)
    2d1e:	4293      	cmp	r3, r2
    2d20:	d830      	bhi.n	2d84 <sysclk_disable_peripheral_clock+0x88>
    2d22:	4aa2      	ldr	r2, [pc, #648]	; (2fac <sysclk_disable_peripheral_clock+0x2b0>)
    2d24:	4293      	cmp	r3, r2
    2d26:	f000 80e6 	beq.w	2ef6 <sysclk_disable_peripheral_clock+0x1fa>
    2d2a:	4aa0      	ldr	r2, [pc, #640]	; (2fac <sysclk_disable_peripheral_clock+0x2b0>)
    2d2c:	4293      	cmp	r3, r2
    2d2e:	d814      	bhi.n	2d5a <sysclk_disable_peripheral_clock+0x5e>
    2d30:	4a9f      	ldr	r2, [pc, #636]	; (2fb0 <sysclk_disable_peripheral_clock+0x2b4>)
    2d32:	4293      	cmp	r3, r2
    2d34:	f000 80d3 	beq.w	2ede <sysclk_disable_peripheral_clock+0x1e2>
    2d38:	4a9d      	ldr	r2, [pc, #628]	; (2fb0 <sysclk_disable_peripheral_clock+0x2b4>)
    2d3a:	4293      	cmp	r3, r2
    2d3c:	d804      	bhi.n	2d48 <sysclk_disable_peripheral_clock+0x4c>
    2d3e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    2d42:	f000 80c8 	beq.w	2ed6 <sysclk_disable_peripheral_clock+0x1da>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    2d46:	e1d8      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2d48:	4a9a      	ldr	r2, [pc, #616]	; (2fb4 <sysclk_disable_peripheral_clock+0x2b8>)
    2d4a:	4293      	cmp	r3, r2
    2d4c:	f000 80cb 	beq.w	2ee6 <sysclk_disable_peripheral_clock+0x1ea>
    2d50:	4a99      	ldr	r2, [pc, #612]	; (2fb8 <sysclk_disable_peripheral_clock+0x2bc>)
    2d52:	4293      	cmp	r3, r2
    2d54:	f000 80cb 	beq.w	2eee <sysclk_disable_peripheral_clock+0x1f2>
		return;
    2d58:	e1cf      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2d5a:	4a98      	ldr	r2, [pc, #608]	; (2fbc <sysclk_disable_peripheral_clock+0x2c0>)
    2d5c:	4293      	cmp	r3, r2
    2d5e:	f000 80d2 	beq.w	2f06 <sysclk_disable_peripheral_clock+0x20a>
    2d62:	4a96      	ldr	r2, [pc, #600]	; (2fbc <sysclk_disable_peripheral_clock+0x2c0>)
    2d64:	4293      	cmp	r3, r2
    2d66:	d804      	bhi.n	2d72 <sysclk_disable_peripheral_clock+0x76>
    2d68:	4a95      	ldr	r2, [pc, #596]	; (2fc0 <sysclk_disable_peripheral_clock+0x2c4>)
    2d6a:	4293      	cmp	r3, r2
    2d6c:	f000 80c7 	beq.w	2efe <sysclk_disable_peripheral_clock+0x202>
		return;
    2d70:	e1c3      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2d72:	4a94      	ldr	r2, [pc, #592]	; (2fc4 <sysclk_disable_peripheral_clock+0x2c8>)
    2d74:	4293      	cmp	r3, r2
    2d76:	f000 80ca 	beq.w	2f0e <sysclk_disable_peripheral_clock+0x212>
    2d7a:	4a93      	ldr	r2, [pc, #588]	; (2fc8 <sysclk_disable_peripheral_clock+0x2cc>)
    2d7c:	4293      	cmp	r3, r2
    2d7e:	f000 80ca 	beq.w	2f16 <sysclk_disable_peripheral_clock+0x21a>
		return;
    2d82:	e1ba      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2d84:	4a91      	ldr	r2, [pc, #580]	; (2fcc <sysclk_disable_peripheral_clock+0x2d0>)
    2d86:	4293      	cmp	r3, r2
    2d88:	f000 80dd 	beq.w	2f46 <sysclk_disable_peripheral_clock+0x24a>
    2d8c:	4a8f      	ldr	r2, [pc, #572]	; (2fcc <sysclk_disable_peripheral_clock+0x2d0>)
    2d8e:	4293      	cmp	r3, r2
    2d90:	d814      	bhi.n	2dbc <sysclk_disable_peripheral_clock+0xc0>
    2d92:	4a8f      	ldr	r2, [pc, #572]	; (2fd0 <sysclk_disable_peripheral_clock+0x2d4>)
    2d94:	4293      	cmp	r3, r2
    2d96:	f000 80ca 	beq.w	2f2e <sysclk_disable_peripheral_clock+0x232>
    2d9a:	4a8d      	ldr	r2, [pc, #564]	; (2fd0 <sysclk_disable_peripheral_clock+0x2d4>)
    2d9c:	4293      	cmp	r3, r2
    2d9e:	d804      	bhi.n	2daa <sysclk_disable_peripheral_clock+0xae>
    2da0:	4a8c      	ldr	r2, [pc, #560]	; (2fd4 <sysclk_disable_peripheral_clock+0x2d8>)
    2da2:	4293      	cmp	r3, r2
    2da4:	f000 80bf 	beq.w	2f26 <sysclk_disable_peripheral_clock+0x22a>
		return;
    2da8:	e1a7      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2daa:	4a8b      	ldr	r2, [pc, #556]	; (2fd8 <sysclk_disable_peripheral_clock+0x2dc>)
    2dac:	4293      	cmp	r3, r2
    2dae:	f000 80c2 	beq.w	2f36 <sysclk_disable_peripheral_clock+0x23a>
    2db2:	4a8a      	ldr	r2, [pc, #552]	; (2fdc <sysclk_disable_peripheral_clock+0x2e0>)
    2db4:	4293      	cmp	r3, r2
    2db6:	f000 80c2 	beq.w	2f3e <sysclk_disable_peripheral_clock+0x242>
		return;
    2dba:	e19e      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2dbc:	4a88      	ldr	r2, [pc, #544]	; (2fe0 <sysclk_disable_peripheral_clock+0x2e4>)
    2dbe:	4293      	cmp	r3, r2
    2dc0:	f000 80cd 	beq.w	2f5e <sysclk_disable_peripheral_clock+0x262>
    2dc4:	4a86      	ldr	r2, [pc, #536]	; (2fe0 <sysclk_disable_peripheral_clock+0x2e4>)
    2dc6:	4293      	cmp	r3, r2
    2dc8:	d808      	bhi.n	2ddc <sysclk_disable_peripheral_clock+0xe0>
    2dca:	4a86      	ldr	r2, [pc, #536]	; (2fe4 <sysclk_disable_peripheral_clock+0x2e8>)
    2dcc:	4293      	cmp	r3, r2
    2dce:	f000 80be 	beq.w	2f4e <sysclk_disable_peripheral_clock+0x252>
    2dd2:	4a85      	ldr	r2, [pc, #532]	; (2fe8 <sysclk_disable_peripheral_clock+0x2ec>)
    2dd4:	4293      	cmp	r3, r2
    2dd6:	f000 80be 	beq.w	2f56 <sysclk_disable_peripheral_clock+0x25a>
		return;
    2dda:	e18e      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2ddc:	4a83      	ldr	r2, [pc, #524]	; (2fec <sysclk_disable_peripheral_clock+0x2f0>)
    2dde:	4293      	cmp	r3, r2
    2de0:	f000 80c1 	beq.w	2f66 <sysclk_disable_peripheral_clock+0x26a>
    2de4:	4a82      	ldr	r2, [pc, #520]	; (2ff0 <sysclk_disable_peripheral_clock+0x2f4>)
    2de6:	4293      	cmp	r3, r2
    2de8:	f000 80c1 	beq.w	2f6e <sysclk_disable_peripheral_clock+0x272>
		return;
    2dec:	e185      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2dee:	4a81      	ldr	r2, [pc, #516]	; (2ff4 <sysclk_disable_peripheral_clock+0x2f8>)
    2df0:	4293      	cmp	r3, r2
    2df2:	f000 814c 	beq.w	308e <sysclk_disable_peripheral_clock+0x392>
    2df6:	4a7f      	ldr	r2, [pc, #508]	; (2ff4 <sysclk_disable_peripheral_clock+0x2f8>)
    2df8:	4293      	cmp	r3, r2
    2dfa:	d833      	bhi.n	2e64 <sysclk_disable_peripheral_clock+0x168>
    2dfc:	4a7e      	ldr	r2, [pc, #504]	; (2ff8 <sysclk_disable_peripheral_clock+0x2fc>)
    2dfe:	4293      	cmp	r3, r2
    2e00:	f000 8128 	beq.w	3054 <sysclk_disable_peripheral_clock+0x358>
    2e04:	4a7c      	ldr	r2, [pc, #496]	; (2ff8 <sysclk_disable_peripheral_clock+0x2fc>)
    2e06:	4293      	cmp	r3, r2
    2e08:	d814      	bhi.n	2e34 <sysclk_disable_peripheral_clock+0x138>
    2e0a:	4a7c      	ldr	r2, [pc, #496]	; (2ffc <sysclk_disable_peripheral_clock+0x300>)
    2e0c:	4293      	cmp	r3, r2
    2e0e:	f000 80ba 	beq.w	2f86 <sysclk_disable_peripheral_clock+0x28a>
    2e12:	4a7a      	ldr	r2, [pc, #488]	; (2ffc <sysclk_disable_peripheral_clock+0x300>)
    2e14:	4293      	cmp	r3, r2
    2e16:	d804      	bhi.n	2e22 <sysclk_disable_peripheral_clock+0x126>
    2e18:	4a79      	ldr	r2, [pc, #484]	; (3000 <sysclk_disable_peripheral_clock+0x304>)
    2e1a:	4293      	cmp	r3, r2
    2e1c:	f000 80af 	beq.w	2f7e <sysclk_disable_peripheral_clock+0x282>
		return;
    2e20:	e16b      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2e22:	4a78      	ldr	r2, [pc, #480]	; (3004 <sysclk_disable_peripheral_clock+0x308>)
    2e24:	4293      	cmp	r3, r2
    2e26:	f000 80b2 	beq.w	2f8e <sysclk_disable_peripheral_clock+0x292>
    2e2a:	4a77      	ldr	r2, [pc, #476]	; (3008 <sysclk_disable_peripheral_clock+0x30c>)
    2e2c:	4293      	cmp	r3, r2
    2e2e:	f000 80b2 	beq.w	2f96 <sysclk_disable_peripheral_clock+0x29a>
		return;
    2e32:	e162      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2e34:	4a75      	ldr	r2, [pc, #468]	; (300c <sysclk_disable_peripheral_clock+0x310>)
    2e36:	4293      	cmp	r3, r2
    2e38:	f000 811e 	beq.w	3078 <sysclk_disable_peripheral_clock+0x37c>
    2e3c:	4a73      	ldr	r2, [pc, #460]	; (300c <sysclk_disable_peripheral_clock+0x310>)
    2e3e:	4293      	cmp	r3, r2
    2e40:	d808      	bhi.n	2e54 <sysclk_disable_peripheral_clock+0x158>
    2e42:	4a73      	ldr	r2, [pc, #460]	; (3010 <sysclk_disable_peripheral_clock+0x314>)
    2e44:	4293      	cmp	r3, r2
    2e46:	f000 8109 	beq.w	305c <sysclk_disable_peripheral_clock+0x360>
    2e4a:	4a72      	ldr	r2, [pc, #456]	; (3014 <sysclk_disable_peripheral_clock+0x318>)
    2e4c:	4293      	cmp	r3, r2
    2e4e:	f000 810c 	beq.w	306a <sysclk_disable_peripheral_clock+0x36e>
		return;
    2e52:	e152      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2e54:	4a70      	ldr	r2, [pc, #448]	; (3018 <sysclk_disable_peripheral_clock+0x31c>)
    2e56:	4293      	cmp	r3, r2
    2e58:	f000 8115 	beq.w	3086 <sysclk_disable_peripheral_clock+0x38a>
    2e5c:	4a6f      	ldr	r2, [pc, #444]	; (301c <sysclk_disable_peripheral_clock+0x320>)
    2e5e:	4293      	cmp	r3, r2
    2e60:	d035      	beq.n	2ece <sysclk_disable_peripheral_clock+0x1d2>
		return;
    2e62:	e14a      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2e64:	4a6e      	ldr	r2, [pc, #440]	; (3020 <sysclk_disable_peripheral_clock+0x324>)
    2e66:	4293      	cmp	r3, r2
    2e68:	f000 8125 	beq.w	30b6 <sysclk_disable_peripheral_clock+0x3ba>
    2e6c:	4a6c      	ldr	r2, [pc, #432]	; (3020 <sysclk_disable_peripheral_clock+0x324>)
    2e6e:	4293      	cmp	r3, r2
    2e70:	d814      	bhi.n	2e9c <sysclk_disable_peripheral_clock+0x1a0>
    2e72:	4a6c      	ldr	r2, [pc, #432]	; (3024 <sysclk_disable_peripheral_clock+0x328>)
    2e74:	4293      	cmp	r3, r2
    2e76:	f000 8112 	beq.w	309e <sysclk_disable_peripheral_clock+0x3a2>
    2e7a:	4a6a      	ldr	r2, [pc, #424]	; (3024 <sysclk_disable_peripheral_clock+0x328>)
    2e7c:	4293      	cmp	r3, r2
    2e7e:	d804      	bhi.n	2e8a <sysclk_disable_peripheral_clock+0x18e>
    2e80:	4a69      	ldr	r2, [pc, #420]	; (3028 <sysclk_disable_peripheral_clock+0x32c>)
    2e82:	4293      	cmp	r3, r2
    2e84:	f000 8107 	beq.w	3096 <sysclk_disable_peripheral_clock+0x39a>
		return;
    2e88:	e137      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2e8a:	4a68      	ldr	r2, [pc, #416]	; (302c <sysclk_disable_peripheral_clock+0x330>)
    2e8c:	4293      	cmp	r3, r2
    2e8e:	f000 810a 	beq.w	30a6 <sysclk_disable_peripheral_clock+0x3aa>
    2e92:	4a67      	ldr	r2, [pc, #412]	; (3030 <sysclk_disable_peripheral_clock+0x334>)
    2e94:	4293      	cmp	r3, r2
    2e96:	f000 810a 	beq.w	30ae <sysclk_disable_peripheral_clock+0x3b2>
		return;
    2e9a:	e12e      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2e9c:	4a65      	ldr	r2, [pc, #404]	; (3034 <sysclk_disable_peripheral_clock+0x338>)
    2e9e:	4293      	cmp	r3, r2
    2ea0:	f000 8115 	beq.w	30ce <sysclk_disable_peripheral_clock+0x3d2>
    2ea4:	4a63      	ldr	r2, [pc, #396]	; (3034 <sysclk_disable_peripheral_clock+0x338>)
    2ea6:	4293      	cmp	r3, r2
    2ea8:	d808      	bhi.n	2ebc <sysclk_disable_peripheral_clock+0x1c0>
    2eaa:	4a63      	ldr	r2, [pc, #396]	; (3038 <sysclk_disable_peripheral_clock+0x33c>)
    2eac:	4293      	cmp	r3, r2
    2eae:	f000 8106 	beq.w	30be <sysclk_disable_peripheral_clock+0x3c2>
    2eb2:	4a62      	ldr	r2, [pc, #392]	; (303c <sysclk_disable_peripheral_clock+0x340>)
    2eb4:	4293      	cmp	r3, r2
    2eb6:	f000 8106 	beq.w	30c6 <sysclk_disable_peripheral_clock+0x3ca>
		return;
    2eba:	e11e      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    2ebc:	4a60      	ldr	r2, [pc, #384]	; (3040 <sysclk_disable_peripheral_clock+0x344>)
    2ebe:	4293      	cmp	r3, r2
    2ec0:	f000 8109 	beq.w	30d6 <sysclk_disable_peripheral_clock+0x3da>
    2ec4:	4a5f      	ldr	r2, [pc, #380]	; (3044 <sysclk_disable_peripheral_clock+0x348>)
    2ec6:	4293      	cmp	r3, r2
    2ec8:	f000 8109 	beq.w	30de <sysclk_disable_peripheral_clock+0x3e2>
		return;
    2ecc:	e115      	b.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
    2ece:	2009      	movs	r0, #9
    2ed0:	4b5d      	ldr	r3, [pc, #372]	; (3048 <sysclk_disable_peripheral_clock+0x34c>)
    2ed2:	4798      	blx	r3
		break;
    2ed4:	e107      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_IISC);
    2ed6:	2000      	movs	r0, #0
    2ed8:	4b5c      	ldr	r3, [pc, #368]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2eda:	4798      	blx	r3
		break;
    2edc:	e103      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_SPI);
    2ede:	2001      	movs	r0, #1
    2ee0:	4b5a      	ldr	r3, [pc, #360]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2ee2:	4798      	blx	r3
		break;
    2ee4:	e0ff      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TC0);
    2ee6:	2002      	movs	r0, #2
    2ee8:	4b58      	ldr	r3, [pc, #352]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2eea:	4798      	blx	r3
		break;
    2eec:	e0fb      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TC1);
    2eee:	2003      	movs	r0, #3
    2ef0:	4b56      	ldr	r3, [pc, #344]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2ef2:	4798      	blx	r3
		break;
    2ef4:	e0f7      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    2ef6:	2004      	movs	r0, #4
    2ef8:	4b54      	ldr	r3, [pc, #336]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2efa:	4798      	blx	r3
		break;
    2efc:	e0f3      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    2efe:	2005      	movs	r0, #5
    2f00:	4b52      	ldr	r3, [pc, #328]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f02:	4798      	blx	r3
		break;
    2f04:	e0ef      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    2f06:	2006      	movs	r0, #6
    2f08:	4b50      	ldr	r3, [pc, #320]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f0a:	4798      	blx	r3
		break;
    2f0c:	e0eb      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    2f0e:	2007      	movs	r0, #7
    2f10:	4b4e      	ldr	r3, [pc, #312]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f12:	4798      	blx	r3
		break;
    2f14:	e0e7      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART0);
    2f16:	2008      	movs	r0, #8
    2f18:	4b4c      	ldr	r3, [pc, #304]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f1a:	4798      	blx	r3
		break;
    2f1c:	e0e3      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART1);
    2f1e:	2009      	movs	r0, #9
    2f20:	4b4a      	ldr	r3, [pc, #296]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f22:	4798      	blx	r3
		break;
    2f24:	e0df      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART2);
    2f26:	200a      	movs	r0, #10
    2f28:	4b48      	ldr	r3, [pc, #288]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f2a:	4798      	blx	r3
		break;
    2f2c:	e0db      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART3);
    2f2e:	200b      	movs	r0, #11
    2f30:	4b46      	ldr	r3, [pc, #280]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f32:	4798      	blx	r3
		break;
    2f34:	e0d7      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    2f36:	200c      	movs	r0, #12
    2f38:	4b44      	ldr	r3, [pc, #272]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f3a:	4798      	blx	r3
		break;
    2f3c:	e0d3      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_DACC);
    2f3e:	200d      	movs	r0, #13
    2f40:	4b42      	ldr	r3, [pc, #264]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f42:	4798      	blx	r3
		break;
    2f44:	e0cf      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    2f46:	200e      	movs	r0, #14
    2f48:	4b40      	ldr	r3, [pc, #256]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f4a:	4798      	blx	r3
		break;
    2f4c:	e0cb      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_GLOC);
    2f4e:	200f      	movs	r0, #15
    2f50:	4b3e      	ldr	r3, [pc, #248]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f52:	4798      	blx	r3
		break;
    2f54:	e0c7      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    2f56:	2010      	movs	r0, #16
    2f58:	4b3c      	ldr	r3, [pc, #240]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f5a:	4798      	blx	r3
		break;
    2f5c:	e0c3      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TRNG);
    2f5e:	2011      	movs	r0, #17
    2f60:	4b3a      	ldr	r3, [pc, #232]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f62:	4798      	blx	r3
		break;
    2f64:	e0bf      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_PARC);
    2f66:	2012      	movs	r0, #18
    2f68:	4b38      	ldr	r3, [pc, #224]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f6a:	4798      	blx	r3
		break;
    2f6c:	e0bb      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_CATB);
    2f6e:	2013      	movs	r0, #19
    2f70:	4b36      	ldr	r3, [pc, #216]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f72:	4798      	blx	r3
		break;
    2f74:	e0b7      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    2f76:	2015      	movs	r0, #21
    2f78:	4b34      	ldr	r3, [pc, #208]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f7a:	4798      	blx	r3
		break;
    2f7c:	e0b3      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    2f7e:	2016      	movs	r0, #22
    2f80:	4b32      	ldr	r3, [pc, #200]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f82:	4798      	blx	r3
		break;
    2f84:	e0af      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    2f86:	2017      	movs	r0, #23
    2f88:	4b30      	ldr	r3, [pc, #192]	; (304c <sysclk_disable_peripheral_clock+0x350>)
    2f8a:	4798      	blx	r3
		break;
    2f8c:	e0ab      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    2f8e:	2000      	movs	r0, #0
    2f90:	4b2f      	ldr	r3, [pc, #188]	; (3050 <sysclk_disable_peripheral_clock+0x354>)
    2f92:	4798      	blx	r3
		break;
    2f94:	e0a7      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
    2f96:	2002      	movs	r0, #2
    2f98:	4b2b      	ldr	r3, [pc, #172]	; (3048 <sysclk_disable_peripheral_clock+0x34c>)
    2f9a:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    2f9c:	2001      	movs	r0, #1
    2f9e:	4b2c      	ldr	r3, [pc, #176]	; (3050 <sysclk_disable_peripheral_clock+0x354>)
    2fa0:	4798      	blx	r3
		break;
    2fa2:	e0a0      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
    2fa4:	40078000 	.word	0x40078000
    2fa8:	40028000 	.word	0x40028000
    2fac:	40018000 	.word	0x40018000
    2fb0:	40008000 	.word	0x40008000
    2fb4:	40010000 	.word	0x40010000
    2fb8:	40014000 	.word	0x40014000
    2fbc:	4001c000 	.word	0x4001c000
    2fc0:	40018400 	.word	0x40018400
    2fc4:	4001c400 	.word	0x4001c400
    2fc8:	40024000 	.word	0x40024000
    2fcc:	40040000 	.word	0x40040000
    2fd0:	40030000 	.word	0x40030000
    2fd4:	4002c000 	.word	0x4002c000
    2fd8:	40038000 	.word	0x40038000
    2fdc:	4003c000 	.word	0x4003c000
    2fe0:	40068000 	.word	0x40068000
    2fe4:	40060000 	.word	0x40060000
    2fe8:	40064000 	.word	0x40064000
    2fec:	4006c000 	.word	0x4006c000
    2ff0:	40070000 	.word	0x40070000
    2ff4:	400e0000 	.word	0x400e0000
    2ff8:	400a1000 	.word	0x400a1000
    2ffc:	40080000 	.word	0x40080000
    3000:	4007c000 	.word	0x4007c000
    3004:	400a0000 	.word	0x400a0000
    3008:	400a0400 	.word	0x400a0400
    300c:	400a5000 	.word	0x400a5000
    3010:	400a2000 	.word	0x400a2000
    3014:	400a4000 	.word	0x400a4000
    3018:	400a6000 	.word	0x400a6000
    301c:	400b0000 	.word	0x400b0000
    3020:	400f0000 	.word	0x400f0000
    3024:	400e0800 	.word	0x400e0800
    3028:	400e0400 	.word	0x400e0400
    302c:	400e0c00 	.word	0x400e0c00
    3030:	400e1000 	.word	0x400e1000
    3034:	400f0c00 	.word	0x400f0c00
    3038:	400f0400 	.word	0x400f0400
    303c:	400f0800 	.word	0x400f0800
    3040:	400f1000 	.word	0x400f1000
    3044:	400f1400 	.word	0x400f1400
    3048:	000025e5 	.word	0x000025e5
    304c:	000027f5 	.word	0x000027f5
    3050:	00002885 	.word	0x00002885
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    3054:	2002      	movs	r0, #2
    3056:	4b2a      	ldr	r3, [pc, #168]	; (3100 <sysclk_disable_peripheral_clock+0x404>)
    3058:	4798      	blx	r3
		break;
    305a:	e044      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
    305c:	2000      	movs	r0, #0
    305e:	4b29      	ldr	r3, [pc, #164]	; (3104 <sysclk_disable_peripheral_clock+0x408>)
    3060:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    3062:	2003      	movs	r0, #3
    3064:	4b26      	ldr	r3, [pc, #152]	; (3100 <sysclk_disable_peripheral_clock+0x404>)
    3066:	4798      	blx	r3
		break;
    3068:	e03d      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
    306a:	2004      	movs	r0, #4
    306c:	4b25      	ldr	r3, [pc, #148]	; (3104 <sysclk_disable_peripheral_clock+0x408>)
    306e:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    3070:	2004      	movs	r0, #4
    3072:	4b23      	ldr	r3, [pc, #140]	; (3100 <sysclk_disable_peripheral_clock+0x404>)
    3074:	4798      	blx	r3
		break;
    3076:	e036      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
    3078:	2003      	movs	r0, #3
    307a:	4b22      	ldr	r3, [pc, #136]	; (3104 <sysclk_disable_peripheral_clock+0x408>)
    307c:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    307e:	2005      	movs	r0, #5
    3080:	4b1f      	ldr	r3, [pc, #124]	; (3100 <sysclk_disable_peripheral_clock+0x404>)
    3082:	4798      	blx	r3
		break;
    3084:	e02f      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    3086:	2006      	movs	r0, #6
    3088:	4b1d      	ldr	r3, [pc, #116]	; (3100 <sysclk_disable_peripheral_clock+0x404>)
    308a:	4798      	blx	r3
		break;
    308c:	e02b      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_PM);
    308e:	2000      	movs	r0, #0
    3090:	4b1d      	ldr	r3, [pc, #116]	; (3108 <sysclk_disable_peripheral_clock+0x40c>)
    3092:	4798      	blx	r3
		break;
    3094:	e027      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_CHIPID);
    3096:	2001      	movs	r0, #1
    3098:	4b1b      	ldr	r3, [pc, #108]	; (3108 <sysclk_disable_peripheral_clock+0x40c>)
    309a:	4798      	blx	r3
		break;
    309c:	e023      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_SCIF);
    309e:	2002      	movs	r0, #2
    30a0:	4b19      	ldr	r3, [pc, #100]	; (3108 <sysclk_disable_peripheral_clock+0x40c>)
    30a2:	4798      	blx	r3
		break;
    30a4:	e01f      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_FREQM);
    30a6:	2003      	movs	r0, #3
    30a8:	4b17      	ldr	r3, [pc, #92]	; (3108 <sysclk_disable_peripheral_clock+0x40c>)
    30aa:	4798      	blx	r3
		break;
    30ac:	e01b      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_GPIO);
    30ae:	2004      	movs	r0, #4
    30b0:	4b15      	ldr	r3, [pc, #84]	; (3108 <sysclk_disable_peripheral_clock+0x40c>)
    30b2:	4798      	blx	r3
		break;
    30b4:	e017      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_BPM);
    30b6:	2000      	movs	r0, #0
    30b8:	4b14      	ldr	r3, [pc, #80]	; (310c <sysclk_disable_peripheral_clock+0x410>)
    30ba:	4798      	blx	r3
		break;
    30bc:	e013      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_BSCIF);
    30be:	2001      	movs	r0, #1
    30c0:	4b12      	ldr	r3, [pc, #72]	; (310c <sysclk_disable_peripheral_clock+0x410>)
    30c2:	4798      	blx	r3
		break;
    30c4:	e00f      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_AST);
    30c6:	2002      	movs	r0, #2
    30c8:	4b10      	ldr	r3, [pc, #64]	; (310c <sysclk_disable_peripheral_clock+0x410>)
    30ca:	4798      	blx	r3
		break;
    30cc:	e00b      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_WDT);
    30ce:	2003      	movs	r0, #3
    30d0:	4b0e      	ldr	r3, [pc, #56]	; (310c <sysclk_disable_peripheral_clock+0x410>)
    30d2:	4798      	blx	r3
		break;
    30d4:	e007      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_EIC);
    30d6:	2004      	movs	r0, #4
    30d8:	4b0c      	ldr	r3, [pc, #48]	; (310c <sysclk_disable_peripheral_clock+0x410>)
    30da:	4798      	blx	r3
		break;
    30dc:	e003      	b.n	30e6 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
    30de:	2005      	movs	r0, #5
    30e0:	4b0a      	ldr	r3, [pc, #40]	; (310c <sysclk_disable_peripheral_clock+0x410>)
    30e2:	4798      	blx	r3
		break;
    30e4:	bf00      	nop
							(1 << SYSCLK_TC1) | \
							(1 << SYSCLK_USART0) | \
							(1 << SYSCLK_USART1) | \
							(1 << SYSCLK_USART2) | \
							(1 << SYSCLK_USART3))
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    30e6:	4b0a      	ldr	r3, [pc, #40]	; (3110 <sysclk_disable_peripheral_clock+0x414>)
    30e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30ea:	f640 730c 	movw	r3, #3852	; 0xf0c
    30ee:	4013      	ands	r3, r2
    30f0:	2b00      	cmp	r3, #0
    30f2:	d102      	bne.n	30fa <sysclk_disable_peripheral_clock+0x3fe>
		sysclk_disable_pba_divmask(PBA_DIVMASK_Msk);
    30f4:	207f      	movs	r0, #127	; 0x7f
    30f6:	4b07      	ldr	r3, [pc, #28]	; (3114 <sysclk_disable_peripheral_clock+0x418>)
    30f8:	4798      	blx	r3
	}
}
    30fa:	3708      	adds	r7, #8
    30fc:	46bd      	mov	sp, r7
    30fe:	bd80      	pop	{r7, pc}
    3100:	00002885 	.word	0x00002885
    3104:	000025e5 	.word	0x000025e5
    3108:	0000261d 	.word	0x0000261d
    310c:	00002655 	.word	0x00002655
    3110:	400e0000 	.word	0x400e0000
    3114:	000026a5 	.word	0x000026a5

00003118 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    3118:	b580      	push	{r7, lr}
    311a:	b086      	sub	sp, #24
    311c:	af00      	add	r7, sp, #0
	uint32_t ps_value = 0;
    311e:	2300      	movs	r3, #0
    3120:	617b      	str	r3, [r7, #20]
	bool is_fwu_enabled = false;
    3122:	2300      	movs	r3, #0
    3124:	74fb      	strb	r3, [r7, #19]

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    3126:	481b      	ldr	r0, [pc, #108]	; (3194 <sysclk_init+0x7c>)
    3128:	4b1b      	ldr	r3, [pc, #108]	; (3198 <sysclk_init+0x80>)
    312a:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    312c:	4b19      	ldr	r3, [pc, #100]	; (3194 <sysclk_init+0x7c>)
    312e:	2201      	movs	r2, #1
    3130:	609a      	str	r2, [r3, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    3132:	bf00      	nop
    3134:	4b17      	ldr	r3, [pc, #92]	; (3194 <sysclk_init+0x7c>)
    3136:	68db      	ldr	r3, [r3, #12]
    3138:	f003 0301 	and.w	r3, r3, #1
    313c:	2b00      	cmp	r3, #0
    313e:	d0f9      	beq.n	3134 <sysclk_init+0x1c>
#ifdef CONFIG_FLASH_READ_MODE_HIGH_SPEED_ENABLE
	ps_value = BPM_PS_2;
	is_fwu_enabled = false;
#elif (defined(CONFIG_PLL0_MUL) || defined(CONFIG_DFLL0_MUL) ||	defined(CONFIG_USBCLK_DIV))
	/* USB/DFLL/PLL are not available in PS1 (BPM.PMCON.PS=1) mode */
	ps_value = BPM_PS_0;
    3140:	2300      	movs	r3, #0
    3142:	617b      	str	r3, [r7, #20]
	is_fwu_enabled = false;
    3144:	2300      	movs	r3, #0
    3146:	74fb      	strb	r3, [r7, #19]
    3148:	4b14      	ldr	r3, [pc, #80]	; (319c <sysclk_init+0x84>)
    314a:	60bb      	str	r3, [r7, #8]
    314c:	697b      	ldr	r3, [r7, #20]
    314e:	607b      	str	r3, [r7, #4]
    3150:	2301      	movs	r3, #1
    3152:	603b      	str	r3, [r7, #0]
 * \return true if no error.
 */
__always_inline static
bool bpm_configure_power_scaling(Bpm *bpm, uint32_t ps_value, uint32_t no_halt)
{
	if (!no_halt) {
    3154:	683b      	ldr	r3, [r7, #0]
    3156:	2b00      	cmp	r3, #0
    3158:	d104      	bne.n	3164 <sysclk_init+0x4c>
		bpm_power_scaling_cpu(bpm, ps_value);
    315a:	6879      	ldr	r1, [r7, #4]
    315c:	68b8      	ldr	r0, [r7, #8]
    315e:	4b10      	ldr	r3, [pc, #64]	; (31a0 <sysclk_init+0x88>)
    3160:	4798      	blx	r3
    3162:	e004      	b.n	316e <sysclk_init+0x56>
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    3164:	4a0f      	ldr	r2, [pc, #60]	; (31a4 <sysclk_init+0x8c>)
    3166:	6879      	ldr	r1, [r7, #4]
    3168:	68b8      	ldr	r0, [r7, #8]
    316a:	4b0f      	ldr	r3, [pc, #60]	; (31a8 <sysclk_init+0x90>)
    316c:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    316e:	bf00      	nop
    3170:	480a      	ldr	r0, [pc, #40]	; (319c <sysclk_init+0x84>)
    3172:	4b0e      	ldr	r3, [pc, #56]	; (31ac <sysclk_init+0x94>)
    3174:	4798      	blx	r3
    3176:	4603      	mov	r3, r0
    3178:	f003 0301 	and.w	r3, r3, #1
    317c:	2b00      	cmp	r3, #0
    317e:	d0f7      	beq.n	3170 <sysclk_init+0x58>

	/* If the user has specified clock masks, enable only requested clocks */
	irqflags_t const flags = cpu_irq_save();
    3180:	4b0b      	ldr	r3, [pc, #44]	; (31b0 <sysclk_init+0x98>)
    3182:	4798      	blx	r3
    3184:	60f8      	str	r0, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBDMASK - (uint32_t)PM);
	PM->PM_PBDMASK = SYSCLK_INIT_MINIMAL_PBDMASK | CONFIG_SYSCLK_INIT_PBDMASK;
#endif

	cpu_irq_restore(flags);
    3186:	68f8      	ldr	r0, [r7, #12]
    3188:	4b0a      	ldr	r3, [pc, #40]	; (31b4 <sysclk_init+0x9c>)
    318a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    318c:	bf00      	nop
    318e:	3718      	adds	r7, #24
    3190:	46bd      	mov	sp, r7
    3192:	bd80      	pop	{r7, pc}
    3194:	400a0400 	.word	0x400a0400
    3198:	000028cd 	.word	0x000028cd
    319c:	400f0000 	.word	0x400f0000
    31a0:	00003651 	.word	0x00003651
    31a4:	0003a980 	.word	0x0003a980
    31a8:	000035ad 	.word	0x000035ad
    31ac:	000036f1 	.word	0x000036f1
    31b0:	00002541 	.word	0x00002541
    31b4:	00002599 	.word	0x00002599

000031b8 <ioport_init>:
{
    31b8:	b580      	push	{r7, lr}
    31ba:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    31bc:	4802      	ldr	r0, [pc, #8]	; (31c8 <ioport_init+0x10>)
    31be:	4b03      	ldr	r3, [pc, #12]	; (31cc <ioport_init+0x14>)
    31c0:	4798      	blx	r3
}
    31c2:	bf00      	nop
    31c4:	bd80      	pop	{r7, pc}
    31c6:	bf00      	nop
    31c8:	400e1000 	.word	0x400e1000
    31cc:	000028cd 	.word	0x000028cd

000031d0 <ioport_disable_pin>:
{
    31d0:	b480      	push	{r7}
    31d2:	b089      	sub	sp, #36	; 0x24
    31d4:	af00      	add	r7, sp, #0
    31d6:	6078      	str	r0, [r7, #4]
    31d8:	687b      	ldr	r3, [r7, #4]
    31da:	61fb      	str	r3, [r7, #28]
    31dc:	69fb      	ldr	r3, [r7, #28]
    31de:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
    31e0:	69bb      	ldr	r3, [r7, #24]
    31e2:	095a      	lsrs	r2, r3, #5
    31e4:	69fb      	ldr	r3, [r7, #28]
    31e6:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
    31e8:	697b      	ldr	r3, [r7, #20]
    31ea:	f003 031f 	and.w	r3, r3, #31
    31ee:	2101      	movs	r1, #1
    31f0:	fa01 f303 	lsl.w	r3, r1, r3
    31f4:	613a      	str	r2, [r7, #16]
    31f6:	60fb      	str	r3, [r7, #12]
    31f8:	693b      	ldr	r3, [r7, #16]
    31fa:	60bb      	str	r3, [r7, #8]
		+ port * sizeof(GpioPort));
    31fc:	68bb      	ldr	r3, [r7, #8]
    31fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3202:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3206:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3208:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    320a:	68fb      	ldr	r3, [r7, #12]
    320c:	6093      	str	r3, [r2, #8]
}
    320e:	bf00      	nop
    3210:	3724      	adds	r7, #36	; 0x24
    3212:	46bd      	mov	sp, r7
    3214:	bc80      	pop	{r7}
    3216:	4770      	bx	lr

00003218 <ioport_set_pin_mode>:
{
    3218:	b480      	push	{r7}
    321a:	b08d      	sub	sp, #52	; 0x34
    321c:	af00      	add	r7, sp, #0
    321e:	6078      	str	r0, [r7, #4]
    3220:	6039      	str	r1, [r7, #0]
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	62fb      	str	r3, [r7, #44]	; 0x2c
    3226:	683b      	ldr	r3, [r7, #0]
    3228:	62bb      	str	r3, [r7, #40]	; 0x28
    322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    322c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
    322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3230:	095a      	lsrs	r2, r3, #5
    3232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3234:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
    3236:	6a3b      	ldr	r3, [r7, #32]
    3238:	f003 031f 	and.w	r3, r3, #31
    323c:	2101      	movs	r1, #1
    323e:	fa01 f303 	lsl.w	r3, r1, r3
    3242:	61fa      	str	r2, [r7, #28]
    3244:	61bb      	str	r3, [r7, #24]
    3246:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3248:	617b      	str	r3, [r7, #20]
    324a:	69fb      	ldr	r3, [r7, #28]
    324c:	613b      	str	r3, [r7, #16]
		+ port * sizeof(GpioPort));
    324e:	693b      	ldr	r3, [r7, #16]
    3250:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3254:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3258:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    325a:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
    325c:	697b      	ldr	r3, [r7, #20]
    325e:	f003 0308 	and.w	r3, r3, #8
    3262:	2b00      	cmp	r3, #0
    3264:	d003      	beq.n	326e <ioport_set_pin_mode+0x56>
		base->GPIO_PUERS = mask;
    3266:	68fb      	ldr	r3, [r7, #12]
    3268:	69ba      	ldr	r2, [r7, #24]
    326a:	675a      	str	r2, [r3, #116]	; 0x74
    326c:	e002      	b.n	3274 <ioport_set_pin_mode+0x5c>
	} else {
		base->GPIO_PUERC = mask;
    326e:	68fb      	ldr	r3, [r7, #12]
    3270:	69ba      	ldr	r2, [r7, #24]
    3272:	679a      	str	r2, [r3, #120]	; 0x78
	}

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
    3274:	697b      	ldr	r3, [r7, #20]
    3276:	f003 0310 	and.w	r3, r3, #16
    327a:	2b00      	cmp	r3, #0
    327c:	d004      	beq.n	3288 <ioport_set_pin_mode+0x70>
		base->GPIO_PDERS = mask;
    327e:	68fb      	ldr	r3, [r7, #12]
    3280:	69ba      	ldr	r2, [r7, #24]
    3282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3286:	e003      	b.n	3290 <ioport_set_pin_mode+0x78>
	} else {
		base->GPIO_PDERC = mask;
    3288:	68fb      	ldr	r3, [r7, #12]
    328a:	69ba      	ldr	r2, [r7, #24]
    328c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
    3290:	697b      	ldr	r3, [r7, #20]
    3292:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3296:	2b00      	cmp	r3, #0
    3298:	d004      	beq.n	32a4 <ioport_set_pin_mode+0x8c>
		base->GPIO_GFERS = mask;
    329a:	68fb      	ldr	r3, [r7, #12]
    329c:	69ba      	ldr	r2, [r7, #24]
    329e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    32a2:	e003      	b.n	32ac <ioport_set_pin_mode+0x94>
	} else {
		base->GPIO_GFERC = mask;
    32a4:	68fb      	ldr	r3, [r7, #12]
    32a6:	69ba      	ldr	r2, [r7, #24]
    32a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    32ac:	697b      	ldr	r3, [r7, #20]
    32ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    32b2:	2b00      	cmp	r3, #0
    32b4:	d004      	beq.n	32c0 <ioport_set_pin_mode+0xa8>
		base->GPIO_ODCR0S = mask;
    32b6:	68fb      	ldr	r3, [r7, #12]
    32b8:	69ba      	ldr	r2, [r7, #24]
    32ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    32be:	e003      	b.n	32c8 <ioport_set_pin_mode+0xb0>
	} else {
		base->GPIO_ODCR0C = mask;
    32c0:	68fb      	ldr	r3, [r7, #12]
    32c2:	69ba      	ldr	r2, [r7, #24]
    32c4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
    32c8:	697b      	ldr	r3, [r7, #20]
    32ca:	f003 0301 	and.w	r3, r3, #1
    32ce:	2b00      	cmp	r3, #0
    32d0:	d003      	beq.n	32da <ioport_set_pin_mode+0xc2>
		base->GPIO_PMR0S = mask;
    32d2:	68fb      	ldr	r3, [r7, #12]
    32d4:	69ba      	ldr	r2, [r7, #24]
    32d6:	615a      	str	r2, [r3, #20]
    32d8:	e002      	b.n	32e0 <ioport_set_pin_mode+0xc8>
	} else {
		base->GPIO_PMR0C = mask;
    32da:	68fb      	ldr	r3, [r7, #12]
    32dc:	69ba      	ldr	r2, [r7, #24]
    32de:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
    32e0:	697b      	ldr	r3, [r7, #20]
    32e2:	f003 0302 	and.w	r3, r3, #2
    32e6:	2b00      	cmp	r3, #0
    32e8:	d003      	beq.n	32f2 <ioport_set_pin_mode+0xda>
		base->GPIO_PMR1S = mask;
    32ea:	68fb      	ldr	r3, [r7, #12]
    32ec:	69ba      	ldr	r2, [r7, #24]
    32ee:	625a      	str	r2, [r3, #36]	; 0x24
    32f0:	e002      	b.n	32f8 <ioport_set_pin_mode+0xe0>
	} else {
		base->GPIO_PMR1C = mask;
    32f2:	68fb      	ldr	r3, [r7, #12]
    32f4:	69ba      	ldr	r2, [r7, #24]
    32f6:	629a      	str	r2, [r3, #40]	; 0x28
	}

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
    32f8:	697b      	ldr	r3, [r7, #20]
    32fa:	f003 0304 	and.w	r3, r3, #4
    32fe:	2b00      	cmp	r3, #0
    3300:	d003      	beq.n	330a <ioport_set_pin_mode+0xf2>
		base->GPIO_PMR2S = mask;
    3302:	68fb      	ldr	r3, [r7, #12]
    3304:	69ba      	ldr	r2, [r7, #24]
    3306:	635a      	str	r2, [r3, #52]	; 0x34
}
    3308:	e002      	b.n	3310 <ioport_set_pin_mode+0xf8>
	} else {
		base->GPIO_PMR2C = mask;
    330a:	68fb      	ldr	r3, [r7, #12]
    330c:	69ba      	ldr	r2, [r7, #24]
    330e:	639a      	str	r2, [r3, #56]	; 0x38
    3310:	bf00      	nop
    3312:	3734      	adds	r7, #52	; 0x34
    3314:	46bd      	mov	sp, r7
    3316:	bc80      	pop	{r7}
    3318:	4770      	bx	lr

0000331a <ioport_set_pin_dir>:
{
    331a:	b480      	push	{r7}
    331c:	b095      	sub	sp, #84	; 0x54
    331e:	af00      	add	r7, sp, #0
    3320:	6078      	str	r0, [r7, #4]
    3322:	460b      	mov	r3, r1
    3324:	70fb      	strb	r3, [r7, #3]
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	64fb      	str	r3, [r7, #76]	; 0x4c
    332a:	78fb      	ldrb	r3, [r7, #3]
    332c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
    3330:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    3334:	2b01      	cmp	r3, #1
    3336:	d12f      	bne.n	3398 <ioport_set_pin_dir+0x7e>
    3338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    333a:	647b      	str	r3, [r7, #68]	; 0x44
    333c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    333e:	643b      	str	r3, [r7, #64]	; 0x40
	return pin >> 5;
    3340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3342:	095b      	lsrs	r3, r3, #5
    3344:	63fb      	str	r3, [r7, #60]	; 0x3c
		+ port * sizeof(GpioPort));
    3346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3348:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    334c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3350:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3352:	4619      	mov	r1, r3
    3354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3356:	63bb      	str	r3, [r7, #56]	; 0x38
	return 1U << (pin & 0x1F);
    3358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    335a:	f003 031f 	and.w	r3, r3, #31
    335e:	2201      	movs	r2, #1
    3360:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    3364:	644b      	str	r3, [r1, #68]	; 0x44
    3366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3368:	637b      	str	r3, [r7, #52]	; 0x34
    336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    336c:	633b      	str	r3, [r7, #48]	; 0x30
	return pin >> 5;
    336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3370:	095b      	lsrs	r3, r3, #5
    3372:	62fb      	str	r3, [r7, #44]	; 0x2c
		+ port * sizeof(GpioPort));
    3374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3376:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    337a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    337e:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3380:	4619      	mov	r1, r3
    3382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3384:	62bb      	str	r3, [r7, #40]	; 0x28
	return 1U << (pin & 0x1F);
    3386:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3388:	f003 031f 	and.w	r3, r3, #31
    338c:	2201      	movs	r2, #1
    338e:	fa02 f303 	lsl.w	r3, r2, r3
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    3392:	f8c1 3168 	str.w	r3, [r1, #360]	; 0x168
}
    3396:	e032      	b.n	33fe <ioport_set_pin_dir+0xe4>
	} else if (dir == IOPORT_DIR_INPUT) {
    3398:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    339c:	2b00      	cmp	r3, #0
    339e:	d12e      	bne.n	33fe <ioport_set_pin_dir+0xe4>
    33a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    33a2:	627b      	str	r3, [r7, #36]	; 0x24
    33a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33a6:	623b      	str	r3, [r7, #32]
	return pin >> 5;
    33a8:	6a3b      	ldr	r3, [r7, #32]
    33aa:	095b      	lsrs	r3, r3, #5
    33ac:	61fb      	str	r3, [r7, #28]
		+ port * sizeof(GpioPort));
    33ae:	69fb      	ldr	r3, [r7, #28]
    33b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    33b4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    33b8:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    33ba:	4619      	mov	r1, r3
    33bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    33be:	61bb      	str	r3, [r7, #24]
	return 1U << (pin & 0x1F);
    33c0:	69bb      	ldr	r3, [r7, #24]
    33c2:	f003 031f 	and.w	r3, r3, #31
    33c6:	2201      	movs	r2, #1
    33c8:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    33cc:	648b      	str	r3, [r1, #72]	; 0x48
    33ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    33d0:	617b      	str	r3, [r7, #20]
    33d2:	697b      	ldr	r3, [r7, #20]
    33d4:	613b      	str	r3, [r7, #16]
	return pin >> 5;
    33d6:	693b      	ldr	r3, [r7, #16]
    33d8:	095b      	lsrs	r3, r3, #5
    33da:	60fb      	str	r3, [r7, #12]
		+ port * sizeof(GpioPort));
    33dc:	68fb      	ldr	r3, [r7, #12]
    33de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    33e2:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    33e6:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    33e8:	4619      	mov	r1, r3
    33ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    33ec:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
    33ee:	68bb      	ldr	r3, [r7, #8]
    33f0:	f003 031f 	and.w	r3, r3, #31
    33f4:	2201      	movs	r2, #1
    33f6:	fa02 f303 	lsl.w	r3, r2, r3
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    33fa:	f8c1 3164 	str.w	r3, [r1, #356]	; 0x164
    33fe:	bf00      	nop
    3400:	3754      	adds	r7, #84	; 0x54
    3402:	46bd      	mov	sp, r7
    3404:	bc80      	pop	{r7}
    3406:	4770      	bx	lr

00003408 <ioport_set_pin_level>:
{
    3408:	b480      	push	{r7}
    340a:	b08d      	sub	sp, #52	; 0x34
    340c:	af00      	add	r7, sp, #0
    340e:	6078      	str	r0, [r7, #4]
    3410:	460b      	mov	r3, r1
    3412:	70fb      	strb	r3, [r7, #3]
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	62fb      	str	r3, [r7, #44]	; 0x2c
    3418:	78fb      	ldrb	r3, [r7, #3]
    341a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    341e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    3422:	2b00      	cmp	r3, #0
    3424:	d017      	beq.n	3456 <ioport_set_pin_level+0x4e>
    3426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3428:	627b      	str	r3, [r7, #36]	; 0x24
    342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    342c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
    342e:	6a3b      	ldr	r3, [r7, #32]
    3430:	095b      	lsrs	r3, r3, #5
    3432:	61fb      	str	r3, [r7, #28]
		+ port * sizeof(GpioPort));
    3434:	69fb      	ldr	r3, [r7, #28]
    3436:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    343a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    343e:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3440:	4619      	mov	r1, r3
    3442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3444:	61bb      	str	r3, [r7, #24]
	return 1U << (pin & 0x1F);
    3446:	69bb      	ldr	r3, [r7, #24]
    3448:	f003 031f 	and.w	r3, r3, #31
    344c:	2201      	movs	r2, #1
    344e:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    3452:	654b      	str	r3, [r1, #84]	; 0x54
}
    3454:	e016      	b.n	3484 <ioport_set_pin_level+0x7c>
    3456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3458:	617b      	str	r3, [r7, #20]
    345a:	697b      	ldr	r3, [r7, #20]
    345c:	613b      	str	r3, [r7, #16]
	return pin >> 5;
    345e:	693b      	ldr	r3, [r7, #16]
    3460:	095b      	lsrs	r3, r3, #5
    3462:	60fb      	str	r3, [r7, #12]
		+ port * sizeof(GpioPort));
    3464:	68fb      	ldr	r3, [r7, #12]
    3466:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    346a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    346e:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3470:	4619      	mov	r1, r3
    3472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3474:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
    3476:	68bb      	ldr	r3, [r7, #8]
    3478:	f003 031f 	and.w	r3, r3, #31
    347c:	2201      	movs	r2, #1
    347e:	fa02 f303 	lsl.w	r3, r2, r3
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    3482:	658b      	str	r3, [r1, #88]	; 0x58
    3484:	bf00      	nop
    3486:	3734      	adds	r7, #52	; 0x34
    3488:	46bd      	mov	sp, r7
    348a:	bc80      	pop	{r7}
    348c:	4770      	bx	lr
	...

00003490 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    3490:	b580      	push	{r7, lr}
    3492:	b088      	sub	sp, #32
    3494:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    3496:	1d3b      	adds	r3, r7, #4
    3498:	4618      	mov	r0, r3
    349a:	4b19      	ldr	r3, [pc, #100]	; (3500 <board_init+0x70>)
    349c:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    349e:	1d3a      	adds	r2, r7, #4
    34a0:	f107 0318 	add.w	r3, r7, #24
    34a4:	4917      	ldr	r1, [pc, #92]	; (3504 <board_init+0x74>)
    34a6:	4618      	mov	r0, r3
    34a8:	4b17      	ldr	r3, [pc, #92]	; (3508 <board_init+0x78>)
    34aa:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    34ac:	f107 0318 	add.w	r3, r7, #24
    34b0:	4618      	mov	r0, r3
    34b2:	4b16      	ldr	r3, [pc, #88]	; (350c <board_init+0x7c>)
    34b4:	4798      	blx	r3
#endif

	/* Initialize IOPORT */
	ioport_init();
    34b6:	4b16      	ldr	r3, [pc, #88]	; (3510 <board_init+0x80>)
    34b8:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
    34ba:	2101      	movs	r1, #1
    34bc:	2047      	movs	r0, #71	; 0x47
    34be:	4b15      	ldr	r3, [pc, #84]	; (3514 <board_init+0x84>)
    34c0:	4798      	blx	r3
	ioport_set_pin_level(LED_0_PIN, IOPORT_PIN_LEVEL_HIGH);
    34c2:	2101      	movs	r1, #1
    34c4:	2047      	movs	r0, #71	; 0x47
    34c6:	4b14      	ldr	r3, [pc, #80]	; (3518 <board_init+0x88>)
    34c8:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
    34ca:	2100      	movs	r1, #0
    34cc:	2058      	movs	r0, #88	; 0x58
    34ce:	4b11      	ldr	r3, [pc, #68]	; (3514 <board_init+0x84>)
    34d0:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
    34d2:	2108      	movs	r1, #8
    34d4:	2058      	movs	r0, #88	; 0x58
    34d6:	4b11      	ldr	r3, [pc, #68]	; (351c <board_init+0x8c>)
    34d8:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_PA24B_TWIMS0_TWCK,
			MUX_PA24B_TWIMS0_TWCK);
#endif

#ifdef CONF_BOARD_TWIMS3
	ioport_set_pin_peripheral_mode(PIN_PB14C_TWIMS3_TWD,
    34da:	2102      	movs	r1, #2
    34dc:	202e      	movs	r0, #46	; 0x2e
    34de:	4b0f      	ldr	r3, [pc, #60]	; (351c <board_init+0x8c>)
    34e0:	4798      	blx	r3
    34e2:	202e      	movs	r0, #46	; 0x2e
    34e4:	4b0e      	ldr	r3, [pc, #56]	; (3520 <board_init+0x90>)
    34e6:	4798      	blx	r3
			MUX_PB14C_TWIMS3_TWD);
	ioport_set_pin_peripheral_mode(PIN_PB15C_TWIMS3_TWCK,
    34e8:	2102      	movs	r1, #2
    34ea:	202f      	movs	r0, #47	; 0x2f
    34ec:	4b0b      	ldr	r3, [pc, #44]	; (351c <board_init+0x8c>)
    34ee:	4798      	blx	r3
    34f0:	202f      	movs	r0, #47	; 0x2f
    34f2:	4b0b      	ldr	r3, [pc, #44]	; (3520 <board_init+0x90>)
    34f4:	4798      	blx	r3
	ioport_set_pin_dir(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_MODE_PULLUP);
	ioport_set_pin_dir(UG_2832HSWEG04_RESET_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_RESET_GPIO, IOPORT_MODE_PULLUP);
#endif
}
    34f6:	bf00      	nop
    34f8:	3720      	adds	r7, #32
    34fa:	46bd      	mov	sp, r7
    34fc:	bd80      	pop	{r7, pc}
    34fe:	bf00      	nop
    3500:	000038f9 	.word	0x000038f9
    3504:	400f0c00 	.word	0x400f0c00
    3508:	0000393d 	.word	0x0000393d
    350c:	00003a41 	.word	0x00003a41
    3510:	000031b9 	.word	0x000031b9
    3514:	0000331b 	.word	0x0000331b
    3518:	00003409 	.word	0x00003409
    351c:	00003219 	.word	0x00003219
    3520:	000031d1 	.word	0x000031d1

00003524 <cpu_irq_save>:
{
    3524:	b480      	push	{r7}
    3526:	b083      	sub	sp, #12
    3528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    352a:	f3ef 8310 	mrs	r3, PRIMASK
    352e:	607b      	str	r3, [r7, #4]
  return(result);
    3530:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3532:	2b00      	cmp	r3, #0
    3534:	bf0c      	ite	eq
    3536:	2301      	moveq	r3, #1
    3538:	2300      	movne	r3, #0
    353a:	b2db      	uxtb	r3, r3
    353c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    353e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3540:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3544:	4b04      	ldr	r3, [pc, #16]	; (3558 <cpu_irq_save+0x34>)
    3546:	2200      	movs	r2, #0
    3548:	701a      	strb	r2, [r3, #0]
	return flags;
    354a:	683b      	ldr	r3, [r7, #0]
}
    354c:	4618      	mov	r0, r3
    354e:	370c      	adds	r7, #12
    3550:	46bd      	mov	sp, r7
    3552:	bc80      	pop	{r7}
    3554:	4770      	bx	lr
    3556:	bf00      	nop
    3558:	20000074 	.word	0x20000074

0000355c <cpu_irq_is_enabled_flags>:
{
    355c:	b480      	push	{r7}
    355e:	b083      	sub	sp, #12
    3560:	af00      	add	r7, sp, #0
    3562:	6078      	str	r0, [r7, #4]
	return (flags);
    3564:	687b      	ldr	r3, [r7, #4]
    3566:	2b00      	cmp	r3, #0
    3568:	bf14      	ite	ne
    356a:	2301      	movne	r3, #1
    356c:	2300      	moveq	r3, #0
    356e:	b2db      	uxtb	r3, r3
}
    3570:	4618      	mov	r0, r3
    3572:	370c      	adds	r7, #12
    3574:	46bd      	mov	sp, r7
    3576:	bc80      	pop	{r7}
    3578:	4770      	bx	lr
	...

0000357c <cpu_irq_restore>:
{
    357c:	b580      	push	{r7, lr}
    357e:	b082      	sub	sp, #8
    3580:	af00      	add	r7, sp, #0
    3582:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    3584:	6878      	ldr	r0, [r7, #4]
    3586:	4b07      	ldr	r3, [pc, #28]	; (35a4 <cpu_irq_restore+0x28>)
    3588:	4798      	blx	r3
    358a:	4603      	mov	r3, r0
    358c:	2b00      	cmp	r3, #0
    358e:	d005      	beq.n	359c <cpu_irq_restore+0x20>
		cpu_irq_enable();
    3590:	4b05      	ldr	r3, [pc, #20]	; (35a8 <cpu_irq_restore+0x2c>)
    3592:	2201      	movs	r2, #1
    3594:	701a      	strb	r2, [r3, #0]
    3596:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    359a:	b662      	cpsie	i
}
    359c:	bf00      	nop
    359e:	3708      	adds	r7, #8
    35a0:	46bd      	mov	sp, r7
    35a2:	bd80      	pop	{r7, pc}
    35a4:	0000355d 	.word	0x0000355d
    35a8:	20000074 	.word	0x20000074

000035ac <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    35ac:	b580      	push	{r7, lr}
    35ae:	b08a      	sub	sp, #40	; 0x28
    35b0:	af00      	add	r7, sp, #0
    35b2:	60f8      	str	r0, [r7, #12]
    35b4:	60b9      	str	r1, [r7, #8]
    35b6:	607a      	str	r2, [r7, #4]
	uint32_t pmcon = 0;
    35b8:	2300      	movs	r3, #0
    35ba:	627b      	str	r3, [r7, #36]	; 0x24

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    35bc:	68fb      	ldr	r3, [r7, #12]
    35be:	69db      	ldr	r3, [r3, #28]
    35c0:	627b      	str	r3, [r7, #36]	; 0x24

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    35c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    35c4:	f023 0303 	bic.w	r3, r3, #3
    35c8:	627b      	str	r3, [r7, #36]	; 0x24
	pmcon |= BPM_PMCON_PS(ps_value);
    35ca:	68bb      	ldr	r3, [r7, #8]
    35cc:	f003 0303 	and.w	r3, r3, #3
    35d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    35d2:	4313      	orrs	r3, r2
    35d4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Set PSCM Value: PS change no halt */
	pmcon |= BPM_PMCON_PSCM;
    35d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    35d8:	f043 0308 	orr.w	r3, r3, #8
    35dc:	627b      	str	r3, [r7, #36]	; 0x24

	/* Power Scaling Change Request */
	pmcon |= BPM_PMCON_PSCREQ;
    35de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    35e0:	f043 0304 	orr.w	r3, r3, #4
    35e4:	627b      	str	r3, [r7, #36]	; 0x24
	/* Execute power scaling no halt in RAM */
	irqflags_t flags;
	bool b_psok;
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();
    35e6:	4b16      	ldr	r3, [pc, #88]	; (3640 <bpm_power_scaling_cpu_failsafe+0x94>)
    35e8:	4798      	blx	r3
    35ea:	6238      	str	r0, [r7, #32]

	/* Save SysTick */
	val = SysTick->VAL;
    35ec:	4b15      	ldr	r3, [pc, #84]	; (3644 <bpm_power_scaling_cpu_failsafe+0x98>)
    35ee:	689b      	ldr	r3, [r3, #8]
    35f0:	61fb      	str	r3, [r7, #28]
	ctrl = SysTick->CTRL;
    35f2:	4b14      	ldr	r3, [pc, #80]	; (3644 <bpm_power_scaling_cpu_failsafe+0x98>)
    35f4:	681b      	ldr	r3, [r3, #0]
    35f6:	61bb      	str	r3, [r7, #24]
	load = SysTick->LOAD;
    35f8:	4b12      	ldr	r3, [pc, #72]	; (3644 <bpm_power_scaling_cpu_failsafe+0x98>)
    35fa:	685b      	ldr	r3, [r3, #4]
    35fc:	617b      	str	r3, [r7, #20]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    35fe:	4a11      	ldr	r2, [pc, #68]	; (3644 <bpm_power_scaling_cpu_failsafe+0x98>)
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	6053      	str	r3, [r2, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    3604:	4b0f      	ldr	r3, [pc, #60]	; (3644 <bpm_power_scaling_cpu_failsafe+0x98>)
    3606:	2205      	movs	r2, #5
    3608:	601a      	str	r2, [r3, #0]

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    360a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    360c:	68f8      	ldr	r0, [r7, #12]
    360e:	4b0e      	ldr	r3, [pc, #56]	; (3648 <bpm_power_scaling_cpu_failsafe+0x9c>)
    3610:	4798      	blx	r3
    3612:	4603      	mov	r3, r0
    3614:	74fb      	strb	r3, [r7, #19]

	/* Restore SysTick */
	SysTick->CTRL = 0;
    3616:	4b0b      	ldr	r3, [pc, #44]	; (3644 <bpm_power_scaling_cpu_failsafe+0x98>)
    3618:	2200      	movs	r2, #0
    361a:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = load;
    361c:	4a09      	ldr	r2, [pc, #36]	; (3644 <bpm_power_scaling_cpu_failsafe+0x98>)
    361e:	697b      	ldr	r3, [r7, #20]
    3620:	6053      	str	r3, [r2, #4]
	SysTick->VAL = val;
    3622:	4a08      	ldr	r2, [pc, #32]	; (3644 <bpm_power_scaling_cpu_failsafe+0x98>)
    3624:	69fb      	ldr	r3, [r7, #28]
    3626:	6093      	str	r3, [r2, #8]
	SysTick->CTRL = ctrl;
    3628:	4a06      	ldr	r2, [pc, #24]	; (3644 <bpm_power_scaling_cpu_failsafe+0x98>)
    362a:	69bb      	ldr	r3, [r7, #24]
    362c:	6013      	str	r3, [r2, #0]

	cpu_irq_restore(flags);
    362e:	6a38      	ldr	r0, [r7, #32]
    3630:	4b06      	ldr	r3, [pc, #24]	; (364c <bpm_power_scaling_cpu_failsafe+0xa0>)
    3632:	4798      	blx	r3
	return b_psok;
    3634:	7cfb      	ldrb	r3, [r7, #19]
}
    3636:	4618      	mov	r0, r3
    3638:	3728      	adds	r7, #40	; 0x28
    363a:	46bd      	mov	sp, r7
    363c:	bd80      	pop	{r7, pc}
    363e:	bf00      	nop
    3640:	00003525 	.word	0x00003525
    3644:	e000e010 	.word	0xe000e010
    3648:	20000001 	.word	0x20000001
    364c:	0000357d 	.word	0x0000357d

00003650 <bpm_power_scaling_cpu>:

void bpm_power_scaling_cpu(Bpm *bpm, uint32_t ps_value)
{
    3650:	b480      	push	{r7}
    3652:	b085      	sub	sp, #20
    3654:	af00      	add	r7, sp, #0
    3656:	6078      	str	r0, [r7, #4]
    3658:	6039      	str	r1, [r7, #0]
	uint32_t pmcon = 0;
    365a:	2300      	movs	r3, #0
    365c:	60fb      	str	r3, [r7, #12]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	69db      	ldr	r3, [r3, #28]
    3662:	60fb      	str	r3, [r7, #12]
	/* Clear last PS Value */
	pmcon &= ~BPM_PMCON_PS_Msk;
    3664:	68fb      	ldr	r3, [r7, #12]
    3666:	f023 0303 	bic.w	r3, r3, #3
    366a:	60fb      	str	r3, [r7, #12]
	/* Write new PS Value */
	pmcon |= BPM_PMCON_PS(ps_value);
    366c:	683b      	ldr	r3, [r7, #0]
    366e:	f003 0303 	and.w	r3, r3, #3
    3672:	68fa      	ldr	r2, [r7, #12]
    3674:	4313      	orrs	r3, r2
    3676:	60fb      	str	r3, [r7, #12]
	/* PSCM: without CPU halt */
	pmcon |= BPM_PMCON_PSCM;
    3678:	68fb      	ldr	r3, [r7, #12]
    367a:	f043 0308 	orr.w	r3, r3, #8
    367e:	60fb      	str	r3, [r7, #12]
	/* Power Scaling Change Request */
	pmcon |= BPM_PMCON_PSCREQ;
    3680:	68fb      	ldr	r3, [r7, #12]
    3682:	f043 0304 	orr.w	r3, r3, #4
    3686:	60fb      	str	r3, [r7, #12]
	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    3688:	4b05      	ldr	r3, [pc, #20]	; (36a0 <bpm_power_scaling_cpu+0x50>)
    368a:	4a06      	ldr	r2, [pc, #24]	; (36a4 <bpm_power_scaling_cpu+0x54>)
    368c:	619a      	str	r2, [r3, #24]
	/* Write back PM_CON value */
	bpm->BPM_PMCON = pmcon;
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	68fa      	ldr	r2, [r7, #12]
    3692:	61da      	str	r2, [r3, #28]
}
    3694:	bf00      	nop
    3696:	3714      	adds	r7, #20
    3698:	46bd      	mov	sp, r7
    369a:	bc80      	pop	{r7}
    369c:	4770      	bx	lr
    369e:	bf00      	nop
    36a0:	400f0000 	.word	0x400f0000
    36a4:	aa00001c 	.word	0xaa00001c

000036a8 <bpm_set_clk32_source>:
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
}

void bpm_set_clk32_source(Bpm *bpm, uint32_t source)
{
    36a8:	b480      	push	{r7}
    36aa:	b085      	sub	sp, #20
    36ac:	af00      	add	r7, sp, #0
    36ae:	6078      	str	r0, [r7, #4]
    36b0:	6039      	str	r1, [r7, #0]
	uint32_t pmcon;

	/* Read PMCON first */
	pmcon = bpm->BPM_PMCON;
    36b2:	687b      	ldr	r3, [r7, #4]
    36b4:	69db      	ldr	r3, [r3, #28]
    36b6:	60fb      	str	r3, [r7, #12]
	if (source == BPM_CLK32_SOURCE_OSC32K) {
    36b8:	683b      	ldr	r3, [r7, #0]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d104      	bne.n	36c8 <bpm_set_clk32_source+0x20>
		/* Clear CK32S for OSC32K */
		pmcon &= ~BPM_PMCON_CK32S;
    36be:	68fb      	ldr	r3, [r7, #12]
    36c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    36c4:	60fb      	str	r3, [r7, #12]
    36c6:	e003      	b.n	36d0 <bpm_set_clk32_source+0x28>
	} else {
		/* Set CK32S for RC32K */
		pmcon |= BPM_PMCON_CK32S;
    36c8:	68fb      	ldr	r3, [r7, #12]
    36ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    36ce:	60fb      	str	r3, [r7, #12]
	}

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    36d0:	4b05      	ldr	r3, [pc, #20]	; (36e8 <bpm_set_clk32_source+0x40>)
    36d2:	4a06      	ldr	r2, [pc, #24]	; (36ec <bpm_set_clk32_source+0x44>)
    36d4:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
    36d6:	687b      	ldr	r3, [r7, #4]
    36d8:	68fa      	ldr	r2, [r7, #12]
    36da:	61da      	str	r2, [r3, #28]
}
    36dc:	bf00      	nop
    36de:	3714      	adds	r7, #20
    36e0:	46bd      	mov	sp, r7
    36e2:	bc80      	pop	{r7}
    36e4:	4770      	bx	lr
    36e6:	bf00      	nop
    36e8:	400f0000 	.word	0x400f0000
    36ec:	aa00001c 	.word	0xaa00001c

000036f0 <bpm_get_status>:
{
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
    36f0:	b480      	push	{r7}
    36f2:	b083      	sub	sp, #12
    36f4:	af00      	add	r7, sp, #0
    36f6:	6078      	str	r0, [r7, #4]
	return bpm->BPM_SR;
    36f8:	687b      	ldr	r3, [r7, #4]
    36fa:	695b      	ldr	r3, [r3, #20]
}
    36fc:	4618      	mov	r0, r3
    36fe:	370c      	adds	r7, #12
    3700:	46bd      	mov	sp, r7
    3702:	bc80      	pop	{r7}
    3704:	4770      	bx	lr
	...

00003708 <bpm_sleep>:
{
	return bpm->BPM_VERSION;
}

void bpm_sleep(Bpm *bpm, uint32_t sleep_mode)
{
    3708:	b480      	push	{r7}
    370a:	b085      	sub	sp, #20
    370c:	af00      	add	r7, sp, #0
    370e:	6078      	str	r0, [r7, #4]
    3710:	6039      	str	r1, [r7, #0]
	uint32_t pmcon;

	/* Read PMCON register */
	pmcon = bpm->BPM_PMCON;
    3712:	687b      	ldr	r3, [r7, #4]
    3714:	69db      	ldr	r3, [r3, #28]
    3716:	60fb      	str	r3, [r7, #12]
	pmcon &= ~BPM_PMCON_BKUP;
    3718:	68fb      	ldr	r3, [r7, #12]
    371a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    371e:	60fb      	str	r3, [r7, #12]
	pmcon &= ~BPM_PMCON_RET;
    3720:	68fb      	ldr	r3, [r7, #12]
    3722:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3726:	60fb      	str	r3, [r7, #12]
	pmcon &= ~BPM_PMCON_SLEEP_Msk;
    3728:	68fb      	ldr	r3, [r7, #12]
    372a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    372e:	60fb      	str	r3, [r7, #12]

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    3730:	4b42      	ldr	r3, [pc, #264]	; (383c <bpm_sleep+0x134>)
    3732:	4a43      	ldr	r2, [pc, #268]	; (3840 <bpm_sleep+0x138>)
    3734:	619a      	str	r2, [r3, #24]

	if (sleep_mode == BPM_SM_SLEEP_0) {
    3736:	683b      	ldr	r3, [r7, #0]
    3738:	2b01      	cmp	r3, #1
    373a:	d109      	bne.n	3750 <bpm_sleep+0x48>
		pmcon |= BPM_PMCON_SLEEP(0);
		bpm->BPM_PMCON = pmcon;
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	68fa      	ldr	r2, [r7, #12]
    3740:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3742:	4a40      	ldr	r2, [pc, #256]	; (3844 <bpm_sleep+0x13c>)
    3744:	4b3f      	ldr	r3, [pc, #252]	; (3844 <bpm_sleep+0x13c>)
    3746:	691b      	ldr	r3, [r3, #16]
    3748:	f023 0304 	bic.w	r3, r3, #4
    374c:	6113      	str	r3, [r2, #16]
    374e:	e060      	b.n	3812 <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_SLEEP_1) {
    3750:	683b      	ldr	r3, [r7, #0]
    3752:	2b02      	cmp	r3, #2
    3754:	d10d      	bne.n	3772 <bpm_sleep+0x6a>
		pmcon |= BPM_PMCON_SLEEP(1);
    3756:	68fb      	ldr	r3, [r7, #12]
    3758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    375c:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    375e:	687b      	ldr	r3, [r7, #4]
    3760:	68fa      	ldr	r2, [r7, #12]
    3762:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3764:	4a37      	ldr	r2, [pc, #220]	; (3844 <bpm_sleep+0x13c>)
    3766:	4b37      	ldr	r3, [pc, #220]	; (3844 <bpm_sleep+0x13c>)
    3768:	691b      	ldr	r3, [r3, #16]
    376a:	f023 0304 	bic.w	r3, r3, #4
    376e:	6113      	str	r3, [r2, #16]
    3770:	e04f      	b.n	3812 <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_SLEEP_2) {
    3772:	683b      	ldr	r3, [r7, #0]
    3774:	2b03      	cmp	r3, #3
    3776:	d10d      	bne.n	3794 <bpm_sleep+0x8c>
		pmcon |= BPM_PMCON_SLEEP(2);
    3778:	68fb      	ldr	r3, [r7, #12]
    377a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    377e:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    3780:	687b      	ldr	r3, [r7, #4]
    3782:	68fa      	ldr	r2, [r7, #12]
    3784:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3786:	4a2f      	ldr	r2, [pc, #188]	; (3844 <bpm_sleep+0x13c>)
    3788:	4b2e      	ldr	r3, [pc, #184]	; (3844 <bpm_sleep+0x13c>)
    378a:	691b      	ldr	r3, [r3, #16]
    378c:	f023 0304 	bic.w	r3, r3, #4
    3790:	6113      	str	r3, [r2, #16]
    3792:	e03e      	b.n	3812 <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_SLEEP_3) {
    3794:	683b      	ldr	r3, [r7, #0]
    3796:	2b04      	cmp	r3, #4
    3798:	d10d      	bne.n	37b6 <bpm_sleep+0xae>
		pmcon |= BPM_PMCON_SLEEP(3);
    379a:	68fb      	ldr	r3, [r7, #12]
    379c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    37a0:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    37a2:	687b      	ldr	r3, [r7, #4]
    37a4:	68fa      	ldr	r2, [r7, #12]
    37a6:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    37a8:	4a26      	ldr	r2, [pc, #152]	; (3844 <bpm_sleep+0x13c>)
    37aa:	4b26      	ldr	r3, [pc, #152]	; (3844 <bpm_sleep+0x13c>)
    37ac:	691b      	ldr	r3, [r3, #16]
    37ae:	f023 0304 	bic.w	r3, r3, #4
    37b2:	6113      	str	r3, [r2, #16]
    37b4:	e02d      	b.n	3812 <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_WAIT) {
    37b6:	683b      	ldr	r3, [r7, #0]
    37b8:	2b05      	cmp	r3, #5
    37ba:	d109      	bne.n	37d0 <bpm_sleep+0xc8>
		bpm->BPM_PMCON = pmcon;
    37bc:	687b      	ldr	r3, [r7, #4]
    37be:	68fa      	ldr	r2, [r7, #12]
    37c0:	61da      	str	r2, [r3, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    37c2:	4a20      	ldr	r2, [pc, #128]	; (3844 <bpm_sleep+0x13c>)
    37c4:	4b1f      	ldr	r3, [pc, #124]	; (3844 <bpm_sleep+0x13c>)
    37c6:	691b      	ldr	r3, [r3, #16]
    37c8:	f043 0304 	orr.w	r3, r3, #4
    37cc:	6113      	str	r3, [r2, #16]
    37ce:	e020      	b.n	3812 <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_RET) {
    37d0:	683b      	ldr	r3, [r7, #0]
    37d2:	2b06      	cmp	r3, #6
    37d4:	d10d      	bne.n	37f2 <bpm_sleep+0xea>
		pmcon |= BPM_PMCON_RET;
    37d6:	68fb      	ldr	r3, [r7, #12]
    37d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    37dc:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    37de:	687b      	ldr	r3, [r7, #4]
    37e0:	68fa      	ldr	r2, [r7, #12]
    37e2:	61da      	str	r2, [r3, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    37e4:	4a17      	ldr	r2, [pc, #92]	; (3844 <bpm_sleep+0x13c>)
    37e6:	4b17      	ldr	r3, [pc, #92]	; (3844 <bpm_sleep+0x13c>)
    37e8:	691b      	ldr	r3, [r3, #16]
    37ea:	f043 0304 	orr.w	r3, r3, #4
    37ee:	6113      	str	r3, [r2, #16]
    37f0:	e00f      	b.n	3812 <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_BACKUP) { 
    37f2:	683b      	ldr	r3, [r7, #0]
    37f4:	2b07      	cmp	r3, #7
    37f6:	d11c      	bne.n	3832 <bpm_sleep+0x12a>
		pmcon |= BPM_PMCON_BKUP;
    37f8:	68fb      	ldr	r3, [r7, #12]
    37fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    37fe:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    3800:	687b      	ldr	r3, [r7, #4]
    3802:	68fa      	ldr	r2, [r7, #12]
    3804:	61da      	str	r2, [r3, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    3806:	4a0f      	ldr	r2, [pc, #60]	; (3844 <bpm_sleep+0x13c>)
    3808:	4b0e      	ldr	r3, [pc, #56]	; (3844 <bpm_sleep+0x13c>)
    380a:	691b      	ldr	r3, [r3, #16]
    380c:	f043 0304 	orr.w	r3, r3, #4
    3810:	6113      	str	r3, [r2, #16]
	} else {
		return;
	}

	/* Wait until vreg is ok. */
	while(!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_VREGOK));
    3812:	bf00      	nop
    3814:	4b0c      	ldr	r3, [pc, #48]	; (3848 <bpm_sleep+0x140>)
    3816:	695b      	ldr	r3, [r3, #20]
    3818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    381c:	2b00      	cmp	r3, #0
    381e:	d0f9      	beq.n	3814 <bpm_sleep+0x10c>
	asm volatile ("wfi");
    3820:	bf30      	wfi
	/* ensure sleep request propagation to flash. */
	asm volatile ("nop");
    3822:	bf00      	nop
	 * masked since we are in the critical section thanks to the previous
	 * set_pri_mask(1). Thus, we need to leave the critical section.
	 * Please note that we should probably use something like
	 * cpu_leave_critical(), using set_pri_mask(0)
	 */
	cpu_irq_enable();
    3824:	4b09      	ldr	r3, [pc, #36]	; (384c <bpm_sleep+0x144>)
    3826:	2201      	movs	r2, #1
    3828:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    382a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    382e:	b662      	cpsie	i
    3830:	e000      	b.n	3834 <bpm_sleep+0x12c>
		return;
    3832:	bf00      	nop
}
    3834:	3714      	adds	r7, #20
    3836:	46bd      	mov	sp, r7
    3838:	bc80      	pop	{r7}
    383a:	4770      	bx	lr
    383c:	400f0000 	.word	0x400f0000
    3840:	aa00001c 	.word	0xaa00001c
    3844:	e000ed00 	.word	0xe000ed00
    3848:	400f0400 	.word	0x400f0400
    384c:	20000074 	.word	0x20000074

00003850 <sysclk_get_main_hz>:
{
    3850:	b480      	push	{r7}
    3852:	af00      	add	r7, sp, #0
		return OSC_RCSYS_NOMINAL_HZ;
    3854:	4b02      	ldr	r3, [pc, #8]	; (3860 <sysclk_get_main_hz+0x10>)
}
    3856:	4618      	mov	r0, r3
    3858:	46bd      	mov	sp, r7
    385a:	bc80      	pop	{r7}
    385c:	4770      	bx	lr
    385e:	bf00      	nop
    3860:	0001c138 	.word	0x0001c138

00003864 <sysclk_get_cpu_hz>:
{
    3864:	b580      	push	{r7, lr}
    3866:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    3868:	4b02      	ldr	r3, [pc, #8]	; (3874 <sysclk_get_cpu_hz+0x10>)
    386a:	4798      	blx	r3
    386c:	4603      	mov	r3, r0
}
    386e:	4618      	mov	r0, r3
    3870:	bd80      	pop	{r7, pc}
    3872:	bf00      	nop
    3874:	00003851 	.word	0x00003851

00003878 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    3878:	b580      	push	{r7, lr}
    387a:	b084      	sub	sp, #16
    387c:	af00      	add	r7, sp, #0
    387e:	6078      	str	r0, [r7, #4]
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    3880:	4b1a      	ldr	r3, [pc, #104]	; (38ec <wdt_set_ctrl+0x74>)
    3882:	681b      	ldr	r3, [r3, #0]
    3884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    3888:	2b00      	cmp	r3, #0
    388a:	d10e      	bne.n	38aa <wdt_set_ctrl+0x32>
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    388c:	4b18      	ldr	r3, [pc, #96]	; (38f0 <wdt_set_ctrl+0x78>)
    388e:	4798      	blx	r3
    3890:	4603      	mov	r3, r0
    3892:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    3896:	339c      	adds	r3, #156	; 0x9c
    3898:	005b      	lsls	r3, r3, #1
    389a:	3b01      	subs	r3, #1
    389c:	08db      	lsrs	r3, r3, #3
    389e:	4a15      	ldr	r2, [pc, #84]	; (38f4 <wdt_set_ctrl+0x7c>)
    38a0:	fba2 2303 	umull	r2, r3, r2, r3
    38a4:	0a5b      	lsrs	r3, r3, #9
    38a6:	60fb      	str	r3, [r7, #12]
    38a8:	e008      	b.n	38bc <wdt_set_ctrl+0x44>
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    38aa:	4b11      	ldr	r3, [pc, #68]	; (38f0 <wdt_set_ctrl+0x78>)
    38ac:	4798      	blx	r3
    38ae:	4603      	mov	r3, r0
    38b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    38b4:	005b      	lsls	r3, r3, #1
    38b6:	3b01      	subs	r3, #1
    38b8:	0bdb      	lsrs	r3, r3, #15
    38ba:	60fb      	str	r3, [r7, #12]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    38bc:	68fb      	ldr	r3, [r7, #12]
    38be:	08db      	lsrs	r3, r3, #3
    38c0:	60fb      	str	r3, [r7, #12]
	while(dly--);
    38c2:	bf00      	nop
    38c4:	68fb      	ldr	r3, [r7, #12]
    38c6:	1e5a      	subs	r2, r3, #1
    38c8:	60fa      	str	r2, [r7, #12]
    38ca:	2b00      	cmp	r3, #0
    38cc:	d1fa      	bne.n	38c4 <wdt_set_ctrl+0x4c>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    38ce:	4a07      	ldr	r2, [pc, #28]	; (38ec <wdt_set_ctrl+0x74>)
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
    38d6:	6013      	str	r3, [r2, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    38d8:	4a04      	ldr	r2, [pc, #16]	; (38ec <wdt_set_ctrl+0x74>)
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    38e0:	6013      	str	r3, [r2, #0]
}
    38e2:	bf00      	nop
    38e4:	3710      	adds	r7, #16
    38e6:	46bd      	mov	sp, r7
    38e8:	bd80      	pop	{r7, pc}
    38ea:	bf00      	nop
    38ec:	400f0c00 	.word	0x400f0c00
    38f0:	00003865 	.word	0x00003865
    38f4:	091e38ab 	.word	0x091e38ab

000038f8 <wdt_get_config_defaults>:
 *  - No window period, so that the watchdog count can be reset at any time.
 *
 *  \param cfg    Configuration structure to initialize to default values.
 */
void wdt_get_config_defaults(struct wdt_config *const cfg)
{
    38f8:	b480      	push	{r7}
    38fa:	b083      	sub	sp, #12
    38fc:	af00      	add	r7, sp, #0
    38fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    3900:	687b      	ldr	r3, [r7, #4]
    3902:	2200      	movs	r2, #0
    3904:	601a      	str	r2, [r3, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    3906:	687b      	ldr	r3, [r7, #4]
    3908:	2200      	movs	r2, #0
    390a:	605a      	str	r2, [r3, #4]
	cfg->wdt_int = WDT_INT_DIS;
    390c:	687b      	ldr	r3, [r7, #4]
    390e:	2200      	movs	r2, #0
    3910:	609a      	str	r2, [r3, #8]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	2210      	movs	r2, #16
    3916:	731a      	strb	r2, [r3, #12]
	cfg->window_period = WDT_PERIOD_NONE;
    3918:	687b      	ldr	r3, [r7, #4]
    391a:	2200      	movs	r2, #0
    391c:	735a      	strb	r2, [r3, #13]
	cfg->disable_flash_cali = true;
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	2201      	movs	r2, #1
    3922:	739a      	strb	r2, [r3, #14]
	cfg->disable_wdt_after_reset = true;
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	2201      	movs	r2, #1
    3928:	73da      	strb	r2, [r3, #15]
	cfg->always_on = false;
    392a:	687b      	ldr	r3, [r7, #4]
    392c:	2200      	movs	r2, #0
    392e:	741a      	strb	r2, [r3, #16]
}
    3930:	bf00      	nop
    3932:	370c      	adds	r7, #12
    3934:	46bd      	mov	sp, r7
    3936:	bc80      	pop	{r7}
    3938:	4770      	bx	lr
	...

0000393c <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    393c:	b580      	push	{r7, lr}
    393e:	b084      	sub	sp, #16
    3940:	af00      	add	r7, sp, #0
    3942:	60f8      	str	r0, [r7, #12]
    3944:	60b9      	str	r1, [r7, #8]
    3946:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    3948:	68fb      	ldr	r3, [r7, #12]
    394a:	68ba      	ldr	r2, [r7, #8]
    394c:	601a      	str	r2, [r3, #0]
	dev_inst->wdt_cfg = cfg;
    394e:	68fb      	ldr	r3, [r7, #12]
    3950:	687a      	ldr	r2, [r7, #4]
    3952:	605a      	str	r2, [r3, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    3954:	68b8      	ldr	r0, [r7, #8]
    3956:	4b37      	ldr	r3, [pc, #220]	; (3a34 <wdt_init+0xf8>)
    3958:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    395a:	68bb      	ldr	r3, [r7, #8]
    395c:	681b      	ldr	r3, [r3, #0]
    395e:	f003 0308 	and.w	r3, r3, #8
    3962:	2b00      	cmp	r3, #0
    3964:	d001      	beq.n	396a <wdt_init+0x2e>
		return false;
    3966:	2300      	movs	r3, #0
    3968:	e060      	b.n	3a2c <wdt_init+0xf0>
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    396a:	68bb      	ldr	r3, [r7, #8]
    396c:	681b      	ldr	r3, [r3, #0]
    396e:	f003 0301 	and.w	r3, r3, #1
    3972:	2b00      	cmp	r3, #0
    3974:	d00d      	beq.n	3992 <wdt_init+0x56>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    3976:	68bb      	ldr	r3, [r7, #8]
    3978:	681b      	ldr	r3, [r3, #0]
    397a:	f023 0301 	bic.w	r3, r3, #1
    397e:	4618      	mov	r0, r3
    3980:	4b2d      	ldr	r3, [pc, #180]	; (3a38 <wdt_init+0xfc>)
    3982:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    3984:	bf00      	nop
    3986:	68bb      	ldr	r3, [r7, #8]
    3988:	681b      	ldr	r3, [r3, #0]
    398a:	f003 0301 	and.w	r3, r3, #1
    398e:	2b00      	cmp	r3, #0
    3990:	d1f9      	bne.n	3986 <wdt_init+0x4a>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    3992:	68bb      	ldr	r3, [r7, #8]
    3994:	681b      	ldr	r3, [r3, #0]
    3996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    399a:	2b00      	cmp	r3, #0
    399c:	d00d      	beq.n	39ba <wdt_init+0x7e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    399e:	68bb      	ldr	r3, [r7, #8]
    39a0:	681b      	ldr	r3, [r3, #0]
    39a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    39a6:	4618      	mov	r0, r3
    39a8:	4b23      	ldr	r3, [pc, #140]	; (3a38 <wdt_init+0xfc>)
    39aa:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    39ac:	bf00      	nop
    39ae:	68bb      	ldr	r3, [r7, #8]
    39b0:	681b      	ldr	r3, [r3, #0]
    39b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    39b6:	2b00      	cmp	r3, #0
    39b8:	d1f9      	bne.n	39ae <wdt_init+0x72>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    39ba:	687b      	ldr	r3, [r7, #4]
    39bc:	681a      	ldr	r2, [r3, #0]
			cfg->wdt_mode |
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	685b      	ldr	r3, [r3, #4]
	wdt_set_ctrl(cfg->clk_src |
    39c2:	431a      	orrs	r2, r3
			cfg->wdt_int |
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	689b      	ldr	r3, [r3, #8]
			cfg->wdt_mode |
    39c8:	431a      	orrs	r2, r3
			WDT_CTRL_PSEL(cfg->timeout_period) |
    39ca:	687b      	ldr	r3, [r7, #4]
    39cc:	7b1b      	ldrb	r3, [r3, #12]
    39ce:	021b      	lsls	r3, r3, #8
    39d0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
			cfg->wdt_int |
    39d4:	431a      	orrs	r2, r3
			WDT_CTRL_TBAN(cfg->window_period) |
    39d6:	687b      	ldr	r3, [r7, #4]
    39d8:	7b5b      	ldrb	r3, [r3, #13]
    39da:	049b      	lsls	r3, r3, #18
    39dc:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
			WDT_CTRL_PSEL(cfg->timeout_period) |
    39e0:	431a      	orrs	r2, r3
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	7b9b      	ldrb	r3, [r3, #14]
    39e6:	2b00      	cmp	r3, #0
    39e8:	d001      	beq.n	39ee <wdt_init+0xb2>
    39ea:	2380      	movs	r3, #128	; 0x80
    39ec:	e000      	b.n	39f0 <wdt_init+0xb4>
    39ee:	2300      	movs	r3, #0
			WDT_CTRL_TBAN(cfg->window_period) |
    39f0:	431a      	orrs	r2, r3
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
    39f2:	687b      	ldr	r3, [r7, #4]
    39f4:	7bdb      	ldrb	r3, [r3, #15]
    39f6:	2b00      	cmp	r3, #0
    39f8:	d001      	beq.n	39fe <wdt_init+0xc2>
    39fa:	2302      	movs	r3, #2
    39fc:	e000      	b.n	3a00 <wdt_init+0xc4>
    39fe:	2300      	movs	r3, #0
	wdt_set_ctrl(cfg->clk_src |
    3a00:	4313      	orrs	r3, r2
    3a02:	4618      	mov	r0, r3
    3a04:	4b0c      	ldr	r3, [pc, #48]	; (3a38 <wdt_init+0xfc>)
    3a06:	4798      	blx	r3
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    3a08:	68bb      	ldr	r3, [r7, #8]
    3a0a:	681b      	ldr	r3, [r3, #0]
    3a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3a10:	4618      	mov	r0, r3
    3a12:	4b09      	ldr	r3, [pc, #36]	; (3a38 <wdt_init+0xfc>)
    3a14:	4798      	blx	r3
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    3a16:	bf00      	nop
    3a18:	68bb      	ldr	r3, [r7, #8]
    3a1a:	681b      	ldr	r3, [r3, #0]
    3a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    3a20:	2b00      	cmp	r3, #0
    3a22:	d0f9      	beq.n	3a18 <wdt_init+0xdc>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    3a24:	68b8      	ldr	r0, [r7, #8]
    3a26:	4b05      	ldr	r3, [pc, #20]	; (3a3c <wdt_init+0x100>)
    3a28:	4798      	blx	r3

	return true;
    3a2a:	2301      	movs	r3, #1
}
    3a2c:	4618      	mov	r0, r3
    3a2e:	3710      	adds	r7, #16
    3a30:	46bd      	mov	sp, r7
    3a32:	bd80      	pop	{r7, pc}
    3a34:	000028cd 	.word	0x000028cd
    3a38:	00003879 	.word	0x00003879
    3a3c:	00002cfd 	.word	0x00002cfd

00003a40 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    3a40:	b580      	push	{r7, lr}
    3a42:	b084      	sub	sp, #16
    3a44:	af00      	add	r7, sp, #0
    3a46:	6078      	str	r0, [r7, #4]
	Wdt *wdt = dev_inst->hw_dev;
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	681b      	ldr	r3, [r3, #0]
    3a4c:	60fb      	str	r3, [r7, #12]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    3a4e:	68fb      	ldr	r3, [r7, #12]
    3a50:	681b      	ldr	r3, [r3, #0]
    3a52:	f023 0301 	bic.w	r3, r3, #1
    3a56:	4618      	mov	r0, r3
    3a58:	4b07      	ldr	r3, [pc, #28]	; (3a78 <wdt_disable+0x38>)
    3a5a:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    3a5c:	bf00      	nop
    3a5e:	68fb      	ldr	r3, [r7, #12]
    3a60:	681b      	ldr	r3, [r3, #0]
    3a62:	f003 0301 	and.w	r3, r3, #1
    3a66:	2b00      	cmp	r3, #0
    3a68:	d1f9      	bne.n	3a5e <wdt_disable+0x1e>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    3a6a:	68f8      	ldr	r0, [r7, #12]
    3a6c:	4b03      	ldr	r3, [pc, #12]	; (3a7c <wdt_disable+0x3c>)
    3a6e:	4798      	blx	r3
}
    3a70:	bf00      	nop
    3a72:	3710      	adds	r7, #16
    3a74:	46bd      	mov	sp, r7
    3a76:	bd80      	pop	{r7, pc}
    3a78:	00003879 	.word	0x00003879
    3a7c:	00002cfd 	.word	0x00002cfd

00003a80 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3a80:	b480      	push	{r7}
    3a82:	af00      	add	r7, sp, #0
	while (1) {
    3a84:	e7fe      	b.n	3a84 <Dummy_Handler+0x4>
	...

00003a88 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3a88:	b580      	push	{r7, lr}
    3a8a:	b082      	sub	sp, #8
    3a8c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
    3a8e:	4b16      	ldr	r3, [pc, #88]	; (3ae8 <Reset_Handler+0x60>)
    3a90:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
    3a92:	4b16      	ldr	r3, [pc, #88]	; (3aec <Reset_Handler+0x64>)
    3a94:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
    3a96:	687a      	ldr	r2, [r7, #4]
    3a98:	683b      	ldr	r3, [r7, #0]
    3a9a:	429a      	cmp	r2, r3
    3a9c:	d00c      	beq.n	3ab8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
    3a9e:	e007      	b.n	3ab0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
    3aa0:	683b      	ldr	r3, [r7, #0]
    3aa2:	1d1a      	adds	r2, r3, #4
    3aa4:	603a      	str	r2, [r7, #0]
    3aa6:	687a      	ldr	r2, [r7, #4]
    3aa8:	1d11      	adds	r1, r2, #4
    3aaa:	6079      	str	r1, [r7, #4]
    3aac:	6812      	ldr	r2, [r2, #0]
    3aae:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
    3ab0:	683b      	ldr	r3, [r7, #0]
    3ab2:	4a0f      	ldr	r2, [pc, #60]	; (3af0 <Reset_Handler+0x68>)
    3ab4:	4293      	cmp	r3, r2
    3ab6:	d3f3      	bcc.n	3aa0 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    3ab8:	4b0e      	ldr	r3, [pc, #56]	; (3af4 <Reset_Handler+0x6c>)
    3aba:	603b      	str	r3, [r7, #0]
    3abc:	e004      	b.n	3ac8 <Reset_Handler+0x40>
		*pDest++ = 0;
    3abe:	683b      	ldr	r3, [r7, #0]
    3ac0:	1d1a      	adds	r2, r3, #4
    3ac2:	603a      	str	r2, [r7, #0]
    3ac4:	2200      	movs	r2, #0
    3ac6:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
    3ac8:	683b      	ldr	r3, [r7, #0]
    3aca:	4a0b      	ldr	r2, [pc, #44]	; (3af8 <Reset_Handler+0x70>)
    3acc:	4293      	cmp	r3, r2
    3ace:	d3f6      	bcc.n	3abe <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
    3ad0:	4b0a      	ldr	r3, [pc, #40]	; (3afc <Reset_Handler+0x74>)
    3ad2:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3ad4:	4a0a      	ldr	r2, [pc, #40]	; (3b00 <Reset_Handler+0x78>)
    3ad6:	687b      	ldr	r3, [r7, #4]
    3ad8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    3adc:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
    3ade:	4b09      	ldr	r3, [pc, #36]	; (3b04 <Reset_Handler+0x7c>)
    3ae0:	4798      	blx	r3

	/* Branch to main function */
	main();
    3ae2:	4b09      	ldr	r3, [pc, #36]	; (3b08 <Reset_Handler+0x80>)
    3ae4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
    3ae6:	e7fe      	b.n	3ae6 <Reset_Handler+0x5e>
    3ae8:	00007a78 	.word	0x00007a78
    3aec:	20000000 	.word	0x20000000
    3af0:	200002ac 	.word	0x200002ac
    3af4:	200002ac 	.word	0x200002ac
    3af8:	200004e8 	.word	0x200004e8
    3afc:	00000000 	.word	0x00000000
    3b00:	e000ed00 	.word	0xe000ed00
    3b04:	0000499d 	.word	0x0000499d
    3b08:	000047f9 	.word	0x000047f9

00003b0c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3b0c:	b480      	push	{r7}
    3b0e:	b085      	sub	sp, #20
    3b10:	af00      	add	r7, sp, #0
    3b12:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
    3b14:	4b10      	ldr	r3, [pc, #64]	; (3b58 <_sbrk+0x4c>)
    3b16:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
    3b18:	4b10      	ldr	r3, [pc, #64]	; (3b5c <_sbrk+0x50>)
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d102      	bne.n	3b26 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
    3b20:	4b0e      	ldr	r3, [pc, #56]	; (3b5c <_sbrk+0x50>)
    3b22:	4a0f      	ldr	r2, [pc, #60]	; (3b60 <_sbrk+0x54>)
    3b24:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    3b26:	4b0d      	ldr	r3, [pc, #52]	; (3b5c <_sbrk+0x50>)
    3b28:	681b      	ldr	r3, [r3, #0]
    3b2a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
    3b2c:	68ba      	ldr	r2, [r7, #8]
    3b2e:	687b      	ldr	r3, [r7, #4]
    3b30:	441a      	add	r2, r3
    3b32:	68fb      	ldr	r3, [r7, #12]
    3b34:	429a      	cmp	r2, r3
    3b36:	dd02      	ble.n	3b3e <_sbrk+0x32>
		return (caddr_t) -1;	
    3b38:	f04f 33ff 	mov.w	r3, #4294967295
    3b3c:	e006      	b.n	3b4c <_sbrk+0x40>
	}

	heap += incr;
    3b3e:	4b07      	ldr	r3, [pc, #28]	; (3b5c <_sbrk+0x50>)
    3b40:	681a      	ldr	r2, [r3, #0]
    3b42:	687b      	ldr	r3, [r7, #4]
    3b44:	4413      	add	r3, r2
    3b46:	4a05      	ldr	r2, [pc, #20]	; (3b5c <_sbrk+0x50>)
    3b48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
    3b4a:	68bb      	ldr	r3, [r7, #8]
}
    3b4c:	4618      	mov	r0, r3
    3b4e:	3714      	adds	r7, #20
    3b50:	46bd      	mov	sp, r7
    3b52:	bc80      	pop	{r7}
    3b54:	4770      	bx	lr
    3b56:	bf00      	nop
    3b58:	20007ffc 	.word	0x20007ffc
    3b5c:	20000398 	.word	0x20000398
    3b60:	200014e8 	.word	0x200014e8

00003b64 <__NVIC_SetPriority>:
{
    3b64:	b480      	push	{r7}
    3b66:	b083      	sub	sp, #12
    3b68:	af00      	add	r7, sp, #0
    3b6a:	4603      	mov	r3, r0
    3b6c:	6039      	str	r1, [r7, #0]
    3b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    3b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
    3b74:	2b00      	cmp	r3, #0
    3b76:	db0a      	blt.n	3b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b78:	490d      	ldr	r1, [pc, #52]	; (3bb0 <__NVIC_SetPriority+0x4c>)
    3b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    3b7e:	683a      	ldr	r2, [r7, #0]
    3b80:	b2d2      	uxtb	r2, r2
    3b82:	0112      	lsls	r2, r2, #4
    3b84:	b2d2      	uxtb	r2, r2
    3b86:	440b      	add	r3, r1
    3b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    3b8c:	e00a      	b.n	3ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b8e:	4909      	ldr	r1, [pc, #36]	; (3bb4 <__NVIC_SetPriority+0x50>)
    3b90:	79fb      	ldrb	r3, [r7, #7]
    3b92:	f003 030f 	and.w	r3, r3, #15
    3b96:	3b04      	subs	r3, #4
    3b98:	683a      	ldr	r2, [r7, #0]
    3b9a:	b2d2      	uxtb	r2, r2
    3b9c:	0112      	lsls	r2, r2, #4
    3b9e:	b2d2      	uxtb	r2, r2
    3ba0:	440b      	add	r3, r1
    3ba2:	761a      	strb	r2, [r3, #24]
}
    3ba4:	bf00      	nop
    3ba6:	370c      	adds	r7, #12
    3ba8:	46bd      	mov	sp, r7
    3baa:	bc80      	pop	{r7}
    3bac:	4770      	bx	lr
    3bae:	bf00      	nop
    3bb0:	e000e100 	.word	0xe000e100
    3bb4:	e000ed00 	.word	0xe000ed00

00003bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b082      	sub	sp, #8
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	3b01      	subs	r3, #1
    3bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3bc8:	d301      	bcc.n	3bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
    3bca:	2301      	movs	r3, #1
    3bcc:	e00f      	b.n	3bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3bce:	4a0a      	ldr	r2, [pc, #40]	; (3bf8 <SysTick_Config+0x40>)
    3bd0:	687b      	ldr	r3, [r7, #4]
    3bd2:	3b01      	subs	r3, #1
    3bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    3bd6:	210f      	movs	r1, #15
    3bd8:	f04f 30ff 	mov.w	r0, #4294967295
    3bdc:	4b07      	ldr	r3, [pc, #28]	; (3bfc <SysTick_Config+0x44>)
    3bde:	4798      	blx	r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3be0:	4b05      	ldr	r3, [pc, #20]	; (3bf8 <SysTick_Config+0x40>)
    3be2:	2200      	movs	r2, #0
    3be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3be6:	4b04      	ldr	r3, [pc, #16]	; (3bf8 <SysTick_Config+0x40>)
    3be8:	2207      	movs	r2, #7
    3bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    3bec:	2300      	movs	r3, #0
}
    3bee:	4618      	mov	r0, r3
    3bf0:	3708      	adds	r7, #8
    3bf2:	46bd      	mov	sp, r7
    3bf4:	bd80      	pop	{r7, pc}
    3bf6:	bf00      	nop
    3bf8:	e000e010 	.word	0xe000e010
    3bfc:	00003b65 	.word	0x00003b65

00003c00 <sysclk_get_main_hz>:
{
    3c00:	b480      	push	{r7}
    3c02:	af00      	add	r7, sp, #0
		return OSC_RCSYS_NOMINAL_HZ;
    3c04:	4b02      	ldr	r3, [pc, #8]	; (3c10 <sysclk_get_main_hz+0x10>)
}
    3c06:	4618      	mov	r0, r3
    3c08:	46bd      	mov	sp, r7
    3c0a:	bc80      	pop	{r7}
    3c0c:	4770      	bx	lr
    3c0e:	bf00      	nop
    3c10:	0001c138 	.word	0x0001c138

00003c14 <sysclk_get_cpu_hz>:
{
    3c14:	b580      	push	{r7, lr}
    3c16:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    3c18:	4b02      	ldr	r3, [pc, #8]	; (3c24 <sysclk_get_cpu_hz+0x10>)
    3c1a:	4798      	blx	r3
    3c1c:	4603      	mov	r3, r0
}
    3c1e:	4618      	mov	r0, r3
    3c20:	bd80      	pop	{r7, pc}
    3c22:	bf00      	nop
    3c24:	00003c01 	.word	0x00003c01

00003c28 <ioport_set_pin_mode>:
{
    3c28:	b480      	push	{r7}
    3c2a:	b08d      	sub	sp, #52	; 0x34
    3c2c:	af00      	add	r7, sp, #0
    3c2e:	6078      	str	r0, [r7, #4]
    3c30:	6039      	str	r1, [r7, #0]
    3c32:	687b      	ldr	r3, [r7, #4]
    3c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    3c36:	683b      	ldr	r3, [r7, #0]
    3c38:	62bb      	str	r3, [r7, #40]	; 0x28
    3c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c3c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
    3c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c40:	095a      	lsrs	r2, r3, #5
    3c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c44:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
    3c46:	6a3b      	ldr	r3, [r7, #32]
    3c48:	f003 031f 	and.w	r3, r3, #31
    3c4c:	2101      	movs	r1, #1
    3c4e:	fa01 f303 	lsl.w	r3, r1, r3
    3c52:	61fa      	str	r2, [r7, #28]
    3c54:	61bb      	str	r3, [r7, #24]
    3c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c58:	617b      	str	r3, [r7, #20]
    3c5a:	69fb      	ldr	r3, [r7, #28]
    3c5c:	613b      	str	r3, [r7, #16]
		+ port * sizeof(GpioPort));
    3c5e:	693b      	ldr	r3, [r7, #16]
    3c60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3c64:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3c68:	025b      	lsls	r3, r3, #9
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    3c6a:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
    3c6c:	697b      	ldr	r3, [r7, #20]
    3c6e:	f003 0308 	and.w	r3, r3, #8
    3c72:	2b00      	cmp	r3, #0
    3c74:	d003      	beq.n	3c7e <ioport_set_pin_mode+0x56>
		base->GPIO_PUERS = mask;
    3c76:	68fb      	ldr	r3, [r7, #12]
    3c78:	69ba      	ldr	r2, [r7, #24]
    3c7a:	675a      	str	r2, [r3, #116]	; 0x74
    3c7c:	e002      	b.n	3c84 <ioport_set_pin_mode+0x5c>
		base->GPIO_PUERC = mask;
    3c7e:	68fb      	ldr	r3, [r7, #12]
    3c80:	69ba      	ldr	r2, [r7, #24]
    3c82:	679a      	str	r2, [r3, #120]	; 0x78
	if (mode & IOPORT_MODE_PULLDOWN) {
    3c84:	697b      	ldr	r3, [r7, #20]
    3c86:	f003 0310 	and.w	r3, r3, #16
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d004      	beq.n	3c98 <ioport_set_pin_mode+0x70>
		base->GPIO_PDERS = mask;
    3c8e:	68fb      	ldr	r3, [r7, #12]
    3c90:	69ba      	ldr	r2, [r7, #24]
    3c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3c96:	e003      	b.n	3ca0 <ioport_set_pin_mode+0x78>
		base->GPIO_PDERC = mask;
    3c98:	68fb      	ldr	r3, [r7, #12]
    3c9a:	69ba      	ldr	r2, [r7, #24]
    3c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	if (mode & IOPORT_MODE_GLITCH_FILTER) {
    3ca0:	697b      	ldr	r3, [r7, #20]
    3ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d004      	beq.n	3cb4 <ioport_set_pin_mode+0x8c>
		base->GPIO_GFERS = mask;
    3caa:	68fb      	ldr	r3, [r7, #12]
    3cac:	69ba      	ldr	r2, [r7, #24]
    3cae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    3cb2:	e003      	b.n	3cbc <ioport_set_pin_mode+0x94>
		base->GPIO_GFERC = mask;
    3cb4:	68fb      	ldr	r3, [r7, #12]
    3cb6:	69ba      	ldr	r2, [r7, #24]
    3cb8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    3cbc:	697b      	ldr	r3, [r7, #20]
    3cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d004      	beq.n	3cd0 <ioport_set_pin_mode+0xa8>
		base->GPIO_ODCR0S = mask;
    3cc6:	68fb      	ldr	r3, [r7, #12]
    3cc8:	69ba      	ldr	r2, [r7, #24]
    3cca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3cce:	e003      	b.n	3cd8 <ioport_set_pin_mode+0xb0>
		base->GPIO_ODCR0C = mask;
    3cd0:	68fb      	ldr	r3, [r7, #12]
    3cd2:	69ba      	ldr	r2, [r7, #24]
    3cd4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	if (mode & IOPORT_MODE_MUX_BIT0) {
    3cd8:	697b      	ldr	r3, [r7, #20]
    3cda:	f003 0301 	and.w	r3, r3, #1
    3cde:	2b00      	cmp	r3, #0
    3ce0:	d003      	beq.n	3cea <ioport_set_pin_mode+0xc2>
		base->GPIO_PMR0S = mask;
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	69ba      	ldr	r2, [r7, #24]
    3ce6:	615a      	str	r2, [r3, #20]
    3ce8:	e002      	b.n	3cf0 <ioport_set_pin_mode+0xc8>
		base->GPIO_PMR0C = mask;
    3cea:	68fb      	ldr	r3, [r7, #12]
    3cec:	69ba      	ldr	r2, [r7, #24]
    3cee:	619a      	str	r2, [r3, #24]
	if (mode & IOPORT_MODE_MUX_BIT1) {
    3cf0:	697b      	ldr	r3, [r7, #20]
    3cf2:	f003 0302 	and.w	r3, r3, #2
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d003      	beq.n	3d02 <ioport_set_pin_mode+0xda>
		base->GPIO_PMR1S = mask;
    3cfa:	68fb      	ldr	r3, [r7, #12]
    3cfc:	69ba      	ldr	r2, [r7, #24]
    3cfe:	625a      	str	r2, [r3, #36]	; 0x24
    3d00:	e002      	b.n	3d08 <ioport_set_pin_mode+0xe0>
		base->GPIO_PMR1C = mask;
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	69ba      	ldr	r2, [r7, #24]
    3d06:	629a      	str	r2, [r3, #40]	; 0x28
	if (mode & IOPORT_MODE_MUX_BIT2) {
    3d08:	697b      	ldr	r3, [r7, #20]
    3d0a:	f003 0304 	and.w	r3, r3, #4
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d003      	beq.n	3d1a <ioport_set_pin_mode+0xf2>
		base->GPIO_PMR2S = mask;
    3d12:	68fb      	ldr	r3, [r7, #12]
    3d14:	69ba      	ldr	r2, [r7, #24]
    3d16:	635a      	str	r2, [r3, #52]	; 0x34
}
    3d18:	e002      	b.n	3d20 <ioport_set_pin_mode+0xf8>
		base->GPIO_PMR2C = mask;
    3d1a:	68fb      	ldr	r3, [r7, #12]
    3d1c:	69ba      	ldr	r2, [r7, #24]
    3d1e:	639a      	str	r2, [r3, #56]	; 0x38
    3d20:	bf00      	nop
    3d22:	3734      	adds	r7, #52	; 0x34
    3d24:	46bd      	mov	sp, r7
    3d26:	bc80      	pop	{r7}
    3d28:	4770      	bx	lr

00003d2a <ioport_set_pin_dir>:
{
    3d2a:	b480      	push	{r7}
    3d2c:	b095      	sub	sp, #84	; 0x54
    3d2e:	af00      	add	r7, sp, #0
    3d30:	6078      	str	r0, [r7, #4]
    3d32:	460b      	mov	r3, r1
    3d34:	70fb      	strb	r3, [r7, #3]
    3d36:	687b      	ldr	r3, [r7, #4]
    3d38:	64fb      	str	r3, [r7, #76]	; 0x4c
    3d3a:	78fb      	ldrb	r3, [r7, #3]
    3d3c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	if (dir == IOPORT_DIR_OUTPUT) {
    3d40:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    3d44:	2b01      	cmp	r3, #1
    3d46:	d12f      	bne.n	3da8 <ioport_set_pin_dir+0x7e>
    3d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3d4a:	647b      	str	r3, [r7, #68]	; 0x44
    3d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3d4e:	643b      	str	r3, [r7, #64]	; 0x40
	return pin >> 5;
    3d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3d52:	095b      	lsrs	r3, r3, #5
    3d54:	63fb      	str	r3, [r7, #60]	; 0x3c
		+ port * sizeof(GpioPort));
    3d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3d58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3d5c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3d60:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3d62:	4619      	mov	r1, r3
    3d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3d66:	63bb      	str	r3, [r7, #56]	; 0x38
	return 1U << (pin & 0x1F);
    3d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d6a:	f003 031f 	and.w	r3, r3, #31
    3d6e:	2201      	movs	r2, #1
    3d70:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    3d74:	644b      	str	r3, [r1, #68]	; 0x44
    3d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3d78:	637b      	str	r3, [r7, #52]	; 0x34
    3d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d7c:	633b      	str	r3, [r7, #48]	; 0x30
	return pin >> 5;
    3d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3d80:	095b      	lsrs	r3, r3, #5
    3d82:	62fb      	str	r3, [r7, #44]	; 0x2c
		+ port * sizeof(GpioPort));
    3d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3d86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3d8a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3d8e:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3d90:	4619      	mov	r1, r3
    3d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3d94:	62bb      	str	r3, [r7, #40]	; 0x28
	return 1U << (pin & 0x1F);
    3d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d98:	f003 031f 	and.w	r3, r3, #31
    3d9c:	2201      	movs	r2, #1
    3d9e:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    3da2:	f8c1 3168 	str.w	r3, [r1, #360]	; 0x168
}
    3da6:	e032      	b.n	3e0e <ioport_set_pin_dir+0xe4>
	} else if (dir == IOPORT_DIR_INPUT) {
    3da8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    3dac:	2b00      	cmp	r3, #0
    3dae:	d12e      	bne.n	3e0e <ioport_set_pin_dir+0xe4>
    3db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3db2:	627b      	str	r3, [r7, #36]	; 0x24
    3db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3db6:	623b      	str	r3, [r7, #32]
	return pin >> 5;
    3db8:	6a3b      	ldr	r3, [r7, #32]
    3dba:	095b      	lsrs	r3, r3, #5
    3dbc:	61fb      	str	r3, [r7, #28]
		+ port * sizeof(GpioPort));
    3dbe:	69fb      	ldr	r3, [r7, #28]
    3dc0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3dc4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3dc8:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3dca:	4619      	mov	r1, r3
    3dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3dce:	61bb      	str	r3, [r7, #24]
	return 1U << (pin & 0x1F);
    3dd0:	69bb      	ldr	r3, [r7, #24]
    3dd2:	f003 031f 	and.w	r3, r3, #31
    3dd6:	2201      	movs	r2, #1
    3dd8:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    3ddc:	648b      	str	r3, [r1, #72]	; 0x48
    3dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3de0:	617b      	str	r3, [r7, #20]
    3de2:	697b      	ldr	r3, [r7, #20]
    3de4:	613b      	str	r3, [r7, #16]
	return pin >> 5;
    3de6:	693b      	ldr	r3, [r7, #16]
    3de8:	095b      	lsrs	r3, r3, #5
    3dea:	60fb      	str	r3, [r7, #12]
		+ port * sizeof(GpioPort));
    3dec:	68fb      	ldr	r3, [r7, #12]
    3dee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3df2:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3df6:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3df8:	4619      	mov	r1, r3
    3dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3dfc:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
    3dfe:	68bb      	ldr	r3, [r7, #8]
    3e00:	f003 031f 	and.w	r3, r3, #31
    3e04:	2201      	movs	r2, #1
    3e06:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    3e0a:	f8c1 3164 	str.w	r3, [r1, #356]	; 0x164
    3e0e:	bf00      	nop
    3e10:	3754      	adds	r7, #84	; 0x54
    3e12:	46bd      	mov	sp, r7
    3e14:	bc80      	pop	{r7}
    3e16:	4770      	bx	lr

00003e18 <ioport_set_pin_level>:
{
    3e18:	b480      	push	{r7}
    3e1a:	b08d      	sub	sp, #52	; 0x34
    3e1c:	af00      	add	r7, sp, #0
    3e1e:	6078      	str	r0, [r7, #4]
    3e20:	460b      	mov	r3, r1
    3e22:	70fb      	strb	r3, [r7, #3]
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    3e28:	78fb      	ldrb	r3, [r7, #3]
    3e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if (level) {
    3e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    3e32:	2b00      	cmp	r3, #0
    3e34:	d017      	beq.n	3e66 <ioport_set_pin_level+0x4e>
    3e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3e38:	627b      	str	r3, [r7, #36]	; 0x24
    3e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e3c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
    3e3e:	6a3b      	ldr	r3, [r7, #32]
    3e40:	095b      	lsrs	r3, r3, #5
    3e42:	61fb      	str	r3, [r7, #28]
		+ port * sizeof(GpioPort));
    3e44:	69fb      	ldr	r3, [r7, #28]
    3e46:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3e4a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3e4e:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3e50:	4619      	mov	r1, r3
    3e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3e54:	61bb      	str	r3, [r7, #24]
	return 1U << (pin & 0x1F);
    3e56:	69bb      	ldr	r3, [r7, #24]
    3e58:	f003 031f 	and.w	r3, r3, #31
    3e5c:	2201      	movs	r2, #1
    3e5e:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    3e62:	654b      	str	r3, [r1, #84]	; 0x54
}
    3e64:	e016      	b.n	3e94 <ioport_set_pin_level+0x7c>
    3e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3e68:	617b      	str	r3, [r7, #20]
    3e6a:	697b      	ldr	r3, [r7, #20]
    3e6c:	613b      	str	r3, [r7, #16]
	return pin >> 5;
    3e6e:	693b      	ldr	r3, [r7, #16]
    3e70:	095b      	lsrs	r3, r3, #5
    3e72:	60fb      	str	r3, [r7, #12]
		+ port * sizeof(GpioPort));
    3e74:	68fb      	ldr	r3, [r7, #12]
    3e76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3e7a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3e7e:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    3e80:	4619      	mov	r1, r3
    3e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3e84:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
    3e86:	68bb      	ldr	r3, [r7, #8]
    3e88:	f003 031f 	and.w	r3, r3, #31
    3e8c:	2201      	movs	r2, #1
    3e8e:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    3e92:	658b      	str	r3, [r1, #88]	; 0x58
    3e94:	bf00      	nop
    3e96:	3734      	adds	r7, #52	; 0x34
    3e98:	46bd      	mov	sp, r7
    3e9a:	bc80      	pop	{r7}
    3e9c:	4770      	bx	lr

00003e9e <ioport_get_pin_level>:
{
    3e9e:	b480      	push	{r7}
    3ea0:	b089      	sub	sp, #36	; 0x24
    3ea2:	af00      	add	r7, sp, #0
    3ea4:	6078      	str	r0, [r7, #4]
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	61fb      	str	r3, [r7, #28]
    3eaa:	69fb      	ldr	r3, [r7, #28]
    3eac:	61bb      	str	r3, [r7, #24]
    3eae:	69bb      	ldr	r3, [r7, #24]
    3eb0:	617b      	str	r3, [r7, #20]
	return pin >> 5;
    3eb2:	697b      	ldr	r3, [r7, #20]
    3eb4:	095b      	lsrs	r3, r3, #5
    3eb6:	613b      	str	r3, [r7, #16]
		+ port * sizeof(GpioPort));
    3eb8:	693b      	ldr	r3, [r7, #16]
    3eba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    3ebe:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    3ec2:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
    3ec4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    3ec6:	69fb      	ldr	r3, [r7, #28]
    3ec8:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
    3eca:	68fb      	ldr	r3, [r7, #12]
    3ecc:	f003 031f 	and.w	r3, r3, #31
    3ed0:	2101      	movs	r1, #1
    3ed2:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
    3ed6:	4013      	ands	r3, r2
    3ed8:	2b00      	cmp	r3, #0
    3eda:	bf14      	ite	ne
    3edc:	2301      	movne	r3, #1
    3ede:	2300      	moveq	r3, #0
    3ee0:	b2db      	uxtb	r3, r3
}
    3ee2:	4618      	mov	r0, r3
    3ee4:	3724      	adds	r7, #36	; 0x24
    3ee6:	46bd      	mov	sp, r7
    3ee8:	bc80      	pop	{r7}
    3eea:	4770      	bx	lr

00003eec <check_gpio_input_state>:
// level of the input pin.  The term "state" is more complex.  It indicates
// the state of the input pin such as FALLING EDGE, LOW, RISING EDGE, or HIGH
// the state takes into account history, whereas level is just a 0 or 1
/////////////////////////////////////////////////////////////////////////////
GPIO_INPUT_STATE_TYPE check_gpio_input_state(int pin_number)
{
    3eec:	b580      	push	{r7, lr}
    3eee:	b084      	sub	sp, #16
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	6078      	str	r0, [r7, #4]
	static GPIO_INPUT_LEVEL_TYPE prev_gpio_input_level[NUM_MICROCONTROLLER_PINS];
	// the following few lines of code are intended to be executed one time to
	// determine the initial state of the pin.  This will prevent incorrectly
	// detecting an edge the first time the code is run
	static bool first_time[NUM_MICROCONTROLLER_PINS] = {true};
	if(first_time[pin_number])
    3ef4:	4a2b      	ldr	r2, [pc, #172]	; (3fa4 <check_gpio_input_state+0xb8>)
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	4413      	add	r3, r2
    3efa:	781b      	ldrb	r3, [r3, #0]
    3efc:	2b00      	cmp	r3, #0
    3efe:	d018      	beq.n	3f32 <check_gpio_input_state+0x46>
	{
		current_gpio_input_level[pin_number] = ioport_get_pin_level(pin_number);
    3f00:	687b      	ldr	r3, [r7, #4]
    3f02:	4618      	mov	r0, r3
    3f04:	4b28      	ldr	r3, [pc, #160]	; (3fa8 <check_gpio_input_state+0xbc>)
    3f06:	4798      	blx	r3
    3f08:	4603      	mov	r3, r0
    3f0a:	4619      	mov	r1, r3
    3f0c:	4a27      	ldr	r2, [pc, #156]	; (3fac <check_gpio_input_state+0xc0>)
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	4413      	add	r3, r2
    3f12:	460a      	mov	r2, r1
    3f14:	701a      	strb	r2, [r3, #0]
		prev_gpio_input_level[pin_number] = current_gpio_input_level[pin_number];
    3f16:	4a25      	ldr	r2, [pc, #148]	; (3fac <check_gpio_input_state+0xc0>)
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	4413      	add	r3, r2
    3f1c:	7819      	ldrb	r1, [r3, #0]
    3f1e:	4a24      	ldr	r2, [pc, #144]	; (3fb0 <check_gpio_input_state+0xc4>)
    3f20:	687b      	ldr	r3, [r7, #4]
    3f22:	4413      	add	r3, r2
    3f24:	460a      	mov	r2, r1
    3f26:	701a      	strb	r2, [r3, #0]
		first_time[pin_number] = false;
    3f28:	4a1e      	ldr	r2, [pc, #120]	; (3fa4 <check_gpio_input_state+0xb8>)
    3f2a:	687b      	ldr	r3, [r7, #4]
    3f2c:	4413      	add	r3, r2
    3f2e:	2200      	movs	r2, #0
    3f30:	701a      	strb	r2, [r3, #0]
	}
	// create and initialize gpio_input_state
	// the initialization value is arbitrary because it will be
	// updated by the logic of the function
	GPIO_INPUT_STATE_TYPE gpio_input_state = GPIO_INPUT_STATE_LOW;
    3f32:	2300      	movs	r3, #0
    3f34:	73fb      	strb	r3, [r7, #15]
	// save the input level that you read last time you called the function
	// into prev_gpio_input_level
	prev_gpio_input_level[pin_number] = current_gpio_input_level[pin_number];
    3f36:	4a1d      	ldr	r2, [pc, #116]	; (3fac <check_gpio_input_state+0xc0>)
    3f38:	687b      	ldr	r3, [r7, #4]
    3f3a:	4413      	add	r3, r2
    3f3c:	7819      	ldrb	r1, [r3, #0]
    3f3e:	4a1c      	ldr	r2, [pc, #112]	; (3fb0 <check_gpio_input_state+0xc4>)
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	4413      	add	r3, r2
    3f44:	460a      	mov	r2, r1
    3f46:	701a      	strb	r2, [r3, #0]
	// read a new value from the input pin
	current_gpio_input_level[pin_number] = ioport_get_pin_level(pin_number);
    3f48:	687b      	ldr	r3, [r7, #4]
    3f4a:	4618      	mov	r0, r3
    3f4c:	4b16      	ldr	r3, [pc, #88]	; (3fa8 <check_gpio_input_state+0xbc>)
    3f4e:	4798      	blx	r3
    3f50:	4603      	mov	r3, r0
    3f52:	4619      	mov	r1, r3
    3f54:	4a15      	ldr	r2, [pc, #84]	; (3fac <check_gpio_input_state+0xc0>)
    3f56:	687b      	ldr	r3, [r7, #4]
    3f58:	4413      	add	r3, r2
    3f5a:	460a      	mov	r2, r1
    3f5c:	701a      	strb	r2, [r3, #0]
	// TODO: use the current and previous levels to set gpio_input_state
	// use the UML Activity Diagram from the lab manual to guide your logic
	if(current_gpio_input_level[pin_number] == GPIO_INPUT_LEVEL_LOW){
    3f5e:	4a13      	ldr	r2, [pc, #76]	; (3fac <check_gpio_input_state+0xc0>)
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	4413      	add	r3, r2
    3f64:	781b      	ldrb	r3, [r3, #0]
    3f66:	2b00      	cmp	r3, #0
    3f68:	d10b      	bne.n	3f82 <check_gpio_input_state+0x96>
		if(prev_gpio_input_level[pin_number] == GPIO_INPUT_LEVEL_LOW){
    3f6a:	4a11      	ldr	r2, [pc, #68]	; (3fb0 <check_gpio_input_state+0xc4>)
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	4413      	add	r3, r2
    3f70:	781b      	ldrb	r3, [r3, #0]
    3f72:	2b00      	cmp	r3, #0
    3f74:	d102      	bne.n	3f7c <check_gpio_input_state+0x90>
			gpio_input_state = GPIO_INPUT_STATE_LOW;
    3f76:	2300      	movs	r3, #0
    3f78:	73fb      	strb	r3, [r7, #15]
    3f7a:	e00d      	b.n	3f98 <check_gpio_input_state+0xac>
		}
		else{
			gpio_input_state = GPIO_INPUT_STATE_FALLING_EDGE;
    3f7c:	2303      	movs	r3, #3
    3f7e:	73fb      	strb	r3, [r7, #15]
    3f80:	e00a      	b.n	3f98 <check_gpio_input_state+0xac>
		}
	}
	else{
		if(prev_gpio_input_level[pin_number] == GPIO_INPUT_LEVEL_LOW){
    3f82:	4a0b      	ldr	r2, [pc, #44]	; (3fb0 <check_gpio_input_state+0xc4>)
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	4413      	add	r3, r2
    3f88:	781b      	ldrb	r3, [r3, #0]
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d102      	bne.n	3f94 <check_gpio_input_state+0xa8>
			gpio_input_state = GPIO_INPUT_STATE_RISING_EDGE;
    3f8e:	2301      	movs	r3, #1
    3f90:	73fb      	strb	r3, [r7, #15]
    3f92:	e001      	b.n	3f98 <check_gpio_input_state+0xac>
		}
		else{
			gpio_input_state = GPIO_INPUT_STATE_HIGH;			
    3f94:	2302      	movs	r3, #2
    3f96:	73fb      	strb	r3, [r7, #15]
		}
		
	}
	return gpio_input_state;
    3f98:	7bfb      	ldrb	r3, [r7, #15]
}
    3f9a:	4618      	mov	r0, r3
    3f9c:	3710      	adds	r7, #16
    3f9e:	46bd      	mov	sp, r7
    3fa0:	bd80      	pop	{r7, pc}
    3fa2:	bf00      	nop
    3fa4:	20000078 	.word	0x20000078
    3fa8:	00003e9f 	.word	0x00003e9f
    3fac:	200003a0 	.word	0x200003a0
    3fb0:	20000404 	.word	0x20000404

00003fb4 <SysTick_Handler>:
}

//create a ticks uint32_t variable
volatile uint32_t ticks = 0;
//create an interrupt handler that always increments ticks
void SysTick_Handler(void){
    3fb4:	b480      	push	{r7}
    3fb6:	af00      	add	r7, sp, #0
	ticks++;
    3fb8:	4b04      	ldr	r3, [pc, #16]	; (3fcc <SysTick_Handler+0x18>)
    3fba:	681b      	ldr	r3, [r3, #0]
    3fbc:	3301      	adds	r3, #1
    3fbe:	4a03      	ldr	r2, [pc, #12]	; (3fcc <SysTick_Handler+0x18>)
    3fc0:	6013      	str	r3, [r2, #0]
	//display_time(ticks);
}
    3fc2:	bf00      	nop
    3fc4:	46bd      	mov	sp, r7
    3fc6:	bc80      	pop	{r7}
    3fc8:	4770      	bx	lr
    3fca:	bf00      	nop
    3fcc:	2000039c 	.word	0x2000039c

00003fd0 <mdelay>:


mdelay(uint32_t delay_ms){
    3fd0:	b480      	push	{r7}
    3fd2:	b087      	sub	sp, #28
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	6078      	str	r0, [r7, #4]
	uint32_t start_time = ticks;
    3fd8:	4b0b      	ldr	r3, [pc, #44]	; (4008 <mdelay+0x38>)
    3fda:	681b      	ldr	r3, [r3, #0]
    3fdc:	613b      	str	r3, [r7, #16]
	uint32_t elasped_time = 0;
    3fde:	2300      	movs	r3, #0
    3fe0:	617b      	str	r3, [r7, #20]
	uint32_t end_time;
	
	while(elasped_time < delay_ms){
    3fe2:	e006      	b.n	3ff2 <mdelay+0x22>
		end_time = ticks;
    3fe4:	4b08      	ldr	r3, [pc, #32]	; (4008 <mdelay+0x38>)
    3fe6:	681b      	ldr	r3, [r3, #0]
    3fe8:	60fb      	str	r3, [r7, #12]
		elasped_time = end_time - start_time;
    3fea:	68fa      	ldr	r2, [r7, #12]
    3fec:	693b      	ldr	r3, [r7, #16]
    3fee:	1ad3      	subs	r3, r2, r3
    3ff0:	617b      	str	r3, [r7, #20]
	while(elasped_time < delay_ms){
    3ff2:	697a      	ldr	r2, [r7, #20]
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	429a      	cmp	r2, r3
    3ff8:	d3f4      	bcc.n	3fe4 <mdelay+0x14>
	}
}
    3ffa:	bf00      	nop
    3ffc:	4618      	mov	r0, r3
    3ffe:	371c      	adds	r7, #28
    4000:	46bd      	mov	sp, r7
    4002:	bc80      	pop	{r7}
    4004:	4770      	bx	lr
    4006:	bf00      	nop
    4008:	2000039c 	.word	0x2000039c

0000400c <TC00_Handler>:
}


// interrupt handler for the Timer Counter interrupt we configured
void TC00_Handler(void)
{
    400c:	b580      	push	{r7, lr}
    400e:	af00      	add	r7, sp, #0
	
	static LED_STATE_TYPE level = LED_STATE_OFF;
	// tc_get_status must be called to acknowledge that the
	// interrupt was handled
	tc_get_status(TC0, 0);
    4010:	2100      	movs	r1, #0
    4012:	480c      	ldr	r0, [pc, #48]	; (4044 <TC00_Handler+0x38>)
    4014:	4b0c      	ldr	r3, [pc, #48]	; (4048 <TC00_Handler+0x3c>)
    4016:	4798      	blx	r3
	// TODO: fill in the code to create the square wave
	if(level == LED_STATE_OFF){
    4018:	4b0c      	ldr	r3, [pc, #48]	; (404c <TC00_Handler+0x40>)
    401a:	781b      	ldrb	r3, [r3, #0]
    401c:	2b00      	cmp	r3, #0
    401e:	d107      	bne.n	4030 <TC00_Handler+0x24>
		ioport_set_pin_level(RED_LED_PIN, BREADBOARD_LED_ON);
    4020:	2101      	movs	r1, #1
    4022:	2042      	movs	r0, #66	; 0x42
    4024:	4b0a      	ldr	r3, [pc, #40]	; (4050 <TC00_Handler+0x44>)
    4026:	4798      	blx	r3
		level = LED_STATE_ON;
    4028:	4b08      	ldr	r3, [pc, #32]	; (404c <TC00_Handler+0x40>)
    402a:	2201      	movs	r2, #1
    402c:	701a      	strb	r2, [r3, #0]
	}
	else{
		ioport_set_pin_level(RED_LED_PIN, BREADBOARD_LED_OFF);
		level = LED_STATE_OFF;
	}
}
    402e:	e006      	b.n	403e <TC00_Handler+0x32>
		ioport_set_pin_level(RED_LED_PIN, BREADBOARD_LED_OFF);
    4030:	2100      	movs	r1, #0
    4032:	2042      	movs	r0, #66	; 0x42
    4034:	4b06      	ldr	r3, [pc, #24]	; (4050 <TC00_Handler+0x44>)
    4036:	4798      	blx	r3
		level = LED_STATE_OFF;
    4038:	4b04      	ldr	r3, [pc, #16]	; (404c <TC00_Handler+0x40>)
    403a:	2200      	movs	r2, #0
    403c:	701a      	strb	r2, [r3, #0]
}
    403e:	bf00      	nop
    4040:	bd80      	pop	{r7, pc}
    4042:	bf00      	nop
    4044:	40010000 	.word	0x40010000
    4048:	000003dd 	.word	0x000003dd
    404c:	20000468 	.word	0x20000468
    4050:	00003e19 	.word	0x00003e19

00004054 <initialize_hrox_sensor>:
volatile uint8_t data_buf_tx[4];




static void initialize_hrox_sensor(void){
    4054:	b590      	push	{r4, r7, lr}
    4056:	b08d      	sub	sp, #52	; 0x34
    4058:	af00      	add	r7, sp, #0
	
	struct twim_config twim_conf;
	twim_conf.twim_clk = sysclk_get_cpu_hz();
    405a:	4b29      	ldr	r3, [pc, #164]	; (4100 <initialize_hrox_sensor+0xac>)
    405c:	4798      	blx	r3
    405e:	4603      	mov	r3, r0
    4060:	61bb      	str	r3, [r7, #24]
	twim_conf.speed = 115200;
    4062:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    4066:	61fb      	str	r3, [r7, #28]
	twim_conf.smbus = false;
    4068:	2300      	movs	r3, #0
    406a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	twim_conf.hsmode_speed = 0;
    406e:	2300      	movs	r3, #0
    4070:	623b      	str	r3, [r7, #32]
	twim_conf.data_setup_cycles = 0;
    4072:	2300      	movs	r3, #0
    4074:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twim_conf.hsmode_data_setup_cycles = 0;
    4078:	2300      	movs	r3, #0
    407a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	twim_conf.clock_slew_limit = 0;
    407e:	2300      	movs	r3, #0
    4080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	twim_conf.clock_drive_strength_low = 0;
    4084:	2300      	movs	r3, #0
    4086:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	twim_conf.data_slew_limit = 0;
    408a:	2300      	movs	r3, #0
    408c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	twim_conf.data_drive_strength_low = 0;
    4090:	2300      	movs	r3, #0
    4092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	twim_conf.hs_clock_slew_limit = 0;
    4096:	2300      	movs	r3, #0
    4098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	twim_conf.hs_clock_drive_strength_high = 0;
    409c:	2300      	movs	r3, #0
    409e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	twim_conf.hs_clock_drive_strength_low = 0;
    40a2:	2300      	movs	r3, #0
    40a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	twim_conf.hs_data_slew_limit = 0;
    40a8:	2300      	movs	r3, #0
    40aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	twim_conf.hs_data_drive_strength_low = 0;
    40ae:	2300      	movs	r3, #0
    40b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	twim_set_config(TWIM3, &twim_conf);
    40b4:	f107 0318 	add.w	r3, r7, #24
    40b8:	4619      	mov	r1, r3
    40ba:	4812      	ldr	r0, [pc, #72]	; (4104 <initialize_hrox_sensor+0xb0>)
    40bc:	4b12      	ldr	r3, [pc, #72]	; (4108 <initialize_hrox_sensor+0xb4>)
    40be:	4798      	blx	r3
	
	
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    40c0:	2355      	movs	r3, #85	; 0x55
    40c2:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    40c4:	2300      	movs	r3, #0
    40c6:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    40c8:	2300      	movs	r3, #0
    40ca:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    40cc:	2300      	movs	r3, #0
    40ce:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    40d0:	2300      	movs	r3, #0
    40d2:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    40d4:	2300      	movs	r3, #0
    40d6:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    40d8:	4b0c      	ldr	r3, [pc, #48]	; (410c <initialize_hrox_sensor+0xb8>)
    40da:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 4;
    40dc:	2304      	movs	r3, #4
    40de:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    40e0:	2300      	movs	r3, #0
    40e2:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    40e4:	2300      	movs	r3, #0
    40e6:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    40e8:	2300      	movs	r3, #0
    40ea:	75bb      	strb	r3, [r7, #22]
	

	twim_set_callback(TWIM3, 0, twim_default_callback, 1);
    40ec:	2301      	movs	r3, #1
    40ee:	4a08      	ldr	r2, [pc, #32]	; (4110 <initialize_hrox_sensor+0xbc>)
    40f0:	2100      	movs	r1, #0
    40f2:	4804      	ldr	r0, [pc, #16]	; (4104 <initialize_hrox_sensor+0xb0>)
    40f4:	4c07      	ldr	r4, [pc, #28]	; (4114 <initialize_hrox_sensor+0xc0>)
    40f6:	47a0      	blx	r4
	
}
    40f8:	bf00      	nop
    40fa:	3734      	adds	r7, #52	; 0x34
    40fc:	46bd      	mov	sp, r7
    40fe:	bd90      	pop	{r4, r7, pc}
    4100:	00003c15 	.word	0x00003c15
    4104:	4007c000 	.word	0x4007c000
    4108:	00000ca1 	.word	0x00000ca1
    410c:	200004cc 	.word	0x200004cc
    4110:	00000711 	.word	0x00000711
    4114:	00001575 	.word	0x00001575

00004118 <config_app_mode>:
	ioport_set_pin_level(RST_PIN, GPIO_INPUT_LEVEL_HIGH);
	mdelay(50);
}

// configure and set RST and MFIO pins
void config_app_mode(){
    4118:	b580      	push	{r7, lr}
    411a:	af00      	add	r7, sp, #0
	ioport_set_pin_level(RST_PIN, GPIO_INPUT_LEVEL_LOW);
    411c:	2100      	movs	r1, #0
    411e:	2049      	movs	r0, #73	; 0x49
    4120:	4b08      	ldr	r3, [pc, #32]	; (4144 <config_app_mode+0x2c>)
    4122:	4798      	blx	r3
	ioport_set_pin_level(MFIO_PIN, GPIO_INPUT_LEVEL_HIGH);	
    4124:	2101      	movs	r1, #1
    4126:	2048      	movs	r0, #72	; 0x48
    4128:	4b06      	ldr	r3, [pc, #24]	; (4144 <config_app_mode+0x2c>)
    412a:	4798      	blx	r3
	mdelay(10);
    412c:	200a      	movs	r0, #10
    412e:	4b06      	ldr	r3, [pc, #24]	; (4148 <config_app_mode+0x30>)
    4130:	4798      	blx	r3
	ioport_set_pin_level(RST_PIN, GPIO_INPUT_LEVEL_HIGH);
    4132:	2101      	movs	r1, #1
    4134:	2049      	movs	r0, #73	; 0x49
    4136:	4b03      	ldr	r3, [pc, #12]	; (4144 <config_app_mode+0x2c>)
    4138:	4798      	blx	r3
	mdelay(50);
    413a:	2032      	movs	r0, #50	; 0x32
    413c:	4b02      	ldr	r3, [pc, #8]	; (4148 <config_app_mode+0x30>)
    413e:	4798      	blx	r3
}
    4140:	bf00      	nop
    4142:	bd80      	pop	{r7, pc}
    4144:	00003e19 	.word	0x00003e19
    4148:	00003fd1 	.word	0x00003fd1

0000414c <write_to_read_device_mode>:
	
	twi_master_write(TWIM3, &packet_tx);
}

// Read MAX32664 mode
void write_to_read_device_mode(){
    414c:	b580      	push	{r7, lr}
    414e:	b086      	sub	sp, #24
    4150:	af00      	add	r7, sp, #0
	data_buf_tx[0] = 0b00000010; 
    4152:	4b12      	ldr	r3, [pc, #72]	; (419c <write_to_read_device_mode+0x50>)
    4154:	2202      	movs	r2, #2
    4156:	701a      	strb	r2, [r3, #0]
	data_buf_tx[1] = 0b00000000;
    4158:	4b10      	ldr	r3, [pc, #64]	; (419c <write_to_read_device_mode+0x50>)
    415a:	2200      	movs	r2, #0
    415c:	705a      	strb	r2, [r3, #1]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    415e:	2355      	movs	r3, #85	; 0x55
    4160:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    4162:	2300      	movs	r3, #0
    4164:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    4166:	2300      	movs	r3, #0
    4168:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    416a:	2300      	movs	r3, #0
    416c:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    416e:	2300      	movs	r3, #0
    4170:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    4172:	2300      	movs	r3, #0
    4174:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    4176:	4b09      	ldr	r3, [pc, #36]	; (419c <write_to_read_device_mode+0x50>)
    4178:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 2;
    417a:	2302      	movs	r3, #2
    417c:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    417e:	2300      	movs	r3, #0
    4180:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    4182:	2300      	movs	r3, #0
    4184:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    4186:	2300      	movs	r3, #0
    4188:	75bb      	strb	r3, [r7, #22]
	
	twi_master_write(TWIM3, &packet_tx);
    418a:	1d3b      	adds	r3, r7, #4
    418c:	4619      	mov	r1, r3
    418e:	4804      	ldr	r0, [pc, #16]	; (41a0 <write_to_read_device_mode+0x54>)
    4190:	4b04      	ldr	r3, [pc, #16]	; (41a4 <write_to_read_device_mode+0x58>)
    4192:	4798      	blx	r3
}
    4194:	bf00      	nop
    4196:	3718      	adds	r7, #24
    4198:	46bd      	mov	sp, r7
    419a:	bd80      	pop	{r7, pc}
    419c:	200004cc 	.word	0x200004cc
    41a0:	4007c000 	.word	0x4007c000
    41a4:	000012dd 	.word	0x000012dd

000041a8 <read_device>:

void read_device(){
    41a8:	b580      	push	{r7, lr}
    41aa:	b086      	sub	sp, #24
    41ac:	af00      	add	r7, sp, #0
	twi_package_t packet_rx;
	packet_rx.chip = 0b1010101;
    41ae:	2355      	movs	r3, #85	; 0x55
    41b0:	607b      	str	r3, [r7, #4]
	packet_rx.addr[0] = 0;
    41b2:	2300      	movs	r3, #0
    41b4:	723b      	strb	r3, [r7, #8]
	packet_rx.addr[1] = 0;
    41b6:	2300      	movs	r3, #0
    41b8:	727b      	strb	r3, [r7, #9]
	packet_rx.addr[2] = 0;
    41ba:	2300      	movs	r3, #0
    41bc:	72bb      	strb	r3, [r7, #10]
	packet_rx.addr[3] = 0;
    41be:	2300      	movs	r3, #0
    41c0:	72fb      	strb	r3, [r7, #11]
	packet_rx.addr_length = 0;
    41c2:	2300      	movs	r3, #0
    41c4:	72fb      	strb	r3, [r7, #11]
	packet_rx.buffer = (void *) data_buf_rx;
    41c6:	4b09      	ldr	r3, [pc, #36]	; (41ec <read_device+0x44>)
    41c8:	60fb      	str	r3, [r7, #12]
	packet_rx.length = sizeof(data_buf_rx);
    41ca:	2313      	movs	r3, #19
    41cc:	613b      	str	r3, [r7, #16]
	packet_rx.ten_bit = 0;
    41ce:	2300      	movs	r3, #0
    41d0:	753b      	strb	r3, [r7, #20]
	packet_rx.high_speed = 0;
    41d2:	2300      	movs	r3, #0
    41d4:	757b      	strb	r3, [r7, #21]
	packet_rx.high_speed_code = 0;
    41d6:	2300      	movs	r3, #0
    41d8:	75bb      	strb	r3, [r7, #22]
	
	twi_master_read(TWIM3, &packet_rx);
    41da:	1d3b      	adds	r3, r7, #4
    41dc:	4619      	mov	r1, r3
    41de:	4804      	ldr	r0, [pc, #16]	; (41f0 <read_device+0x48>)
    41e0:	4b04      	ldr	r3, [pc, #16]	; (41f4 <read_device+0x4c>)
    41e2:	4798      	blx	r3
}
    41e4:	bf00      	nop
    41e6:	3718      	adds	r7, #24
    41e8:	46bd      	mov	sp, r7
    41ea:	bd80      	pop	{r7, pc}
    41ec:	200004d0 	.word	0x200004d0
    41f0:	4007c000 	.word	0x4007c000
    41f4:	00000ded 	.word	0x00000ded

000041f8 <write_to_get_reg_att>:

// Get register attributes
void write_to_get_reg_att(){
    41f8:	b580      	push	{r7, lr}
    41fa:	b086      	sub	sp, #24
    41fc:	af00      	add	r7, sp, #0
	data_buf_tx[0] = 0b01000010;
    41fe:	4b12      	ldr	r3, [pc, #72]	; (4248 <write_to_get_reg_att+0x50>)
    4200:	2242      	movs	r2, #66	; 0x42
    4202:	701a      	strb	r2, [r3, #0]
	data_buf_tx[1] = 0b00000011;
    4204:	4b10      	ldr	r3, [pc, #64]	; (4248 <write_to_get_reg_att+0x50>)
    4206:	2203      	movs	r2, #3
    4208:	705a      	strb	r2, [r3, #1]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    420a:	2355      	movs	r3, #85	; 0x55
    420c:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    420e:	2300      	movs	r3, #0
    4210:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    4212:	2300      	movs	r3, #0
    4214:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    4216:	2300      	movs	r3, #0
    4218:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    421a:	2300      	movs	r3, #0
    421c:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    421e:	2300      	movs	r3, #0
    4220:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    4222:	4b09      	ldr	r3, [pc, #36]	; (4248 <write_to_get_reg_att+0x50>)
    4224:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 2;
    4226:	2302      	movs	r3, #2
    4228:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    422a:	2300      	movs	r3, #0
    422c:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    422e:	2300      	movs	r3, #0
    4230:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    4232:	2300      	movs	r3, #0
    4234:	75bb      	strb	r3, [r7, #22]
	
	twi_master_write(TWIM3, &packet_tx);
    4236:	1d3b      	adds	r3, r7, #4
    4238:	4619      	mov	r1, r3
    423a:	4804      	ldr	r0, [pc, #16]	; (424c <write_to_get_reg_att+0x54>)
    423c:	4b04      	ldr	r3, [pc, #16]	; (4250 <write_to_get_reg_att+0x58>)
    423e:	4798      	blx	r3
}
    4240:	bf00      	nop
    4242:	3718      	adds	r7, #24
    4244:	46bd      	mov	sp, r7
    4246:	bd80      	pop	{r7, pc}
    4248:	200004cc 	.word	0x200004cc
    424c:	4007c000 	.word	0x4007c000
    4250:	000012dd 	.word	0x000012dd

00004254 <write_to_output_mode>:

// Set output mode of MAX32664.
void write_to_output_mode(){
    4254:	b580      	push	{r7, lr}
    4256:	b086      	sub	sp, #24
    4258:	af00      	add	r7, sp, #0
	data_buf_tx[0] = 0b00010000;
    425a:	4b14      	ldr	r3, [pc, #80]	; (42ac <write_to_output_mode+0x58>)
    425c:	2210      	movs	r2, #16
    425e:	701a      	strb	r2, [r3, #0]
	data_buf_tx[1] = 0b00000000;
    4260:	4b12      	ldr	r3, [pc, #72]	; (42ac <write_to_output_mode+0x58>)
    4262:	2200      	movs	r2, #0
    4264:	705a      	strb	r2, [r3, #1]
	data_buf_tx[2] = 0b00000011;
    4266:	4b11      	ldr	r3, [pc, #68]	; (42ac <write_to_output_mode+0x58>)
    4268:	2203      	movs	r2, #3
    426a:	709a      	strb	r2, [r3, #2]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    426c:	2355      	movs	r3, #85	; 0x55
    426e:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    4270:	2300      	movs	r3, #0
    4272:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    4274:	2300      	movs	r3, #0
    4276:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    4278:	2300      	movs	r3, #0
    427a:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    427c:	2300      	movs	r3, #0
    427e:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    4280:	2300      	movs	r3, #0
    4282:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    4284:	4b09      	ldr	r3, [pc, #36]	; (42ac <write_to_output_mode+0x58>)
    4286:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 3;
    4288:	2303      	movs	r3, #3
    428a:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    428c:	2300      	movs	r3, #0
    428e:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    4290:	2300      	movs	r3, #0
    4292:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    4294:	2300      	movs	r3, #0
    4296:	75bb      	strb	r3, [r7, #22]
	
	twi_master_write(TWIM3, &packet_tx);
    4298:	1d3b      	adds	r3, r7, #4
    429a:	4619      	mov	r1, r3
    429c:	4804      	ldr	r0, [pc, #16]	; (42b0 <write_to_output_mode+0x5c>)
    429e:	4b05      	ldr	r3, [pc, #20]	; (42b4 <write_to_output_mode+0x60>)
    42a0:	4798      	blx	r3
}
    42a2:	bf00      	nop
    42a4:	3718      	adds	r7, #24
    42a6:	46bd      	mov	sp, r7
    42a8:	bd80      	pop	{r7, pc}
    42aa:	bf00      	nop
    42ac:	200004cc 	.word	0x200004cc
    42b0:	4007c000 	.word	0x4007c000
    42b4:	000012dd 	.word	0x000012dd

000042b8 <write_set_FIFO>:

// Set FIFO threshold
void write_set_FIFO(){
    42b8:	b580      	push	{r7, lr}
    42ba:	b086      	sub	sp, #24
    42bc:	af00      	add	r7, sp, #0
	data_buf_tx[0] = 0b00010000;
    42be:	4b14      	ldr	r3, [pc, #80]	; (4310 <write_set_FIFO+0x58>)
    42c0:	2210      	movs	r2, #16
    42c2:	701a      	strb	r2, [r3, #0]
	data_buf_tx[1] = 0b00000001;
    42c4:	4b12      	ldr	r3, [pc, #72]	; (4310 <write_set_FIFO+0x58>)
    42c6:	2201      	movs	r2, #1
    42c8:	705a      	strb	r2, [r3, #1]
	data_buf_tx[2] = 0b00001111;
    42ca:	4b11      	ldr	r3, [pc, #68]	; (4310 <write_set_FIFO+0x58>)
    42cc:	220f      	movs	r2, #15
    42ce:	709a      	strb	r2, [r3, #2]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    42d0:	2355      	movs	r3, #85	; 0x55
    42d2:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    42d4:	2300      	movs	r3, #0
    42d6:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    42d8:	2300      	movs	r3, #0
    42da:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    42dc:	2300      	movs	r3, #0
    42de:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    42e0:	2300      	movs	r3, #0
    42e2:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    42e4:	2300      	movs	r3, #0
    42e6:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    42e8:	4b09      	ldr	r3, [pc, #36]	; (4310 <write_set_FIFO+0x58>)
    42ea:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 3;
    42ec:	2303      	movs	r3, #3
    42ee:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    42f0:	2300      	movs	r3, #0
    42f2:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    42f4:	2300      	movs	r3, #0
    42f6:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    42f8:	2300      	movs	r3, #0
    42fa:	75bb      	strb	r3, [r7, #22]
	
	twi_master_write(TWIM3, &packet_tx);
    42fc:	1d3b      	adds	r3, r7, #4
    42fe:	4619      	mov	r1, r3
    4300:	4804      	ldr	r0, [pc, #16]	; (4314 <write_set_FIFO+0x5c>)
    4302:	4b05      	ldr	r3, [pc, #20]	; (4318 <write_set_FIFO+0x60>)
    4304:	4798      	blx	r3
}
    4306:	bf00      	nop
    4308:	3718      	adds	r7, #24
    430a:	46bd      	mov	sp, r7
    430c:	bd80      	pop	{r7, pc}
    430e:	bf00      	nop
    4310:	200004cc 	.word	0x200004cc
    4314:	4007c000 	.word	0x4007c000
    4318:	000012dd 	.word	0x000012dd

0000431c <write_automatic_gain_control>:


// Enable automatic gain control
void write_automatic_gain_control(){
    431c:	b580      	push	{r7, lr}
    431e:	b086      	sub	sp, #24
    4320:	af00      	add	r7, sp, #0
	data_buf_tx[0] = 0b01010010;
    4322:	4b14      	ldr	r3, [pc, #80]	; (4374 <write_automatic_gain_control+0x58>)
    4324:	2252      	movs	r2, #82	; 0x52
    4326:	701a      	strb	r2, [r3, #0]
	data_buf_tx[1] = 0b00000000;
    4328:	4b12      	ldr	r3, [pc, #72]	; (4374 <write_automatic_gain_control+0x58>)
    432a:	2200      	movs	r2, #0
    432c:	705a      	strb	r2, [r3, #1]
	data_buf_tx[2] = 0b00000001;
    432e:	4b11      	ldr	r3, [pc, #68]	; (4374 <write_automatic_gain_control+0x58>)
    4330:	2201      	movs	r2, #1
    4332:	709a      	strb	r2, [r3, #2]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    4334:	2355      	movs	r3, #85	; 0x55
    4336:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    4338:	2300      	movs	r3, #0
    433a:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    433c:	2300      	movs	r3, #0
    433e:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    4340:	2300      	movs	r3, #0
    4342:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    4344:	2300      	movs	r3, #0
    4346:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    4348:	2300      	movs	r3, #0
    434a:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    434c:	4b09      	ldr	r3, [pc, #36]	; (4374 <write_automatic_gain_control+0x58>)
    434e:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 3;
    4350:	2303      	movs	r3, #3
    4352:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    4354:	2300      	movs	r3, #0
    4356:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    4358:	2300      	movs	r3, #0
    435a:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    435c:	2300      	movs	r3, #0
    435e:	75bb      	strb	r3, [r7, #22]
	
	twi_master_write(TWIM3, &packet_tx);
    4360:	1d3b      	adds	r3, r7, #4
    4362:	4619      	mov	r1, r3
    4364:	4804      	ldr	r0, [pc, #16]	; (4378 <write_automatic_gain_control+0x5c>)
    4366:	4b05      	ldr	r3, [pc, #20]	; (437c <write_automatic_gain_control+0x60>)
    4368:	4798      	blx	r3
}
    436a:	bf00      	nop
    436c:	3718      	adds	r7, #24
    436e:	46bd      	mov	sp, r7
    4370:	bd80      	pop	{r7, pc}
    4372:	bf00      	nop
    4374:	200004cc 	.word	0x200004cc
    4378:	4007c000 	.word	0x4007c000
    437c:	000012dd 	.word	0x000012dd

00004380 <write_enable_hr_sensor>:

// Enable HR sensor
void write_enable_hr_sensor(){
    4380:	b580      	push	{r7, lr}
    4382:	b086      	sub	sp, #24
    4384:	af00      	add	r7, sp, #0
	data_buf_tx[0] = 0b01000100;
    4386:	4b14      	ldr	r3, [pc, #80]	; (43d8 <write_enable_hr_sensor+0x58>)
    4388:	2244      	movs	r2, #68	; 0x44
    438a:	701a      	strb	r2, [r3, #0]
	data_buf_tx[1] = 0b00000011;
    438c:	4b12      	ldr	r3, [pc, #72]	; (43d8 <write_enable_hr_sensor+0x58>)
    438e:	2203      	movs	r2, #3
    4390:	705a      	strb	r2, [r3, #1]
	data_buf_tx[2] = 0b00000001;
    4392:	4b11      	ldr	r3, [pc, #68]	; (43d8 <write_enable_hr_sensor+0x58>)
    4394:	2201      	movs	r2, #1
    4396:	709a      	strb	r2, [r3, #2]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    4398:	2355      	movs	r3, #85	; 0x55
    439a:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    439c:	2300      	movs	r3, #0
    439e:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    43a0:	2300      	movs	r3, #0
    43a2:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    43a4:	2300      	movs	r3, #0
    43a6:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    43a8:	2300      	movs	r3, #0
    43aa:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    43ac:	2300      	movs	r3, #0
    43ae:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    43b0:	4b09      	ldr	r3, [pc, #36]	; (43d8 <write_enable_hr_sensor+0x58>)
    43b2:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 3;
    43b4:	2303      	movs	r3, #3
    43b6:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    43b8:	2300      	movs	r3, #0
    43ba:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    43bc:	2300      	movs	r3, #0
    43be:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	75bb      	strb	r3, [r7, #22]
	
	twi_master_write(TWIM3, &packet_tx);
    43c4:	1d3b      	adds	r3, r7, #4
    43c6:	4619      	mov	r1, r3
    43c8:	4804      	ldr	r0, [pc, #16]	; (43dc <write_enable_hr_sensor+0x5c>)
    43ca:	4b05      	ldr	r3, [pc, #20]	; (43e0 <write_enable_hr_sensor+0x60>)
    43cc:	4798      	blx	r3
}
    43ce:	bf00      	nop
    43d0:	3718      	adds	r7, #24
    43d2:	46bd      	mov	sp, r7
    43d4:	bd80      	pop	{r7, pc}
    43d6:	bf00      	nop
    43d8:	200004cc 	.word	0x200004cc
    43dc:	4007c000 	.word	0x4007c000
    43e0:	000012dd 	.word	0x000012dd

000043e4 <write_enable_algorithm>:

// Enable algorithm
void write_enable_algorithm(){
    43e4:	b580      	push	{r7, lr}
    43e6:	b086      	sub	sp, #24
    43e8:	af00      	add	r7, sp, #0
	data_buf_tx[0] = 0b01010010;
    43ea:	4b14      	ldr	r3, [pc, #80]	; (443c <write_enable_algorithm+0x58>)
    43ec:	2252      	movs	r2, #82	; 0x52
    43ee:	701a      	strb	r2, [r3, #0]
	data_buf_tx[1] = 0b00000010;
    43f0:	4b12      	ldr	r3, [pc, #72]	; (443c <write_enable_algorithm+0x58>)
    43f2:	2202      	movs	r2, #2
    43f4:	705a      	strb	r2, [r3, #1]
	data_buf_tx[2] = 0b00000001;
    43f6:	4b11      	ldr	r3, [pc, #68]	; (443c <write_enable_algorithm+0x58>)
    43f8:	2201      	movs	r2, #1
    43fa:	709a      	strb	r2, [r3, #2]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    43fc:	2355      	movs	r3, #85	; 0x55
    43fe:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    4400:	2300      	movs	r3, #0
    4402:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    4404:	2300      	movs	r3, #0
    4406:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    4408:	2300      	movs	r3, #0
    440a:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    440c:	2300      	movs	r3, #0
    440e:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    4410:	2300      	movs	r3, #0
    4412:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    4414:	4b09      	ldr	r3, [pc, #36]	; (443c <write_enable_algorithm+0x58>)
    4416:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 3;
    4418:	2303      	movs	r3, #3
    441a:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    441c:	2300      	movs	r3, #0
    441e:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    4420:	2300      	movs	r3, #0
    4422:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    4424:	2300      	movs	r3, #0
    4426:	75bb      	strb	r3, [r7, #22]
	
	twi_master_write(TWIM3, &packet_tx);
    4428:	1d3b      	adds	r3, r7, #4
    442a:	4619      	mov	r1, r3
    442c:	4804      	ldr	r0, [pc, #16]	; (4440 <write_enable_algorithm+0x5c>)
    442e:	4b05      	ldr	r3, [pc, #20]	; (4444 <write_enable_algorithm+0x60>)
    4430:	4798      	blx	r3
}
    4432:	bf00      	nop
    4434:	3718      	adds	r7, #24
    4436:	46bd      	mov	sp, r7
    4438:	bd80      	pop	{r7, pc}
    443a:	bf00      	nop
    443c:	200004cc 	.word	0x200004cc
    4440:	4007c000 	.word	0x4007c000
    4444:	000012dd 	.word	0x000012dd

00004448 <write_set_num_samples>:

// Configure algorithm samples
void write_set_num_samples(){
    4448:	b580      	push	{r7, lr}
    444a:	b086      	sub	sp, #24
    444c:	af00      	add	r7, sp, #0
	data_buf_tx[0] = 0b01010000;
    444e:	4b15      	ldr	r3, [pc, #84]	; (44a4 <write_set_num_samples+0x5c>)
    4450:	2250      	movs	r2, #80	; 0x50
    4452:	701a      	strb	r2, [r3, #0]
	data_buf_tx[1] = 0b00000000;
    4454:	4b13      	ldr	r3, [pc, #76]	; (44a4 <write_set_num_samples+0x5c>)
    4456:	2200      	movs	r2, #0
    4458:	705a      	strb	r2, [r3, #1]
	data_buf_tx[2] = 0b00000011;
    445a:	4b12      	ldr	r3, [pc, #72]	; (44a4 <write_set_num_samples+0x5c>)
    445c:	2203      	movs	r2, #3
    445e:	709a      	strb	r2, [r3, #2]
	data_buf_tx[3] = 0b11111111;
    4460:	4b10      	ldr	r3, [pc, #64]	; (44a4 <write_set_num_samples+0x5c>)
    4462:	22ff      	movs	r2, #255	; 0xff
    4464:	70da      	strb	r2, [r3, #3]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    4466:	2355      	movs	r3, #85	; 0x55
    4468:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    446a:	2300      	movs	r3, #0
    446c:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    446e:	2300      	movs	r3, #0
    4470:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    4472:	2300      	movs	r3, #0
    4474:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    4476:	2300      	movs	r3, #0
    4478:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    447a:	2300      	movs	r3, #0
    447c:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    447e:	4b09      	ldr	r3, [pc, #36]	; (44a4 <write_set_num_samples+0x5c>)
    4480:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 4;
    4482:	2304      	movs	r3, #4
    4484:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    4486:	2300      	movs	r3, #0
    4488:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    448a:	2300      	movs	r3, #0
    448c:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    448e:	2300      	movs	r3, #0
    4490:	75bb      	strb	r3, [r7, #22]
	
	twi_master_write(TWIM3, &packet_tx);
    4492:	1d3b      	adds	r3, r7, #4
    4494:	4619      	mov	r1, r3
    4496:	4804      	ldr	r0, [pc, #16]	; (44a8 <write_set_num_samples+0x60>)
    4498:	4b04      	ldr	r3, [pc, #16]	; (44ac <write_set_num_samples+0x64>)
    449a:	4798      	blx	r3
}
    449c:	bf00      	nop
    449e:	3718      	adds	r7, #24
    44a0:	46bd      	mov	sp, r7
    44a2:	bd80      	pop	{r7, pc}
    44a4:	200004cc 	.word	0x200004cc
    44a8:	4007c000 	.word	0x4007c000
    44ac:	000012dd 	.word	0x000012dd

000044b0 <write_sensor_hub_status>:

// Read Sensor hub Status 
void write_sensor_hub_status(){
    44b0:	b580      	push	{r7, lr}
    44b2:	b086      	sub	sp, #24
    44b4:	af00      	add	r7, sp, #0
	data_buf_tx[0] = 0b00000000;
    44b6:	4b12      	ldr	r3, [pc, #72]	; (4500 <write_sensor_hub_status+0x50>)
    44b8:	2200      	movs	r2, #0
    44ba:	701a      	strb	r2, [r3, #0]
	data_buf_tx[1] = 0b00000000;
    44bc:	4b10      	ldr	r3, [pc, #64]	; (4500 <write_sensor_hub_status+0x50>)
    44be:	2200      	movs	r2, #0
    44c0:	705a      	strb	r2, [r3, #1]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    44c2:	2355      	movs	r3, #85	; 0x55
    44c4:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    44c6:	2300      	movs	r3, #0
    44c8:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    44ca:	2300      	movs	r3, #0
    44cc:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    44ce:	2300      	movs	r3, #0
    44d0:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    44d2:	2300      	movs	r3, #0
    44d4:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    44d6:	2300      	movs	r3, #0
    44d8:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    44da:	4b09      	ldr	r3, [pc, #36]	; (4500 <write_sensor_hub_status+0x50>)
    44dc:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 2;
    44de:	2302      	movs	r3, #2
    44e0:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    44e2:	2300      	movs	r3, #0
    44e4:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    44e6:	2300      	movs	r3, #0
    44e8:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    44ea:	2300      	movs	r3, #0
    44ec:	75bb      	strb	r3, [r7, #22]
	
	twi_master_write(TWIM3, &packet_tx);
    44ee:	1d3b      	adds	r3, r7, #4
    44f0:	4619      	mov	r1, r3
    44f2:	4804      	ldr	r0, [pc, #16]	; (4504 <write_sensor_hub_status+0x54>)
    44f4:	4b04      	ldr	r3, [pc, #16]	; (4508 <write_sensor_hub_status+0x58>)
    44f6:	4798      	blx	r3
}
    44f8:	bf00      	nop
    44fa:	3718      	adds	r7, #24
    44fc:	46bd      	mov	sp, r7
    44fe:	bd80      	pop	{r7, pc}
    4500:	200004cc 	.word	0x200004cc
    4504:	4007c000 	.word	0x4007c000
    4508:	000012dd 	.word	0x000012dd

0000450c <write_to_read_FIFO>:



// Read Data Stored in FIFO
void write_to_read_FIFO(){
    450c:	b580      	push	{r7, lr}
    450e:	b086      	sub	sp, #24
    4510:	af00      	add	r7, sp, #0
	data_buf_tx[0] = 0b00010010;
    4512:	4b12      	ldr	r3, [pc, #72]	; (455c <write_to_read_FIFO+0x50>)
    4514:	2212      	movs	r2, #18
    4516:	701a      	strb	r2, [r3, #0]
	data_buf_tx[1] = 0b00000001;
    4518:	4b10      	ldr	r3, [pc, #64]	; (455c <write_to_read_FIFO+0x50>)
    451a:	2201      	movs	r2, #1
    451c:	705a      	strb	r2, [r3, #1]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    451e:	2355      	movs	r3, #85	; 0x55
    4520:	607b      	str	r3, [r7, #4]
	packet_tx.addr[0] = 0;
    4522:	2300      	movs	r3, #0
    4524:	723b      	strb	r3, [r7, #8]
	packet_tx.addr[1] = 0;
    4526:	2300      	movs	r3, #0
    4528:	727b      	strb	r3, [r7, #9]
	packet_tx.addr[2] = 0;
    452a:	2300      	movs	r3, #0
    452c:	72bb      	strb	r3, [r7, #10]
	packet_tx.addr[3] = 0;
    452e:	2300      	movs	r3, #0
    4530:	72fb      	strb	r3, [r7, #11]
	packet_tx.addr_length = 0;
    4532:	2300      	movs	r3, #0
    4534:	72fb      	strb	r3, [r7, #11]
	packet_tx.buffer = (void *) data_buf_tx;
    4536:	4b09      	ldr	r3, [pc, #36]	; (455c <write_to_read_FIFO+0x50>)
    4538:	60fb      	str	r3, [r7, #12]
	packet_tx.length = 2;
    453a:	2302      	movs	r3, #2
    453c:	613b      	str	r3, [r7, #16]
	packet_tx.ten_bit = 0;
    453e:	2300      	movs	r3, #0
    4540:	753b      	strb	r3, [r7, #20]
	packet_tx.high_speed = 0;
    4542:	2300      	movs	r3, #0
    4544:	757b      	strb	r3, [r7, #21]
	packet_tx.high_speed_code = 0;
    4546:	2300      	movs	r3, #0
    4548:	75bb      	strb	r3, [r7, #22]
	
	twi_master_write(TWIM3, &packet_tx);
    454a:	1d3b      	adds	r3, r7, #4
    454c:	4619      	mov	r1, r3
    454e:	4804      	ldr	r0, [pc, #16]	; (4560 <write_to_read_FIFO+0x54>)
    4550:	4b04      	ldr	r3, [pc, #16]	; (4564 <write_to_read_FIFO+0x58>)
    4552:	4798      	blx	r3
}
    4554:	bf00      	nop
    4556:	3718      	adds	r7, #24
    4558:	46bd      	mov	sp, r7
    455a:	bd80      	pop	{r7, pc}
    455c:	200004cc 	.word	0x200004cc
    4560:	4007c000 	.word	0x4007c000
    4564:	000012dd 	.word	0x000012dd

00004568 <display_value>:

uint8_t const str[] = "No Object Detected";
bool flag = false;
int count = 0;

void display_value(float value){
    4568:	b580      	push	{r7, lr}
    456a:	b082      	sub	sp, #8
    456c:	af00      	add	r7, sp, #0
    456e:	6078      	str	r0, [r7, #4]
	
	if(value > 0){
    4570:	4b23      	ldr	r3, [pc, #140]	; (4600 <display_value+0x98>)
    4572:	f04f 0100 	mov.w	r1, #0
    4576:	6878      	ldr	r0, [r7, #4]
    4578:	4798      	blx	r3
    457a:	4603      	mov	r3, r0
    457c:	2b00      	cmp	r3, #0
    457e:	d00a      	beq.n	4596 <display_value+0x2e>
		c42412a_show_numeric_dec(value);
    4580:	4b20      	ldr	r3, [pc, #128]	; (4604 <display_value+0x9c>)
    4582:	6878      	ldr	r0, [r7, #4]
    4584:	4798      	blx	r3
    4586:	4603      	mov	r3, r0
    4588:	4618      	mov	r0, r3
    458a:	4b1f      	ldr	r3, [pc, #124]	; (4608 <display_value+0xa0>)
    458c:	4798      	blx	r3
		c42412a_show_icon(C42412A_ICON_DOT_4);
    458e:	210e      	movs	r1, #14
    4590:	2003      	movs	r0, #3
    4592:	4b1e      	ldr	r3, [pc, #120]	; (460c <display_value+0xa4>)
    4594:	4798      	blx	r3
	}
	if(data_buf_rx[18] == 0x00){
    4596:	4b1e      	ldr	r3, [pc, #120]	; (4610 <display_value+0xa8>)
    4598:	7c9b      	ldrb	r3, [r3, #18]
    459a:	b2db      	uxtb	r3, r3
    459c:	2b00      	cmp	r3, #0
    459e:	d104      	bne.n	45aa <display_value+0x42>
		c42412a_clear_all();
    45a0:	4b1c      	ldr	r3, [pc, #112]	; (4614 <display_value+0xac>)
    45a2:	4798      	blx	r3
		c42412a_show_text("NOD");
    45a4:	481c      	ldr	r0, [pc, #112]	; (4618 <display_value+0xb0>)
    45a6:	4b1d      	ldr	r3, [pc, #116]	; (461c <display_value+0xb4>)
    45a8:	4798      	blx	r3
	}
	if(data_buf_rx[18] == 0x01){
    45aa:	4b19      	ldr	r3, [pc, #100]	; (4610 <display_value+0xa8>)
    45ac:	7c9b      	ldrb	r3, [r3, #18]
    45ae:	b2db      	uxtb	r3, r3
    45b0:	2b01      	cmp	r3, #1
    45b2:	d104      	bne.n	45be <display_value+0x56>
		c42412a_clear_all();
    45b4:	4b17      	ldr	r3, [pc, #92]	; (4614 <display_value+0xac>)
    45b6:	4798      	blx	r3
		c42412a_show_text("OD");
    45b8:	4819      	ldr	r0, [pc, #100]	; (4620 <display_value+0xb8>)
    45ba:	4b18      	ldr	r3, [pc, #96]	; (461c <display_value+0xb4>)
    45bc:	4798      	blx	r3
	}
	if(data_buf_rx[18] == 0x02){
    45be:	4b14      	ldr	r3, [pc, #80]	; (4610 <display_value+0xa8>)
    45c0:	7c9b      	ldrb	r3, [r3, #18]
    45c2:	b2db      	uxtb	r3, r3
    45c4:	2b02      	cmp	r3, #2
    45c6:	d104      	bne.n	45d2 <display_value+0x6a>
		c42412a_clear_all();
    45c8:	4b12      	ldr	r3, [pc, #72]	; (4614 <display_value+0xac>)
    45ca:	4798      	blx	r3
		c42412a_show_text("NF");
    45cc:	4815      	ldr	r0, [pc, #84]	; (4624 <display_value+0xbc>)
    45ce:	4b13      	ldr	r3, [pc, #76]	; (461c <display_value+0xb4>)
    45d0:	4798      	blx	r3
	}
	if(data_buf_rx[18] == 0x03 && value == 0){
    45d2:	4b0f      	ldr	r3, [pc, #60]	; (4610 <display_value+0xa8>)
    45d4:	7c9b      	ldrb	r3, [r3, #18]
    45d6:	b2db      	uxtb	r3, r3
    45d8:	2b03      	cmp	r3, #3
    45da:	d10d      	bne.n	45f8 <display_value+0x90>
    45dc:	4b12      	ldr	r3, [pc, #72]	; (4628 <display_value+0xc0>)
    45de:	f04f 0100 	mov.w	r1, #0
    45e2:	6878      	ldr	r0, [r7, #4]
    45e4:	4798      	blx	r3
    45e6:	4603      	mov	r3, r0
    45e8:	2b00      	cmp	r3, #0
    45ea:	d100      	bne.n	45ee <display_value+0x86>
		c42412a_clear_all();
		c42412a_show_text("CALC");
	}
	
	
}
    45ec:	e004      	b.n	45f8 <display_value+0x90>
		c42412a_clear_all();
    45ee:	4b09      	ldr	r3, [pc, #36]	; (4614 <display_value+0xac>)
    45f0:	4798      	blx	r3
		c42412a_show_text("CALC");
    45f2:	480e      	ldr	r0, [pc, #56]	; (462c <display_value+0xc4>)
    45f4:	4b09      	ldr	r3, [pc, #36]	; (461c <display_value+0xb4>)
    45f6:	4798      	blx	r3
}
    45f8:	bf00      	nop
    45fa:	3708      	adds	r7, #8
    45fc:	46bd      	mov	sp, r7
    45fe:	bd80      	pop	{r7, pc}
    4600:	00007775 	.word	0x00007775
    4604:	00007789 	.word	0x00007789
    4608:	0000184d 	.word	0x0000184d
    460c:	000017a9 	.word	0x000017a9
    4610:	200004d0 	.word	0x200004d0
    4614:	0000175d 	.word	0x0000175d
    4618:	000077e0 	.word	0x000077e0
    461c:	00001785 	.word	0x00001785
    4620:	000077e4 	.word	0x000077e4
    4624:	000077e8 	.word	0x000077e8
    4628:	00007725 	.word	0x00007725
    462c:	000077ec 	.word	0x000077ec

00004630 <calculate_hr>:

bool good_heart_rate = false;
bool good_ox = false;
void calculate_hr(){
    4630:	b580      	push	{r7, lr}
    4632:	b082      	sub	sp, #8
    4634:	af00      	add	r7, sp, #0
	
	float rate = (float)((data_buf_rx[13]<<8) + data_buf_rx[14]);
    4636:	4b2c      	ldr	r3, [pc, #176]	; (46e8 <calculate_hr+0xb8>)
    4638:	7b5b      	ldrb	r3, [r3, #13]
    463a:	b2db      	uxtb	r3, r3
    463c:	021b      	lsls	r3, r3, #8
    463e:	4a2a      	ldr	r2, [pc, #168]	; (46e8 <calculate_hr+0xb8>)
    4640:	7b92      	ldrb	r2, [r2, #14]
    4642:	b2d2      	uxtb	r2, r2
    4644:	441a      	add	r2, r3
    4646:	4b29      	ldr	r3, [pc, #164]	; (46ec <calculate_hr+0xbc>)
    4648:	4610      	mov	r0, r2
    464a:	4798      	blx	r3
    464c:	4603      	mov	r3, r0
    464e:	607b      	str	r3, [r7, #4]
	
	if(((rate >= 600) && (rate <= 1000))){
    4650:	4b27      	ldr	r3, [pc, #156]	; (46f0 <calculate_hr+0xc0>)
    4652:	4928      	ldr	r1, [pc, #160]	; (46f4 <calculate_hr+0xc4>)
    4654:	6878      	ldr	r0, [r7, #4]
    4656:	4798      	blx	r3
    4658:	4603      	mov	r3, r0
    465a:	2b00      	cmp	r3, #0
    465c:	d00e      	beq.n	467c <calculate_hr+0x4c>
    465e:	4b26      	ldr	r3, [pc, #152]	; (46f8 <calculate_hr+0xc8>)
    4660:	4926      	ldr	r1, [pc, #152]	; (46fc <calculate_hr+0xcc>)
    4662:	6878      	ldr	r0, [r7, #4]
    4664:	4798      	blx	r3
    4666:	4603      	mov	r3, r0
    4668:	2b00      	cmp	r3, #0
    466a:	d007      	beq.n	467c <calculate_hr+0x4c>
		ioport_set_pin_level(RED_LED_PIN, GPIO_INPUT_LEVEL_LOW);
    466c:	2100      	movs	r1, #0
    466e:	2042      	movs	r0, #66	; 0x42
    4670:	4b23      	ldr	r3, [pc, #140]	; (4700 <calculate_hr+0xd0>)
    4672:	4798      	blx	r3
		ioport_set_pin_level(GREEN_LED_PIN, GPIO_INPUT_LEVEL_HIGH);
    4674:	2101      	movs	r1, #1
    4676:	202c      	movs	r0, #44	; 0x2c
    4678:	4b21      	ldr	r3, [pc, #132]	; (4700 <calculate_hr+0xd0>)
    467a:	4798      	blx	r3
	}
	if(rate == 0){
    467c:	4b21      	ldr	r3, [pc, #132]	; (4704 <calculate_hr+0xd4>)
    467e:	f04f 0100 	mov.w	r1, #0
    4682:	6878      	ldr	r0, [r7, #4]
    4684:	4798      	blx	r3
    4686:	4603      	mov	r3, r0
    4688:	2b00      	cmp	r3, #0
    468a:	d007      	beq.n	469c <calculate_hr+0x6c>
		ioport_set_pin_level(RED_LED_PIN, GPIO_INPUT_LEVEL_LOW);
    468c:	2100      	movs	r1, #0
    468e:	2042      	movs	r0, #66	; 0x42
    4690:	4b1b      	ldr	r3, [pc, #108]	; (4700 <calculate_hr+0xd0>)
    4692:	4798      	blx	r3
		ioport_set_pin_level(GREEN_LED_PIN, GPIO_INPUT_LEVEL_LOW);
    4694:	2100      	movs	r1, #0
    4696:	202c      	movs	r0, #44	; 0x2c
    4698:	4b19      	ldr	r3, [pc, #100]	; (4700 <calculate_hr+0xd0>)
    469a:	4798      	blx	r3
	}
	if(((rate < 600) || (rate > 1000)) && (rate != 0.00)){
    469c:	4b1a      	ldr	r3, [pc, #104]	; (4708 <calculate_hr+0xd8>)
    469e:	4915      	ldr	r1, [pc, #84]	; (46f4 <calculate_hr+0xc4>)
    46a0:	6878      	ldr	r0, [r7, #4]
    46a2:	4798      	blx	r3
    46a4:	4603      	mov	r3, r0
    46a6:	2b00      	cmp	r3, #0
    46a8:	d106      	bne.n	46b8 <calculate_hr+0x88>
    46aa:	4b18      	ldr	r3, [pc, #96]	; (470c <calculate_hr+0xdc>)
    46ac:	4913      	ldr	r1, [pc, #76]	; (46fc <calculate_hr+0xcc>)
    46ae:	6878      	ldr	r0, [r7, #4]
    46b0:	4798      	blx	r3
    46b2:	4603      	mov	r3, r0
    46b4:	2b00      	cmp	r3, #0
    46b6:	d00f      	beq.n	46d8 <calculate_hr+0xa8>
    46b8:	4b12      	ldr	r3, [pc, #72]	; (4704 <calculate_hr+0xd4>)
    46ba:	f04f 0100 	mov.w	r1, #0
    46be:	6878      	ldr	r0, [r7, #4]
    46c0:	4798      	blx	r3
    46c2:	4603      	mov	r3, r0
    46c4:	2b00      	cmp	r3, #0
    46c6:	d107      	bne.n	46d8 <calculate_hr+0xa8>
		//turn on red LED
		ioport_set_pin_level(GREEN_LED_PIN, GPIO_INPUT_LEVEL_LOW);
    46c8:	2100      	movs	r1, #0
    46ca:	202c      	movs	r0, #44	; 0x2c
    46cc:	4b0c      	ldr	r3, [pc, #48]	; (4700 <calculate_hr+0xd0>)
    46ce:	4798      	blx	r3
		ioport_set_pin_level(RED_LED_PIN, GPIO_INPUT_LEVEL_HIGH);
    46d0:	2101      	movs	r1, #1
    46d2:	2042      	movs	r0, #66	; 0x42
    46d4:	4b0a      	ldr	r3, [pc, #40]	; (4700 <calculate_hr+0xd0>)
    46d6:	4798      	blx	r3
	}
	
	
	display_value(rate);
    46d8:	6878      	ldr	r0, [r7, #4]
    46da:	4b0d      	ldr	r3, [pc, #52]	; (4710 <calculate_hr+0xe0>)
    46dc:	4798      	blx	r3
	
	
	
}
    46de:	bf00      	nop
    46e0:	3708      	adds	r7, #8
    46e2:	46bd      	mov	sp, r7
    46e4:	bd80      	pop	{r7, pc}
    46e6:	bf00      	nop
    46e8:	200004d0 	.word	0x200004d0
    46ec:	000075f5 	.word	0x000075f5
    46f0:	00007761 	.word	0x00007761
    46f4:	44160000 	.word	0x44160000
    46f8:	0000774d 	.word	0x0000774d
    46fc:	447a0000 	.word	0x447a0000
    4700:	00003e19 	.word	0x00003e19
    4704:	00007725 	.word	0x00007725
    4708:	00007739 	.word	0x00007739
    470c:	00007775 	.word	0x00007775
    4710:	00004569 	.word	0x00004569

00004714 <calculate_ox>:



void calculate_ox(){
    4714:	b580      	push	{r7, lr}
    4716:	b082      	sub	sp, #8
    4718:	af00      	add	r7, sp, #0
	
	float ox = (float)((data_buf_rx[16]<<8) + data_buf_rx[17]);
    471a:	4b2c      	ldr	r3, [pc, #176]	; (47cc <calculate_ox+0xb8>)
    471c:	7c1b      	ldrb	r3, [r3, #16]
    471e:	b2db      	uxtb	r3, r3
    4720:	021b      	lsls	r3, r3, #8
    4722:	4a2a      	ldr	r2, [pc, #168]	; (47cc <calculate_ox+0xb8>)
    4724:	7c52      	ldrb	r2, [r2, #17]
    4726:	b2d2      	uxtb	r2, r2
    4728:	441a      	add	r2, r3
    472a:	4b29      	ldr	r3, [pc, #164]	; (47d0 <calculate_ox+0xbc>)
    472c:	4610      	mov	r0, r2
    472e:	4798      	blx	r3
    4730:	4603      	mov	r3, r0
    4732:	607b      	str	r3, [r7, #4]
	
	if((ox >= 950) && (ox <= 1000)){
    4734:	4b27      	ldr	r3, [pc, #156]	; (47d4 <calculate_ox+0xc0>)
    4736:	4928      	ldr	r1, [pc, #160]	; (47d8 <calculate_ox+0xc4>)
    4738:	6878      	ldr	r0, [r7, #4]
    473a:	4798      	blx	r3
    473c:	4603      	mov	r3, r0
    473e:	2b00      	cmp	r3, #0
    4740:	d00e      	beq.n	4760 <calculate_ox+0x4c>
    4742:	4b26      	ldr	r3, [pc, #152]	; (47dc <calculate_ox+0xc8>)
    4744:	4926      	ldr	r1, [pc, #152]	; (47e0 <calculate_ox+0xcc>)
    4746:	6878      	ldr	r0, [r7, #4]
    4748:	4798      	blx	r3
    474a:	4603      	mov	r3, r0
    474c:	2b00      	cmp	r3, #0
    474e:	d007      	beq.n	4760 <calculate_ox+0x4c>
		
		ioport_set_pin_level(RED_LED_PIN, GPIO_INPUT_LEVEL_LOW);
    4750:	2100      	movs	r1, #0
    4752:	2042      	movs	r0, #66	; 0x42
    4754:	4b23      	ldr	r3, [pc, #140]	; (47e4 <calculate_ox+0xd0>)
    4756:	4798      	blx	r3
		ioport_set_pin_level(GREEN_LED_PIN, GPIO_INPUT_LEVEL_HIGH);
    4758:	2101      	movs	r1, #1
    475a:	202c      	movs	r0, #44	; 0x2c
    475c:	4b21      	ldr	r3, [pc, #132]	; (47e4 <calculate_ox+0xd0>)
    475e:	4798      	blx	r3
	}
	if(ox == 0){
    4760:	4b21      	ldr	r3, [pc, #132]	; (47e8 <calculate_ox+0xd4>)
    4762:	f04f 0100 	mov.w	r1, #0
    4766:	6878      	ldr	r0, [r7, #4]
    4768:	4798      	blx	r3
    476a:	4603      	mov	r3, r0
    476c:	2b00      	cmp	r3, #0
    476e:	d007      	beq.n	4780 <calculate_ox+0x6c>
		ioport_set_pin_level(RED_LED_PIN, GPIO_INPUT_LEVEL_LOW);
    4770:	2100      	movs	r1, #0
    4772:	2042      	movs	r0, #66	; 0x42
    4774:	4b1b      	ldr	r3, [pc, #108]	; (47e4 <calculate_ox+0xd0>)
    4776:	4798      	blx	r3
		ioport_set_pin_level(GREEN_LED_PIN, GPIO_INPUT_LEVEL_LOW);
    4778:	2100      	movs	r1, #0
    477a:	202c      	movs	r0, #44	; 0x2c
    477c:	4b19      	ldr	r3, [pc, #100]	; (47e4 <calculate_ox+0xd0>)
    477e:	4798      	blx	r3
	}
	if(((ox < 950) || (ox > 1000)) && (ox != 0.00)){
    4780:	4b1a      	ldr	r3, [pc, #104]	; (47ec <calculate_ox+0xd8>)
    4782:	4915      	ldr	r1, [pc, #84]	; (47d8 <calculate_ox+0xc4>)
    4784:	6878      	ldr	r0, [r7, #4]
    4786:	4798      	blx	r3
    4788:	4603      	mov	r3, r0
    478a:	2b00      	cmp	r3, #0
    478c:	d106      	bne.n	479c <calculate_ox+0x88>
    478e:	4b18      	ldr	r3, [pc, #96]	; (47f0 <calculate_ox+0xdc>)
    4790:	4913      	ldr	r1, [pc, #76]	; (47e0 <calculate_ox+0xcc>)
    4792:	6878      	ldr	r0, [r7, #4]
    4794:	4798      	blx	r3
    4796:	4603      	mov	r3, r0
    4798:	2b00      	cmp	r3, #0
    479a:	d00f      	beq.n	47bc <calculate_ox+0xa8>
    479c:	4b12      	ldr	r3, [pc, #72]	; (47e8 <calculate_ox+0xd4>)
    479e:	f04f 0100 	mov.w	r1, #0
    47a2:	6878      	ldr	r0, [r7, #4]
    47a4:	4798      	blx	r3
    47a6:	4603      	mov	r3, r0
    47a8:	2b00      	cmp	r3, #0
    47aa:	d107      	bne.n	47bc <calculate_ox+0xa8>
		ioport_set_pin_level(GREEN_LED_PIN, GPIO_INPUT_LEVEL_LOW);
    47ac:	2100      	movs	r1, #0
    47ae:	202c      	movs	r0, #44	; 0x2c
    47b0:	4b0c      	ldr	r3, [pc, #48]	; (47e4 <calculate_ox+0xd0>)
    47b2:	4798      	blx	r3
		ioport_set_pin_level(RED_LED_PIN, GPIO_INPUT_LEVEL_HIGH);
    47b4:	2101      	movs	r1, #1
    47b6:	2042      	movs	r0, #66	; 0x42
    47b8:	4b0a      	ldr	r3, [pc, #40]	; (47e4 <calculate_ox+0xd0>)
    47ba:	4798      	blx	r3
	}
	
	
	display_value(ox);
    47bc:	6878      	ldr	r0, [r7, #4]
    47be:	4b0d      	ldr	r3, [pc, #52]	; (47f4 <calculate_ox+0xe0>)
    47c0:	4798      	blx	r3
}
    47c2:	bf00      	nop
    47c4:	3708      	adds	r7, #8
    47c6:	46bd      	mov	sp, r7
    47c8:	bd80      	pop	{r7, pc}
    47ca:	bf00      	nop
    47cc:	200004d0 	.word	0x200004d0
    47d0:	000075f5 	.word	0x000075f5
    47d4:	00007761 	.word	0x00007761
    47d8:	446d8000 	.word	0x446d8000
    47dc:	0000774d 	.word	0x0000774d
    47e0:	447a0000 	.word	0x447a0000
    47e4:	00003e19 	.word	0x00003e19
    47e8:	00007725 	.word	0x00007725
    47ec:	00007739 	.word	0x00007739
    47f0:	00007775 	.word	0x00007775
    47f4:	00004569 	.word	0x00004569

000047f8 <main>:
#include "utilities_tc.h"
#include "utilities.h"
#include "utilities_hrox_sensor.h"

int main (void)
{
    47f8:	b580      	push	{r7, lr}
    47fa:	b082      	sub	sp, #8
    47fc:	af00      	add	r7, sp, #0
	
	//initialize board
	board_init();
    47fe:	4b4a      	ldr	r3, [pc, #296]	; (4928 <main+0x130>)
    4800:	4798      	blx	r3

	//initialize system clock
	sysclk_init();
    4802:	4b4a      	ldr	r3, [pc, #296]	; (492c <main+0x134>)
    4804:	4798      	blx	r3

	//configure clock to count in seconds correctly
	SysTick_Config(sysclk_get_cpu_hz() / 1000);
    4806:	4b4a      	ldr	r3, [pc, #296]	; (4930 <main+0x138>)
    4808:	4798      	blx	r3
    480a:	4602      	mov	r2, r0
    480c:	4b49      	ldr	r3, [pc, #292]	; (4934 <main+0x13c>)
    480e:	fba3 2302 	umull	r2, r3, r3, r2
    4812:	099b      	lsrs	r3, r3, #6
    4814:	4618      	mov	r0, r3
    4816:	4b48      	ldr	r3, [pc, #288]	; (4938 <main+0x140>)
    4818:	4798      	blx	r3

	//configure LCD
	c42412a_init();
    481a:	4b48      	ldr	r3, [pc, #288]	; (493c <main+0x144>)
    481c:	4798      	blx	r3
	
	//initialize system clock
	initialize_hrox_sensor();
    481e:	4b48      	ldr	r3, [pc, #288]	; (4940 <main+0x148>)
    4820:	4798      	blx	r3

	// configure and set RST and MFIO pins
	ioport_set_pin_dir(RST_PIN, IOPORT_DIR_OUTPUT);
    4822:	2101      	movs	r1, #1
    4824:	2049      	movs	r0, #73	; 0x49
    4826:	4b47      	ldr	r3, [pc, #284]	; (4944 <main+0x14c>)
    4828:	4798      	blx	r3
	ioport_set_pin_dir(MFIO_PIN, IOPORT_DIR_OUTPUT);
    482a:	2101      	movs	r1, #1
    482c:	2048      	movs	r0, #72	; 0x48
    482e:	4b45      	ldr	r3, [pc, #276]	; (4944 <main+0x14c>)
    4830:	4798      	blx	r3
	//config_boot_mode();
	//write_to_boot();
	config_app_mode();
    4832:	4b45      	ldr	r3, [pc, #276]	; (4948 <main+0x150>)
    4834:	4798      	blx	r3
	
	
	//what potter said to do
	mdelay(1000);
    4836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    483a:	4b44      	ldr	r3, [pc, #272]	; (494c <main+0x154>)
    483c:	4798      	blx	r3
	ioport_set_pin_dir(MFIO_PIN, IOPORT_DIR_INPUT);
    483e:	2100      	movs	r1, #0
    4840:	2048      	movs	r0, #72	; 0x48
    4842:	4b40      	ldr	r3, [pc, #256]	; (4944 <main+0x14c>)
    4844:	4798      	blx	r3
	ioport_set_pin_mode(MFIO_PIN, IOPORT_MODE_PULLUP);
    4846:	2108      	movs	r1, #8
    4848:	2048      	movs	r0, #72	; 0x48
    484a:	4b41      	ldr	r3, [pc, #260]	; (4950 <main+0x158>)
    484c:	4798      	blx	r3
	
	
	// Read MAX32664 mode
	write_to_read_device_mode();
    484e:	4b41      	ldr	r3, [pc, #260]	; (4954 <main+0x15c>)
    4850:	4798      	blx	r3
	read_device();
    4852:	4b41      	ldr	r3, [pc, #260]	; (4958 <main+0x160>)
    4854:	4798      	blx	r3
		//read app mode correctly 
	
	
	// Get register attributes
	write_to_get_reg_att();
    4856:	4b41      	ldr	r3, [pc, #260]	; (495c <main+0x164>)
    4858:	4798      	blx	r3
	read_device();
    485a:	4b3f      	ldr	r3, [pc, #252]	; (4958 <main+0x160>)
    485c:	4798      	blx	r3

	
	// Set output mode of MAX32664.
	write_to_output_mode();
    485e:	4b40      	ldr	r3, [pc, #256]	; (4960 <main+0x168>)
    4860:	4798      	blx	r3
	read_device();
    4862:	4b3d      	ldr	r3, [pc, #244]	; (4958 <main+0x160>)
    4864:	4798      	blx	r3
	
	// Set FIFO threshold
	write_set_FIFO();
    4866:	4b3f      	ldr	r3, [pc, #252]	; (4964 <main+0x16c>)
    4868:	4798      	blx	r3
	read_device();
    486a:	4b3b      	ldr	r3, [pc, #236]	; (4958 <main+0x160>)
    486c:	4798      	blx	r3
	
	// Enable automatic gain control
	write_automatic_gain_control();
    486e:	4b3e      	ldr	r3, [pc, #248]	; (4968 <main+0x170>)
    4870:	4798      	blx	r3
	read_device();
    4872:	4b39      	ldr	r3, [pc, #228]	; (4958 <main+0x160>)
    4874:	4798      	blx	r3
	
	// Enable HR sensor
	write_enable_hr_sensor();
    4876:	4b3d      	ldr	r3, [pc, #244]	; (496c <main+0x174>)
    4878:	4798      	blx	r3
	read_device();
    487a:	4b37      	ldr	r3, [pc, #220]	; (4958 <main+0x160>)
    487c:	4798      	blx	r3
	
	// Enable algorithm
	write_enable_algorithm();
    487e:	4b3c      	ldr	r3, [pc, #240]	; (4970 <main+0x178>)
    4880:	4798      	blx	r3
	read_device();
    4882:	4b35      	ldr	r3, [pc, #212]	; (4958 <main+0x160>)
    4884:	4798      	blx	r3
	
	// Configure algorithm samples
	write_set_num_samples();
    4886:	4b3b      	ldr	r3, [pc, #236]	; (4974 <main+0x17c>)
    4888:	4798      	blx	r3
	read_device();
    488a:	4b33      	ldr	r3, [pc, #204]	; (4958 <main+0x160>)
    488c:	4798      	blx	r3

	
	// Read Sensor Hub Status
	write_sensor_hub_status();
    488e:	4b3a      	ldr	r3, [pc, #232]	; (4978 <main+0x180>)
    4890:	4798      	blx	r3
	read_device();
    4892:	4b31      	ldr	r3, [pc, #196]	; (4958 <main+0x160>)
    4894:	4798      	blx	r3
	
	
	// Read Data Stored in FIFO
	write_to_read_FIFO();
    4896:	4b39      	ldr	r3, [pc, #228]	; (497c <main+0x184>)
    4898:	4798      	blx	r3
	read_device();
    489a:	4b2f      	ldr	r3, [pc, #188]	; (4958 <main+0x160>)
    489c:	4798      	blx	r3
	
	//initialize LEDs
	ioport_set_pin_dir(RED_LED_PIN, IOPORT_DIR_OUTPUT);
    489e:	2101      	movs	r1, #1
    48a0:	2042      	movs	r0, #66	; 0x42
    48a2:	4b28      	ldr	r3, [pc, #160]	; (4944 <main+0x14c>)
    48a4:	4798      	blx	r3
	ioport_set_pin_dir(GREEN_LED_PIN, IOPORT_DIR_OUTPUT);
    48a6:	2101      	movs	r1, #1
    48a8:	202c      	movs	r0, #44	; 0x2c
    48aa:	4b26      	ldr	r3, [pc, #152]	; (4944 <main+0x14c>)
    48ac:	4798      	blx	r3

	PULSE_OX_STAE_MACHINE_TYPE state = START_STATE;
    48ae:	2300      	movs	r3, #0
    48b0:	71fb      	strb	r3, [r7, #7]
	GPIO_INPUT_STATE_TYPE sw0_state = GPIO_INPUT_STATE_LOW;
    48b2:	2300      	movs	r3, #0
    48b4:	71bb      	strb	r3, [r7, #6]
	
	/* This skeleton code simply sets the LED to the state of the button. */
	while(1){
		sw0_state = check_gpio_input_state(SW0_PIN);
    48b6:	2058      	movs	r0, #88	; 0x58
    48b8:	4b31      	ldr	r3, [pc, #196]	; (4980 <main+0x188>)
    48ba:	4798      	blx	r3
    48bc:	4603      	mov	r3, r0
    48be:	71bb      	strb	r3, [r7, #6]
		write_to_read_FIFO();
    48c0:	4b2e      	ldr	r3, [pc, #184]	; (497c <main+0x184>)
    48c2:	4798      	blx	r3
		read_device();
    48c4:	4b24      	ldr	r3, [pc, #144]	; (4958 <main+0x160>)
    48c6:	4798      	blx	r3
		
		switch(state){
    48c8:	79fb      	ldrb	r3, [r7, #7]
    48ca:	2b01      	cmp	r3, #1
    48cc:	d00c      	beq.n	48e8 <main+0xf0>
    48ce:	2b02      	cmp	r3, #2
    48d0:	d017      	beq.n	4902 <main+0x10a>
    48d2:	2b00      	cmp	r3, #0
    48d4:	d123      	bne.n	491e <main+0x126>
			case START_STATE:
				c42412a_show_text("Ready");
    48d6:	482b      	ldr	r0, [pc, #172]	; (4984 <main+0x18c>)
    48d8:	4b2b      	ldr	r3, [pc, #172]	; (4988 <main+0x190>)
    48da:	4798      	blx	r3
				if(sw0_state == GPIO_INPUT_STATE_FALLING_EDGE){
    48dc:	79bb      	ldrb	r3, [r7, #6]
    48de:	2b03      	cmp	r3, #3
    48e0:	d11c      	bne.n	491c <main+0x124>
					state = CALC_HEART_RATE;
    48e2:	2301      	movs	r3, #1
    48e4:	71fb      	strb	r3, [r7, #7]
				}
			break;
    48e6:	e019      	b.n	491c <main+0x124>
			case CALC_HEART_RATE:
				calculate_hr();
    48e8:	4b28      	ldr	r3, [pc, #160]	; (498c <main+0x194>)
    48ea:	4798      	blx	r3
				if(sw0_state == GPIO_INPUT_STATE_FALLING_EDGE){
    48ec:	79bb      	ldrb	r3, [r7, #6]
    48ee:	2b03      	cmp	r3, #3
    48f0:	d103      	bne.n	48fa <main+0x102>
					state = CALC_OX_LEVEL;
    48f2:	2302      	movs	r3, #2
    48f4:	71fb      	strb	r3, [r7, #7]
					c42412a_clear_all();
    48f6:	4b26      	ldr	r3, [pc, #152]	; (4990 <main+0x198>)
    48f8:	4798      	blx	r3
				}
				c42412a_show_wireless(C42412A_WIRELESS_NONE);
    48fa:	2000      	movs	r0, #0
    48fc:	4b25      	ldr	r3, [pc, #148]	; (4994 <main+0x19c>)
    48fe:	4798      	blx	r3
			break;
    4900:	e00d      	b.n	491e <main+0x126>
			case CALC_OX_LEVEL:
				calculate_ox();
    4902:	4b25      	ldr	r3, [pc, #148]	; (4998 <main+0x1a0>)
    4904:	4798      	blx	r3
				if(sw0_state == GPIO_INPUT_STATE_FALLING_EDGE){
    4906:	79bb      	ldrb	r3, [r7, #6]
    4908:	2b03      	cmp	r3, #3
    490a:	d103      	bne.n	4914 <main+0x11c>
					state = CALC_HEART_RATE;
    490c:	2301      	movs	r3, #1
    490e:	71fb      	strb	r3, [r7, #7]
					c42412a_clear_all();
    4910:	4b1f      	ldr	r3, [pc, #124]	; (4990 <main+0x198>)
    4912:	4798      	blx	r3
				}
				c42412a_show_wireless(C42412A_WIRELESS_THREE);
    4914:	2003      	movs	r0, #3
    4916:	4b1f      	ldr	r3, [pc, #124]	; (4994 <main+0x19c>)
    4918:	4798      	blx	r3
			break;
    491a:	e000      	b.n	491e <main+0x126>
			break;
    491c:	bf00      	nop
		}
		
		mdelay(200);
    491e:	20c8      	movs	r0, #200	; 0xc8
    4920:	4b0a      	ldr	r3, [pc, #40]	; (494c <main+0x154>)
    4922:	4798      	blx	r3
		sw0_state = check_gpio_input_state(SW0_PIN);
    4924:	e7c7      	b.n	48b6 <main+0xbe>
    4926:	bf00      	nop
    4928:	00003491 	.word	0x00003491
    492c:	00003119 	.word	0x00003119
    4930:	00003c15 	.word	0x00003c15
    4934:	10624dd3 	.word	0x10624dd3
    4938:	00003bb9 	.word	0x00003bb9
    493c:	000016f1 	.word	0x000016f1
    4940:	00004055 	.word	0x00004055
    4944:	00003d2b 	.word	0x00003d2b
    4948:	00004119 	.word	0x00004119
    494c:	00003fd1 	.word	0x00003fd1
    4950:	00003c29 	.word	0x00003c29
    4954:	0000414d 	.word	0x0000414d
    4958:	000041a9 	.word	0x000041a9
    495c:	000041f9 	.word	0x000041f9
    4960:	00004255 	.word	0x00004255
    4964:	000042b9 	.word	0x000042b9
    4968:	0000431d 	.word	0x0000431d
    496c:	00004381 	.word	0x00004381
    4970:	000043e5 	.word	0x000043e5
    4974:	00004449 	.word	0x00004449
    4978:	000044b1 	.word	0x000044b1
    497c:	0000450d 	.word	0x0000450d
    4980:	00003eed 	.word	0x00003eed
    4984:	000077f4 	.word	0x000077f4
    4988:	00001785 	.word	0x00001785
    498c:	00004631 	.word	0x00004631
    4990:	0000175d 	.word	0x0000175d
    4994:	000017e9 	.word	0x000017e9
    4998:	00004715 	.word	0x00004715

0000499c <__libc_init_array>:
    499c:	b570      	push	{r4, r5, r6, lr}
    499e:	4e0d      	ldr	r6, [pc, #52]	; (49d4 <__libc_init_array+0x38>)
    49a0:	4c0d      	ldr	r4, [pc, #52]	; (49d8 <__libc_init_array+0x3c>)
    49a2:	1ba4      	subs	r4, r4, r6
    49a4:	10a4      	asrs	r4, r4, #2
    49a6:	2500      	movs	r5, #0
    49a8:	42a5      	cmp	r5, r4
    49aa:	d109      	bne.n	49c0 <__libc_init_array+0x24>
    49ac:	4e0b      	ldr	r6, [pc, #44]	; (49dc <__libc_init_array+0x40>)
    49ae:	4c0c      	ldr	r4, [pc, #48]	; (49e0 <__libc_init_array+0x44>)
    49b0:	f003 f852 	bl	7a58 <_init>
    49b4:	1ba4      	subs	r4, r4, r6
    49b6:	10a4      	asrs	r4, r4, #2
    49b8:	2500      	movs	r5, #0
    49ba:	42a5      	cmp	r5, r4
    49bc:	d105      	bne.n	49ca <__libc_init_array+0x2e>
    49be:	bd70      	pop	{r4, r5, r6, pc}
    49c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    49c4:	4798      	blx	r3
    49c6:	3501      	adds	r5, #1
    49c8:	e7ee      	b.n	49a8 <__libc_init_array+0xc>
    49ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    49ce:	4798      	blx	r3
    49d0:	3501      	adds	r5, #1
    49d2:	e7f2      	b.n	49ba <__libc_init_array+0x1e>
    49d4:	00007a64 	.word	0x00007a64
    49d8:	00007a64 	.word	0x00007a64
    49dc:	00007a64 	.word	0x00007a64
    49e0:	00007a68 	.word	0x00007a68

000049e4 <memset>:
    49e4:	4402      	add	r2, r0
    49e6:	4603      	mov	r3, r0
    49e8:	4293      	cmp	r3, r2
    49ea:	d100      	bne.n	49ee <memset+0xa>
    49ec:	4770      	bx	lr
    49ee:	f803 1b01 	strb.w	r1, [r3], #1
    49f2:	e7f9      	b.n	49e8 <memset+0x4>

000049f4 <__cvt>:
    49f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    49f8:	b088      	sub	sp, #32
    49fa:	2b00      	cmp	r3, #0
    49fc:	9f14      	ldr	r7, [sp, #80]	; 0x50
    49fe:	9912      	ldr	r1, [sp, #72]	; 0x48
    4a00:	9d10      	ldr	r5, [sp, #64]	; 0x40
    4a02:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    4a06:	461e      	mov	r6, r3
    4a08:	f027 0720 	bic.w	r7, r7, #32
    4a0c:	bfbb      	ittet	lt
    4a0e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
    4a12:	461e      	movlt	r6, r3
    4a14:	2300      	movge	r3, #0
    4a16:	232d      	movlt	r3, #45	; 0x2d
    4a18:	2f46      	cmp	r7, #70	; 0x46
    4a1a:	4614      	mov	r4, r2
    4a1c:	700b      	strb	r3, [r1, #0]
    4a1e:	d004      	beq.n	4a2a <__cvt+0x36>
    4a20:	2f45      	cmp	r7, #69	; 0x45
    4a22:	d100      	bne.n	4a26 <__cvt+0x32>
    4a24:	3501      	adds	r5, #1
    4a26:	2302      	movs	r3, #2
    4a28:	e000      	b.n	4a2c <__cvt+0x38>
    4a2a:	2303      	movs	r3, #3
    4a2c:	aa07      	add	r2, sp, #28
    4a2e:	9204      	str	r2, [sp, #16]
    4a30:	aa06      	add	r2, sp, #24
    4a32:	9203      	str	r2, [sp, #12]
    4a34:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
    4a38:	4622      	mov	r2, r4
    4a3a:	4633      	mov	r3, r6
    4a3c:	f000 fcf4 	bl	5428 <_dtoa_r>
    4a40:	2f47      	cmp	r7, #71	; 0x47
    4a42:	4680      	mov	r8, r0
    4a44:	d102      	bne.n	4a4c <__cvt+0x58>
    4a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4a48:	07db      	lsls	r3, r3, #31
    4a4a:	d526      	bpl.n	4a9a <__cvt+0xa6>
    4a4c:	2f46      	cmp	r7, #70	; 0x46
    4a4e:	eb08 0905 	add.w	r9, r8, r5
    4a52:	d111      	bne.n	4a78 <__cvt+0x84>
    4a54:	f898 3000 	ldrb.w	r3, [r8]
    4a58:	2b30      	cmp	r3, #48	; 0x30
    4a5a:	d10a      	bne.n	4a72 <__cvt+0x7e>
    4a5c:	2200      	movs	r2, #0
    4a5e:	2300      	movs	r3, #0
    4a60:	4620      	mov	r0, r4
    4a62:	4631      	mov	r1, r6
    4a64:	f002 fc9c 	bl	73a0 <__aeabi_dcmpeq>
    4a68:	b918      	cbnz	r0, 4a72 <__cvt+0x7e>
    4a6a:	f1c5 0501 	rsb	r5, r5, #1
    4a6e:	f8ca 5000 	str.w	r5, [sl]
    4a72:	f8da 3000 	ldr.w	r3, [sl]
    4a76:	4499      	add	r9, r3
    4a78:	2200      	movs	r2, #0
    4a7a:	2300      	movs	r3, #0
    4a7c:	4620      	mov	r0, r4
    4a7e:	4631      	mov	r1, r6
    4a80:	f002 fc8e 	bl	73a0 <__aeabi_dcmpeq>
    4a84:	b938      	cbnz	r0, 4a96 <__cvt+0xa2>
    4a86:	2230      	movs	r2, #48	; 0x30
    4a88:	9b07      	ldr	r3, [sp, #28]
    4a8a:	4599      	cmp	r9, r3
    4a8c:	d905      	bls.n	4a9a <__cvt+0xa6>
    4a8e:	1c59      	adds	r1, r3, #1
    4a90:	9107      	str	r1, [sp, #28]
    4a92:	701a      	strb	r2, [r3, #0]
    4a94:	e7f8      	b.n	4a88 <__cvt+0x94>
    4a96:	f8cd 901c 	str.w	r9, [sp, #28]
    4a9a:	9b07      	ldr	r3, [sp, #28]
    4a9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    4a9e:	eba3 0308 	sub.w	r3, r3, r8
    4aa2:	4640      	mov	r0, r8
    4aa4:	6013      	str	r3, [r2, #0]
    4aa6:	b008      	add	sp, #32
    4aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00004aac <__exponent>:
    4aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4aae:	4603      	mov	r3, r0
    4ab0:	2900      	cmp	r1, #0
    4ab2:	bfb8      	it	lt
    4ab4:	4249      	neglt	r1, r1
    4ab6:	f803 2b02 	strb.w	r2, [r3], #2
    4aba:	bfb4      	ite	lt
    4abc:	222d      	movlt	r2, #45	; 0x2d
    4abe:	222b      	movge	r2, #43	; 0x2b
    4ac0:	2909      	cmp	r1, #9
    4ac2:	7042      	strb	r2, [r0, #1]
    4ac4:	dd20      	ble.n	4b08 <__exponent+0x5c>
    4ac6:	f10d 0207 	add.w	r2, sp, #7
    4aca:	4617      	mov	r7, r2
    4acc:	260a      	movs	r6, #10
    4ace:	fb91 f5f6 	sdiv	r5, r1, r6
    4ad2:	fb06 1115 	mls	r1, r6, r5, r1
    4ad6:	3130      	adds	r1, #48	; 0x30
    4ad8:	2d09      	cmp	r5, #9
    4ada:	f802 1c01 	strb.w	r1, [r2, #-1]
    4ade:	f102 34ff 	add.w	r4, r2, #4294967295
    4ae2:	4629      	mov	r1, r5
    4ae4:	dc09      	bgt.n	4afa <__exponent+0x4e>
    4ae6:	3130      	adds	r1, #48	; 0x30
    4ae8:	3a02      	subs	r2, #2
    4aea:	f804 1c01 	strb.w	r1, [r4, #-1]
    4aee:	42ba      	cmp	r2, r7
    4af0:	461c      	mov	r4, r3
    4af2:	d304      	bcc.n	4afe <__exponent+0x52>
    4af4:	1a20      	subs	r0, r4, r0
    4af6:	b003      	add	sp, #12
    4af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4afa:	4622      	mov	r2, r4
    4afc:	e7e7      	b.n	4ace <__exponent+0x22>
    4afe:	f812 1b01 	ldrb.w	r1, [r2], #1
    4b02:	f803 1b01 	strb.w	r1, [r3], #1
    4b06:	e7f2      	b.n	4aee <__exponent+0x42>
    4b08:	2230      	movs	r2, #48	; 0x30
    4b0a:	461c      	mov	r4, r3
    4b0c:	4411      	add	r1, r2
    4b0e:	f804 2b02 	strb.w	r2, [r4], #2
    4b12:	7059      	strb	r1, [r3, #1]
    4b14:	e7ee      	b.n	4af4 <__exponent+0x48>
	...

00004b18 <_printf_float>:
    4b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b1c:	b091      	sub	sp, #68	; 0x44
    4b1e:	460c      	mov	r4, r1
    4b20:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    4b22:	4693      	mov	fp, r2
    4b24:	461e      	mov	r6, r3
    4b26:	4605      	mov	r5, r0
    4b28:	f001 fa50 	bl	5fcc <_localeconv_r>
    4b2c:	6803      	ldr	r3, [r0, #0]
    4b2e:	9309      	str	r3, [sp, #36]	; 0x24
    4b30:	4618      	mov	r0, r3
    4b32:	f000 fbe3 	bl	52fc <strlen>
    4b36:	2300      	movs	r3, #0
    4b38:	930e      	str	r3, [sp, #56]	; 0x38
    4b3a:	683b      	ldr	r3, [r7, #0]
    4b3c:	900a      	str	r0, [sp, #40]	; 0x28
    4b3e:	3307      	adds	r3, #7
    4b40:	f023 0307 	bic.w	r3, r3, #7
    4b44:	f103 0208 	add.w	r2, r3, #8
    4b48:	f894 8018 	ldrb.w	r8, [r4, #24]
    4b4c:	f8d4 a000 	ldr.w	sl, [r4]
    4b50:	603a      	str	r2, [r7, #0]
    4b52:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    4b5a:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    4b5e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
    4b60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    4b64:	930b      	str	r3, [sp, #44]	; 0x2c
    4b66:	f04f 32ff 	mov.w	r2, #4294967295
    4b6a:	4ba6      	ldr	r3, [pc, #664]	; (4e04 <_printf_float+0x2ec>)
    4b6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4b6e:	4638      	mov	r0, r7
    4b70:	f002 fc48 	bl	7404 <__aeabi_dcmpun>
    4b74:	2800      	cmp	r0, #0
    4b76:	f040 81f7 	bne.w	4f68 <_printf_float+0x450>
    4b7a:	f04f 32ff 	mov.w	r2, #4294967295
    4b7e:	4ba1      	ldr	r3, [pc, #644]	; (4e04 <_printf_float+0x2ec>)
    4b80:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4b82:	4638      	mov	r0, r7
    4b84:	f002 fc20 	bl	73c8 <__aeabi_dcmple>
    4b88:	2800      	cmp	r0, #0
    4b8a:	f040 81ed 	bne.w	4f68 <_printf_float+0x450>
    4b8e:	2200      	movs	r2, #0
    4b90:	2300      	movs	r3, #0
    4b92:	4638      	mov	r0, r7
    4b94:	4649      	mov	r1, r9
    4b96:	f002 fc0d 	bl	73b4 <__aeabi_dcmplt>
    4b9a:	b110      	cbz	r0, 4ba2 <_printf_float+0x8a>
    4b9c:	232d      	movs	r3, #45	; 0x2d
    4b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    4ba2:	4b99      	ldr	r3, [pc, #612]	; (4e08 <_printf_float+0x2f0>)
    4ba4:	4f99      	ldr	r7, [pc, #612]	; (4e0c <_printf_float+0x2f4>)
    4ba6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    4baa:	bf98      	it	ls
    4bac:	461f      	movls	r7, r3
    4bae:	2303      	movs	r3, #3
    4bb0:	6123      	str	r3, [r4, #16]
    4bb2:	f02a 0304 	bic.w	r3, sl, #4
    4bb6:	6023      	str	r3, [r4, #0]
    4bb8:	f04f 0900 	mov.w	r9, #0
    4bbc:	9600      	str	r6, [sp, #0]
    4bbe:	465b      	mov	r3, fp
    4bc0:	aa0f      	add	r2, sp, #60	; 0x3c
    4bc2:	4621      	mov	r1, r4
    4bc4:	4628      	mov	r0, r5
    4bc6:	f000 f9df 	bl	4f88 <_printf_common>
    4bca:	3001      	adds	r0, #1
    4bcc:	f040 809a 	bne.w	4d04 <_printf_float+0x1ec>
    4bd0:	f04f 30ff 	mov.w	r0, #4294967295
    4bd4:	b011      	add	sp, #68	; 0x44
    4bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bda:	6862      	ldr	r2, [r4, #4]
    4bdc:	1c53      	adds	r3, r2, #1
    4bde:	a80e      	add	r0, sp, #56	; 0x38
    4be0:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
    4be4:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    4be8:	d141      	bne.n	4c6e <_printf_float+0x156>
    4bea:	2206      	movs	r2, #6
    4bec:	6062      	str	r2, [r4, #4]
    4bee:	6023      	str	r3, [r4, #0]
    4bf0:	2100      	movs	r1, #0
    4bf2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    4bf6:	9301      	str	r3, [sp, #4]
    4bf8:	6863      	ldr	r3, [r4, #4]
    4bfa:	9005      	str	r0, [sp, #20]
    4bfc:	9202      	str	r2, [sp, #8]
    4bfe:	9300      	str	r3, [sp, #0]
    4c00:	463a      	mov	r2, r7
    4c02:	464b      	mov	r3, r9
    4c04:	9106      	str	r1, [sp, #24]
    4c06:	f8cd 8010 	str.w	r8, [sp, #16]
    4c0a:	f8cd e00c 	str.w	lr, [sp, #12]
    4c0e:	4628      	mov	r0, r5
    4c10:	f7ff fef0 	bl	49f4 <__cvt>
    4c14:	f008 03df 	and.w	r3, r8, #223	; 0xdf
    4c18:	2b47      	cmp	r3, #71	; 0x47
    4c1a:	4607      	mov	r7, r0
    4c1c:	d109      	bne.n	4c32 <_printf_float+0x11a>
    4c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c20:	1cd8      	adds	r0, r3, #3
    4c22:	db02      	blt.n	4c2a <_printf_float+0x112>
    4c24:	6862      	ldr	r2, [r4, #4]
    4c26:	4293      	cmp	r3, r2
    4c28:	dd59      	ble.n	4cde <_printf_float+0x1c6>
    4c2a:	f1a8 0802 	sub.w	r8, r8, #2
    4c2e:	fa5f f888 	uxtb.w	r8, r8
    4c32:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    4c36:	990d      	ldr	r1, [sp, #52]	; 0x34
    4c38:	d836      	bhi.n	4ca8 <_printf_float+0x190>
    4c3a:	3901      	subs	r1, #1
    4c3c:	4642      	mov	r2, r8
    4c3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    4c42:	910d      	str	r1, [sp, #52]	; 0x34
    4c44:	f7ff ff32 	bl	4aac <__exponent>
    4c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4c4a:	1883      	adds	r3, r0, r2
    4c4c:	2a01      	cmp	r2, #1
    4c4e:	4681      	mov	r9, r0
    4c50:	6123      	str	r3, [r4, #16]
    4c52:	dc02      	bgt.n	4c5a <_printf_float+0x142>
    4c54:	6822      	ldr	r2, [r4, #0]
    4c56:	07d1      	lsls	r1, r2, #31
    4c58:	d501      	bpl.n	4c5e <_printf_float+0x146>
    4c5a:	3301      	adds	r3, #1
    4c5c:	6123      	str	r3, [r4, #16]
    4c5e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    4c62:	2b00      	cmp	r3, #0
    4c64:	d0aa      	beq.n	4bbc <_printf_float+0xa4>
    4c66:	232d      	movs	r3, #45	; 0x2d
    4c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    4c6c:	e7a6      	b.n	4bbc <_printf_float+0xa4>
    4c6e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
    4c72:	d002      	beq.n	4c7a <_printf_float+0x162>
    4c74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    4c78:	d1b9      	bne.n	4bee <_printf_float+0xd6>
    4c7a:	b19a      	cbz	r2, 4ca4 <_printf_float+0x18c>
    4c7c:	2100      	movs	r1, #0
    4c7e:	9106      	str	r1, [sp, #24]
    4c80:	f10d 0133 	add.w	r1, sp, #51	; 0x33
    4c84:	e88d 000c 	stmia.w	sp, {r2, r3}
    4c88:	6023      	str	r3, [r4, #0]
    4c8a:	9005      	str	r0, [sp, #20]
    4c8c:	463a      	mov	r2, r7
    4c8e:	f8cd 8010 	str.w	r8, [sp, #16]
    4c92:	f8cd e00c 	str.w	lr, [sp, #12]
    4c96:	9102      	str	r1, [sp, #8]
    4c98:	464b      	mov	r3, r9
    4c9a:	4628      	mov	r0, r5
    4c9c:	f7ff feaa 	bl	49f4 <__cvt>
    4ca0:	4607      	mov	r7, r0
    4ca2:	e7bc      	b.n	4c1e <_printf_float+0x106>
    4ca4:	2201      	movs	r2, #1
    4ca6:	e7a1      	b.n	4bec <_printf_float+0xd4>
    4ca8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    4cac:	d119      	bne.n	4ce2 <_printf_float+0x1ca>
    4cae:	2900      	cmp	r1, #0
    4cb0:	6863      	ldr	r3, [r4, #4]
    4cb2:	dd0c      	ble.n	4cce <_printf_float+0x1b6>
    4cb4:	6121      	str	r1, [r4, #16]
    4cb6:	b913      	cbnz	r3, 4cbe <_printf_float+0x1a6>
    4cb8:	6822      	ldr	r2, [r4, #0]
    4cba:	07d2      	lsls	r2, r2, #31
    4cbc:	d502      	bpl.n	4cc4 <_printf_float+0x1ac>
    4cbe:	3301      	adds	r3, #1
    4cc0:	440b      	add	r3, r1
    4cc2:	6123      	str	r3, [r4, #16]
    4cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4cc6:	65a3      	str	r3, [r4, #88]	; 0x58
    4cc8:	f04f 0900 	mov.w	r9, #0
    4ccc:	e7c7      	b.n	4c5e <_printf_float+0x146>
    4cce:	b913      	cbnz	r3, 4cd6 <_printf_float+0x1be>
    4cd0:	6822      	ldr	r2, [r4, #0]
    4cd2:	07d0      	lsls	r0, r2, #31
    4cd4:	d501      	bpl.n	4cda <_printf_float+0x1c2>
    4cd6:	3302      	adds	r3, #2
    4cd8:	e7f3      	b.n	4cc2 <_printf_float+0x1aa>
    4cda:	2301      	movs	r3, #1
    4cdc:	e7f1      	b.n	4cc2 <_printf_float+0x1aa>
    4cde:	f04f 0867 	mov.w	r8, #103	; 0x67
    4ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4ce4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4ce6:	4293      	cmp	r3, r2
    4ce8:	db05      	blt.n	4cf6 <_printf_float+0x1de>
    4cea:	6822      	ldr	r2, [r4, #0]
    4cec:	6123      	str	r3, [r4, #16]
    4cee:	07d1      	lsls	r1, r2, #31
    4cf0:	d5e8      	bpl.n	4cc4 <_printf_float+0x1ac>
    4cf2:	3301      	adds	r3, #1
    4cf4:	e7e5      	b.n	4cc2 <_printf_float+0x1aa>
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	bfd4      	ite	le
    4cfa:	f1c3 0302 	rsble	r3, r3, #2
    4cfe:	2301      	movgt	r3, #1
    4d00:	4413      	add	r3, r2
    4d02:	e7de      	b.n	4cc2 <_printf_float+0x1aa>
    4d04:	6823      	ldr	r3, [r4, #0]
    4d06:	055a      	lsls	r2, r3, #21
    4d08:	d407      	bmi.n	4d1a <_printf_float+0x202>
    4d0a:	6923      	ldr	r3, [r4, #16]
    4d0c:	463a      	mov	r2, r7
    4d0e:	4659      	mov	r1, fp
    4d10:	4628      	mov	r0, r5
    4d12:	47b0      	blx	r6
    4d14:	3001      	adds	r0, #1
    4d16:	d12a      	bne.n	4d6e <_printf_float+0x256>
    4d18:	e75a      	b.n	4bd0 <_printf_float+0xb8>
    4d1a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    4d1e:	f240 80dc 	bls.w	4eda <_printf_float+0x3c2>
    4d22:	2200      	movs	r2, #0
    4d24:	2300      	movs	r3, #0
    4d26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    4d2a:	f002 fb39 	bl	73a0 <__aeabi_dcmpeq>
    4d2e:	2800      	cmp	r0, #0
    4d30:	d039      	beq.n	4da6 <_printf_float+0x28e>
    4d32:	2301      	movs	r3, #1
    4d34:	4a36      	ldr	r2, [pc, #216]	; (4e10 <_printf_float+0x2f8>)
    4d36:	4659      	mov	r1, fp
    4d38:	4628      	mov	r0, r5
    4d3a:	47b0      	blx	r6
    4d3c:	3001      	adds	r0, #1
    4d3e:	f43f af47 	beq.w	4bd0 <_printf_float+0xb8>
    4d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4d46:	429a      	cmp	r2, r3
    4d48:	db02      	blt.n	4d50 <_printf_float+0x238>
    4d4a:	6823      	ldr	r3, [r4, #0]
    4d4c:	07d8      	lsls	r0, r3, #31
    4d4e:	d50e      	bpl.n	4d6e <_printf_float+0x256>
    4d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4d54:	4659      	mov	r1, fp
    4d56:	4628      	mov	r0, r5
    4d58:	47b0      	blx	r6
    4d5a:	3001      	adds	r0, #1
    4d5c:	f43f af38 	beq.w	4bd0 <_printf_float+0xb8>
    4d60:	2700      	movs	r7, #0
    4d62:	f104 081a 	add.w	r8, r4, #26
    4d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d68:	3b01      	subs	r3, #1
    4d6a:	429f      	cmp	r7, r3
    4d6c:	db11      	blt.n	4d92 <_printf_float+0x27a>
    4d6e:	6823      	ldr	r3, [r4, #0]
    4d70:	079f      	lsls	r7, r3, #30
    4d72:	d508      	bpl.n	4d86 <_printf_float+0x26e>
    4d74:	2700      	movs	r7, #0
    4d76:	f104 0819 	add.w	r8, r4, #25
    4d7a:	68e3      	ldr	r3, [r4, #12]
    4d7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4d7e:	1a9b      	subs	r3, r3, r2
    4d80:	429f      	cmp	r7, r3
    4d82:	f2c0 80e7 	blt.w	4f54 <_printf_float+0x43c>
    4d86:	68e0      	ldr	r0, [r4, #12]
    4d88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4d8a:	4298      	cmp	r0, r3
    4d8c:	bfb8      	it	lt
    4d8e:	4618      	movlt	r0, r3
    4d90:	e720      	b.n	4bd4 <_printf_float+0xbc>
    4d92:	2301      	movs	r3, #1
    4d94:	4642      	mov	r2, r8
    4d96:	4659      	mov	r1, fp
    4d98:	4628      	mov	r0, r5
    4d9a:	47b0      	blx	r6
    4d9c:	3001      	adds	r0, #1
    4d9e:	f43f af17 	beq.w	4bd0 <_printf_float+0xb8>
    4da2:	3701      	adds	r7, #1
    4da4:	e7df      	b.n	4d66 <_printf_float+0x24e>
    4da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4da8:	2b00      	cmp	r3, #0
    4daa:	dc33      	bgt.n	4e14 <_printf_float+0x2fc>
    4dac:	2301      	movs	r3, #1
    4dae:	4a18      	ldr	r2, [pc, #96]	; (4e10 <_printf_float+0x2f8>)
    4db0:	4659      	mov	r1, fp
    4db2:	4628      	mov	r0, r5
    4db4:	47b0      	blx	r6
    4db6:	3001      	adds	r0, #1
    4db8:	f43f af0a 	beq.w	4bd0 <_printf_float+0xb8>
    4dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4dbe:	b923      	cbnz	r3, 4dca <_printf_float+0x2b2>
    4dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4dc2:	b913      	cbnz	r3, 4dca <_printf_float+0x2b2>
    4dc4:	6823      	ldr	r3, [r4, #0]
    4dc6:	07d9      	lsls	r1, r3, #31
    4dc8:	d5d1      	bpl.n	4d6e <_printf_float+0x256>
    4dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4dce:	4659      	mov	r1, fp
    4dd0:	4628      	mov	r0, r5
    4dd2:	47b0      	blx	r6
    4dd4:	3001      	adds	r0, #1
    4dd6:	f43f aefb 	beq.w	4bd0 <_printf_float+0xb8>
    4dda:	f04f 0800 	mov.w	r8, #0
    4dde:	f104 091a 	add.w	r9, r4, #26
    4de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4de4:	425b      	negs	r3, r3
    4de6:	4598      	cmp	r8, r3
    4de8:	db01      	blt.n	4dee <_printf_float+0x2d6>
    4dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4dec:	e78e      	b.n	4d0c <_printf_float+0x1f4>
    4dee:	2301      	movs	r3, #1
    4df0:	464a      	mov	r2, r9
    4df2:	4659      	mov	r1, fp
    4df4:	4628      	mov	r0, r5
    4df6:	47b0      	blx	r6
    4df8:	3001      	adds	r0, #1
    4dfa:	f43f aee9 	beq.w	4bd0 <_printf_float+0xb8>
    4dfe:	f108 0801 	add.w	r8, r8, #1
    4e02:	e7ee      	b.n	4de2 <_printf_float+0x2ca>
    4e04:	7fefffff 	.word	0x7fefffff
    4e08:	000077fa 	.word	0x000077fa
    4e0c:	000077fe 	.word	0x000077fe
    4e10:	0000780a 	.word	0x0000780a
    4e14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4e16:	6da3      	ldr	r3, [r4, #88]	; 0x58
    4e18:	429a      	cmp	r2, r3
    4e1a:	bfa8      	it	ge
    4e1c:	461a      	movge	r2, r3
    4e1e:	2a00      	cmp	r2, #0
    4e20:	4690      	mov	r8, r2
    4e22:	dc36      	bgt.n	4e92 <_printf_float+0x37a>
    4e24:	f104 031a 	add.w	r3, r4, #26
    4e28:	f04f 0a00 	mov.w	sl, #0
    4e2c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
    4e30:	930b      	str	r3, [sp, #44]	; 0x2c
    4e32:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
    4e36:	eba9 0308 	sub.w	r3, r9, r8
    4e3a:	459a      	cmp	sl, r3
    4e3c:	db31      	blt.n	4ea2 <_printf_float+0x38a>
    4e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4e40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4e42:	429a      	cmp	r2, r3
    4e44:	db38      	blt.n	4eb8 <_printf_float+0x3a0>
    4e46:	6823      	ldr	r3, [r4, #0]
    4e48:	07da      	lsls	r2, r3, #31
    4e4a:	d435      	bmi.n	4eb8 <_printf_float+0x3a0>
    4e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4e4e:	990d      	ldr	r1, [sp, #52]	; 0x34
    4e50:	eba3 0209 	sub.w	r2, r3, r9
    4e54:	eba3 0801 	sub.w	r8, r3, r1
    4e58:	4590      	cmp	r8, r2
    4e5a:	bfa8      	it	ge
    4e5c:	4690      	movge	r8, r2
    4e5e:	f1b8 0f00 	cmp.w	r8, #0
    4e62:	dc31      	bgt.n	4ec8 <_printf_float+0x3b0>
    4e64:	2700      	movs	r7, #0
    4e66:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
    4e6a:	f104 091a 	add.w	r9, r4, #26
    4e6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4e72:	1a9b      	subs	r3, r3, r2
    4e74:	eba3 0308 	sub.w	r3, r3, r8
    4e78:	429f      	cmp	r7, r3
    4e7a:	f6bf af78 	bge.w	4d6e <_printf_float+0x256>
    4e7e:	2301      	movs	r3, #1
    4e80:	464a      	mov	r2, r9
    4e82:	4659      	mov	r1, fp
    4e84:	4628      	mov	r0, r5
    4e86:	47b0      	blx	r6
    4e88:	3001      	adds	r0, #1
    4e8a:	f43f aea1 	beq.w	4bd0 <_printf_float+0xb8>
    4e8e:	3701      	adds	r7, #1
    4e90:	e7ed      	b.n	4e6e <_printf_float+0x356>
    4e92:	4613      	mov	r3, r2
    4e94:	4659      	mov	r1, fp
    4e96:	463a      	mov	r2, r7
    4e98:	4628      	mov	r0, r5
    4e9a:	47b0      	blx	r6
    4e9c:	3001      	adds	r0, #1
    4e9e:	d1c1      	bne.n	4e24 <_printf_float+0x30c>
    4ea0:	e696      	b.n	4bd0 <_printf_float+0xb8>
    4ea2:	2301      	movs	r3, #1
    4ea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4ea6:	4659      	mov	r1, fp
    4ea8:	4628      	mov	r0, r5
    4eaa:	47b0      	blx	r6
    4eac:	3001      	adds	r0, #1
    4eae:	f43f ae8f 	beq.w	4bd0 <_printf_float+0xb8>
    4eb2:	f10a 0a01 	add.w	sl, sl, #1
    4eb6:	e7bc      	b.n	4e32 <_printf_float+0x31a>
    4eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4ebc:	4659      	mov	r1, fp
    4ebe:	4628      	mov	r0, r5
    4ec0:	47b0      	blx	r6
    4ec2:	3001      	adds	r0, #1
    4ec4:	d1c2      	bne.n	4e4c <_printf_float+0x334>
    4ec6:	e683      	b.n	4bd0 <_printf_float+0xb8>
    4ec8:	4643      	mov	r3, r8
    4eca:	eb07 0209 	add.w	r2, r7, r9
    4ece:	4659      	mov	r1, fp
    4ed0:	4628      	mov	r0, r5
    4ed2:	47b0      	blx	r6
    4ed4:	3001      	adds	r0, #1
    4ed6:	d1c5      	bne.n	4e64 <_printf_float+0x34c>
    4ed8:	e67a      	b.n	4bd0 <_printf_float+0xb8>
    4eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4edc:	2a01      	cmp	r2, #1
    4ede:	dc01      	bgt.n	4ee4 <_printf_float+0x3cc>
    4ee0:	07db      	lsls	r3, r3, #31
    4ee2:	d534      	bpl.n	4f4e <_printf_float+0x436>
    4ee4:	2301      	movs	r3, #1
    4ee6:	463a      	mov	r2, r7
    4ee8:	4659      	mov	r1, fp
    4eea:	4628      	mov	r0, r5
    4eec:	47b0      	blx	r6
    4eee:	3001      	adds	r0, #1
    4ef0:	f43f ae6e 	beq.w	4bd0 <_printf_float+0xb8>
    4ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4ef8:	4659      	mov	r1, fp
    4efa:	4628      	mov	r0, r5
    4efc:	47b0      	blx	r6
    4efe:	3001      	adds	r0, #1
    4f00:	f43f ae66 	beq.w	4bd0 <_printf_float+0xb8>
    4f04:	2200      	movs	r2, #0
    4f06:	2300      	movs	r3, #0
    4f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    4f0c:	f002 fa48 	bl	73a0 <__aeabi_dcmpeq>
    4f10:	b150      	cbz	r0, 4f28 <_printf_float+0x410>
    4f12:	2700      	movs	r7, #0
    4f14:	f104 081a 	add.w	r8, r4, #26
    4f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4f1a:	3b01      	subs	r3, #1
    4f1c:	429f      	cmp	r7, r3
    4f1e:	db0c      	blt.n	4f3a <_printf_float+0x422>
    4f20:	464b      	mov	r3, r9
    4f22:	f104 0250 	add.w	r2, r4, #80	; 0x50
    4f26:	e6f2      	b.n	4d0e <_printf_float+0x1f6>
    4f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4f2a:	1c7a      	adds	r2, r7, #1
    4f2c:	3b01      	subs	r3, #1
    4f2e:	4659      	mov	r1, fp
    4f30:	4628      	mov	r0, r5
    4f32:	47b0      	blx	r6
    4f34:	3001      	adds	r0, #1
    4f36:	d1f3      	bne.n	4f20 <_printf_float+0x408>
    4f38:	e64a      	b.n	4bd0 <_printf_float+0xb8>
    4f3a:	2301      	movs	r3, #1
    4f3c:	4642      	mov	r2, r8
    4f3e:	4659      	mov	r1, fp
    4f40:	4628      	mov	r0, r5
    4f42:	47b0      	blx	r6
    4f44:	3001      	adds	r0, #1
    4f46:	f43f ae43 	beq.w	4bd0 <_printf_float+0xb8>
    4f4a:	3701      	adds	r7, #1
    4f4c:	e7e4      	b.n	4f18 <_printf_float+0x400>
    4f4e:	2301      	movs	r3, #1
    4f50:	463a      	mov	r2, r7
    4f52:	e7ec      	b.n	4f2e <_printf_float+0x416>
    4f54:	2301      	movs	r3, #1
    4f56:	4642      	mov	r2, r8
    4f58:	4659      	mov	r1, fp
    4f5a:	4628      	mov	r0, r5
    4f5c:	47b0      	blx	r6
    4f5e:	3001      	adds	r0, #1
    4f60:	f43f ae36 	beq.w	4bd0 <_printf_float+0xb8>
    4f64:	3701      	adds	r7, #1
    4f66:	e708      	b.n	4d7a <_printf_float+0x262>
    4f68:	463a      	mov	r2, r7
    4f6a:	464b      	mov	r3, r9
    4f6c:	4638      	mov	r0, r7
    4f6e:	4649      	mov	r1, r9
    4f70:	f002 fa48 	bl	7404 <__aeabi_dcmpun>
    4f74:	2800      	cmp	r0, #0
    4f76:	f43f ae30 	beq.w	4bda <_printf_float+0xc2>
    4f7a:	4b01      	ldr	r3, [pc, #4]	; (4f80 <_printf_float+0x468>)
    4f7c:	4f01      	ldr	r7, [pc, #4]	; (4f84 <_printf_float+0x46c>)
    4f7e:	e612      	b.n	4ba6 <_printf_float+0x8e>
    4f80:	00007802 	.word	0x00007802
    4f84:	00007806 	.word	0x00007806

00004f88 <_printf_common>:
    4f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f8c:	4691      	mov	r9, r2
    4f8e:	461f      	mov	r7, r3
    4f90:	688a      	ldr	r2, [r1, #8]
    4f92:	690b      	ldr	r3, [r1, #16]
    4f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
    4f98:	4293      	cmp	r3, r2
    4f9a:	bfb8      	it	lt
    4f9c:	4613      	movlt	r3, r2
    4f9e:	f8c9 3000 	str.w	r3, [r9]
    4fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    4fa6:	4606      	mov	r6, r0
    4fa8:	460c      	mov	r4, r1
    4faa:	b112      	cbz	r2, 4fb2 <_printf_common+0x2a>
    4fac:	3301      	adds	r3, #1
    4fae:	f8c9 3000 	str.w	r3, [r9]
    4fb2:	6823      	ldr	r3, [r4, #0]
    4fb4:	0699      	lsls	r1, r3, #26
    4fb6:	bf42      	ittt	mi
    4fb8:	f8d9 3000 	ldrmi.w	r3, [r9]
    4fbc:	3302      	addmi	r3, #2
    4fbe:	f8c9 3000 	strmi.w	r3, [r9]
    4fc2:	6825      	ldr	r5, [r4, #0]
    4fc4:	f015 0506 	ands.w	r5, r5, #6
    4fc8:	d107      	bne.n	4fda <_printf_common+0x52>
    4fca:	f104 0a19 	add.w	sl, r4, #25
    4fce:	68e3      	ldr	r3, [r4, #12]
    4fd0:	f8d9 2000 	ldr.w	r2, [r9]
    4fd4:	1a9b      	subs	r3, r3, r2
    4fd6:	429d      	cmp	r5, r3
    4fd8:	db29      	blt.n	502e <_printf_common+0xa6>
    4fda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    4fde:	6822      	ldr	r2, [r4, #0]
    4fe0:	3300      	adds	r3, #0
    4fe2:	bf18      	it	ne
    4fe4:	2301      	movne	r3, #1
    4fe6:	0692      	lsls	r2, r2, #26
    4fe8:	d42e      	bmi.n	5048 <_printf_common+0xc0>
    4fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
    4fee:	4639      	mov	r1, r7
    4ff0:	4630      	mov	r0, r6
    4ff2:	47c0      	blx	r8
    4ff4:	3001      	adds	r0, #1
    4ff6:	d021      	beq.n	503c <_printf_common+0xb4>
    4ff8:	6823      	ldr	r3, [r4, #0]
    4ffa:	68e5      	ldr	r5, [r4, #12]
    4ffc:	f8d9 2000 	ldr.w	r2, [r9]
    5000:	f003 0306 	and.w	r3, r3, #6
    5004:	2b04      	cmp	r3, #4
    5006:	bf08      	it	eq
    5008:	1aad      	subeq	r5, r5, r2
    500a:	68a3      	ldr	r3, [r4, #8]
    500c:	6922      	ldr	r2, [r4, #16]
    500e:	bf0c      	ite	eq
    5010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5014:	2500      	movne	r5, #0
    5016:	4293      	cmp	r3, r2
    5018:	bfc4      	itt	gt
    501a:	1a9b      	subgt	r3, r3, r2
    501c:	18ed      	addgt	r5, r5, r3
    501e:	f04f 0900 	mov.w	r9, #0
    5022:	341a      	adds	r4, #26
    5024:	454d      	cmp	r5, r9
    5026:	d11b      	bne.n	5060 <_printf_common+0xd8>
    5028:	2000      	movs	r0, #0
    502a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    502e:	2301      	movs	r3, #1
    5030:	4652      	mov	r2, sl
    5032:	4639      	mov	r1, r7
    5034:	4630      	mov	r0, r6
    5036:	47c0      	blx	r8
    5038:	3001      	adds	r0, #1
    503a:	d103      	bne.n	5044 <_printf_common+0xbc>
    503c:	f04f 30ff 	mov.w	r0, #4294967295
    5040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5044:	3501      	adds	r5, #1
    5046:	e7c2      	b.n	4fce <_printf_common+0x46>
    5048:	18e1      	adds	r1, r4, r3
    504a:	1c5a      	adds	r2, r3, #1
    504c:	2030      	movs	r0, #48	; 0x30
    504e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    5052:	4422      	add	r2, r4
    5054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    5058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    505c:	3302      	adds	r3, #2
    505e:	e7c4      	b.n	4fea <_printf_common+0x62>
    5060:	2301      	movs	r3, #1
    5062:	4622      	mov	r2, r4
    5064:	4639      	mov	r1, r7
    5066:	4630      	mov	r0, r6
    5068:	47c0      	blx	r8
    506a:	3001      	adds	r0, #1
    506c:	d0e6      	beq.n	503c <_printf_common+0xb4>
    506e:	f109 0901 	add.w	r9, r9, #1
    5072:	e7d7      	b.n	5024 <_printf_common+0x9c>

00005074 <_printf_i>:
    5074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5078:	4617      	mov	r7, r2
    507a:	7e0a      	ldrb	r2, [r1, #24]
    507c:	b085      	sub	sp, #20
    507e:	2a6e      	cmp	r2, #110	; 0x6e
    5080:	4698      	mov	r8, r3
    5082:	4606      	mov	r6, r0
    5084:	460c      	mov	r4, r1
    5086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5088:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    508c:	f000 80bc 	beq.w	5208 <_printf_i+0x194>
    5090:	d81a      	bhi.n	50c8 <_printf_i+0x54>
    5092:	2a63      	cmp	r2, #99	; 0x63
    5094:	d02e      	beq.n	50f4 <_printf_i+0x80>
    5096:	d80a      	bhi.n	50ae <_printf_i+0x3a>
    5098:	2a00      	cmp	r2, #0
    509a:	f000 80c8 	beq.w	522e <_printf_i+0x1ba>
    509e:	2a58      	cmp	r2, #88	; 0x58
    50a0:	f000 808a 	beq.w	51b8 <_printf_i+0x144>
    50a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
    50a8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    50ac:	e02a      	b.n	5104 <_printf_i+0x90>
    50ae:	2a64      	cmp	r2, #100	; 0x64
    50b0:	d001      	beq.n	50b6 <_printf_i+0x42>
    50b2:	2a69      	cmp	r2, #105	; 0x69
    50b4:	d1f6      	bne.n	50a4 <_printf_i+0x30>
    50b6:	6821      	ldr	r1, [r4, #0]
    50b8:	681a      	ldr	r2, [r3, #0]
    50ba:	f011 0f80 	tst.w	r1, #128	; 0x80
    50be:	d023      	beq.n	5108 <_printf_i+0x94>
    50c0:	1d11      	adds	r1, r2, #4
    50c2:	6019      	str	r1, [r3, #0]
    50c4:	6813      	ldr	r3, [r2, #0]
    50c6:	e027      	b.n	5118 <_printf_i+0xa4>
    50c8:	2a73      	cmp	r2, #115	; 0x73
    50ca:	f000 80b4 	beq.w	5236 <_printf_i+0x1c2>
    50ce:	d808      	bhi.n	50e2 <_printf_i+0x6e>
    50d0:	2a6f      	cmp	r2, #111	; 0x6f
    50d2:	d02a      	beq.n	512a <_printf_i+0xb6>
    50d4:	2a70      	cmp	r2, #112	; 0x70
    50d6:	d1e5      	bne.n	50a4 <_printf_i+0x30>
    50d8:	680a      	ldr	r2, [r1, #0]
    50da:	f042 0220 	orr.w	r2, r2, #32
    50de:	600a      	str	r2, [r1, #0]
    50e0:	e003      	b.n	50ea <_printf_i+0x76>
    50e2:	2a75      	cmp	r2, #117	; 0x75
    50e4:	d021      	beq.n	512a <_printf_i+0xb6>
    50e6:	2a78      	cmp	r2, #120	; 0x78
    50e8:	d1dc      	bne.n	50a4 <_printf_i+0x30>
    50ea:	2278      	movs	r2, #120	; 0x78
    50ec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    50f0:	496e      	ldr	r1, [pc, #440]	; (52ac <_printf_i+0x238>)
    50f2:	e064      	b.n	51be <_printf_i+0x14a>
    50f4:	681a      	ldr	r2, [r3, #0]
    50f6:	f101 0542 	add.w	r5, r1, #66	; 0x42
    50fa:	1d11      	adds	r1, r2, #4
    50fc:	6019      	str	r1, [r3, #0]
    50fe:	6813      	ldr	r3, [r2, #0]
    5100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5104:	2301      	movs	r3, #1
    5106:	e0a3      	b.n	5250 <_printf_i+0x1dc>
    5108:	f011 0f40 	tst.w	r1, #64	; 0x40
    510c:	f102 0104 	add.w	r1, r2, #4
    5110:	6019      	str	r1, [r3, #0]
    5112:	d0d7      	beq.n	50c4 <_printf_i+0x50>
    5114:	f9b2 3000 	ldrsh.w	r3, [r2]
    5118:	2b00      	cmp	r3, #0
    511a:	da03      	bge.n	5124 <_printf_i+0xb0>
    511c:	222d      	movs	r2, #45	; 0x2d
    511e:	425b      	negs	r3, r3
    5120:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    5124:	4962      	ldr	r1, [pc, #392]	; (52b0 <_printf_i+0x23c>)
    5126:	220a      	movs	r2, #10
    5128:	e017      	b.n	515a <_printf_i+0xe6>
    512a:	6820      	ldr	r0, [r4, #0]
    512c:	6819      	ldr	r1, [r3, #0]
    512e:	f010 0f80 	tst.w	r0, #128	; 0x80
    5132:	d003      	beq.n	513c <_printf_i+0xc8>
    5134:	1d08      	adds	r0, r1, #4
    5136:	6018      	str	r0, [r3, #0]
    5138:	680b      	ldr	r3, [r1, #0]
    513a:	e006      	b.n	514a <_printf_i+0xd6>
    513c:	f010 0f40 	tst.w	r0, #64	; 0x40
    5140:	f101 0004 	add.w	r0, r1, #4
    5144:	6018      	str	r0, [r3, #0]
    5146:	d0f7      	beq.n	5138 <_printf_i+0xc4>
    5148:	880b      	ldrh	r3, [r1, #0]
    514a:	4959      	ldr	r1, [pc, #356]	; (52b0 <_printf_i+0x23c>)
    514c:	2a6f      	cmp	r2, #111	; 0x6f
    514e:	bf14      	ite	ne
    5150:	220a      	movne	r2, #10
    5152:	2208      	moveq	r2, #8
    5154:	2000      	movs	r0, #0
    5156:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    515a:	6865      	ldr	r5, [r4, #4]
    515c:	60a5      	str	r5, [r4, #8]
    515e:	2d00      	cmp	r5, #0
    5160:	f2c0 809c 	blt.w	529c <_printf_i+0x228>
    5164:	6820      	ldr	r0, [r4, #0]
    5166:	f020 0004 	bic.w	r0, r0, #4
    516a:	6020      	str	r0, [r4, #0]
    516c:	2b00      	cmp	r3, #0
    516e:	d13f      	bne.n	51f0 <_printf_i+0x17c>
    5170:	2d00      	cmp	r5, #0
    5172:	f040 8095 	bne.w	52a0 <_printf_i+0x22c>
    5176:	4675      	mov	r5, lr
    5178:	2a08      	cmp	r2, #8
    517a:	d10b      	bne.n	5194 <_printf_i+0x120>
    517c:	6823      	ldr	r3, [r4, #0]
    517e:	07da      	lsls	r2, r3, #31
    5180:	d508      	bpl.n	5194 <_printf_i+0x120>
    5182:	6923      	ldr	r3, [r4, #16]
    5184:	6862      	ldr	r2, [r4, #4]
    5186:	429a      	cmp	r2, r3
    5188:	bfde      	ittt	le
    518a:	2330      	movle	r3, #48	; 0x30
    518c:	f805 3c01 	strble.w	r3, [r5, #-1]
    5190:	f105 35ff 	addle.w	r5, r5, #4294967295
    5194:	ebae 0305 	sub.w	r3, lr, r5
    5198:	6123      	str	r3, [r4, #16]
    519a:	f8cd 8000 	str.w	r8, [sp]
    519e:	463b      	mov	r3, r7
    51a0:	aa03      	add	r2, sp, #12
    51a2:	4621      	mov	r1, r4
    51a4:	4630      	mov	r0, r6
    51a6:	f7ff feef 	bl	4f88 <_printf_common>
    51aa:	3001      	adds	r0, #1
    51ac:	d155      	bne.n	525a <_printf_i+0x1e6>
    51ae:	f04f 30ff 	mov.w	r0, #4294967295
    51b2:	b005      	add	sp, #20
    51b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    51b8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    51bc:	493c      	ldr	r1, [pc, #240]	; (52b0 <_printf_i+0x23c>)
    51be:	6822      	ldr	r2, [r4, #0]
    51c0:	6818      	ldr	r0, [r3, #0]
    51c2:	f012 0f80 	tst.w	r2, #128	; 0x80
    51c6:	f100 0504 	add.w	r5, r0, #4
    51ca:	601d      	str	r5, [r3, #0]
    51cc:	d001      	beq.n	51d2 <_printf_i+0x15e>
    51ce:	6803      	ldr	r3, [r0, #0]
    51d0:	e002      	b.n	51d8 <_printf_i+0x164>
    51d2:	0655      	lsls	r5, r2, #25
    51d4:	d5fb      	bpl.n	51ce <_printf_i+0x15a>
    51d6:	8803      	ldrh	r3, [r0, #0]
    51d8:	07d0      	lsls	r0, r2, #31
    51da:	bf44      	itt	mi
    51dc:	f042 0220 	orrmi.w	r2, r2, #32
    51e0:	6022      	strmi	r2, [r4, #0]
    51e2:	b91b      	cbnz	r3, 51ec <_printf_i+0x178>
    51e4:	6822      	ldr	r2, [r4, #0]
    51e6:	f022 0220 	bic.w	r2, r2, #32
    51ea:	6022      	str	r2, [r4, #0]
    51ec:	2210      	movs	r2, #16
    51ee:	e7b1      	b.n	5154 <_printf_i+0xe0>
    51f0:	4675      	mov	r5, lr
    51f2:	fbb3 f0f2 	udiv	r0, r3, r2
    51f6:	fb02 3310 	mls	r3, r2, r0, r3
    51fa:	5ccb      	ldrb	r3, [r1, r3]
    51fc:	f805 3d01 	strb.w	r3, [r5, #-1]!
    5200:	4603      	mov	r3, r0
    5202:	2800      	cmp	r0, #0
    5204:	d1f5      	bne.n	51f2 <_printf_i+0x17e>
    5206:	e7b7      	b.n	5178 <_printf_i+0x104>
    5208:	6808      	ldr	r0, [r1, #0]
    520a:	681a      	ldr	r2, [r3, #0]
    520c:	6949      	ldr	r1, [r1, #20]
    520e:	f010 0f80 	tst.w	r0, #128	; 0x80
    5212:	d004      	beq.n	521e <_printf_i+0x1aa>
    5214:	1d10      	adds	r0, r2, #4
    5216:	6018      	str	r0, [r3, #0]
    5218:	6813      	ldr	r3, [r2, #0]
    521a:	6019      	str	r1, [r3, #0]
    521c:	e007      	b.n	522e <_printf_i+0x1ba>
    521e:	f010 0f40 	tst.w	r0, #64	; 0x40
    5222:	f102 0004 	add.w	r0, r2, #4
    5226:	6018      	str	r0, [r3, #0]
    5228:	6813      	ldr	r3, [r2, #0]
    522a:	d0f6      	beq.n	521a <_printf_i+0x1a6>
    522c:	8019      	strh	r1, [r3, #0]
    522e:	2300      	movs	r3, #0
    5230:	6123      	str	r3, [r4, #16]
    5232:	4675      	mov	r5, lr
    5234:	e7b1      	b.n	519a <_printf_i+0x126>
    5236:	681a      	ldr	r2, [r3, #0]
    5238:	1d11      	adds	r1, r2, #4
    523a:	6019      	str	r1, [r3, #0]
    523c:	6815      	ldr	r5, [r2, #0]
    523e:	6862      	ldr	r2, [r4, #4]
    5240:	2100      	movs	r1, #0
    5242:	4628      	mov	r0, r5
    5244:	f000 fedc 	bl	6000 <memchr>
    5248:	b108      	cbz	r0, 524e <_printf_i+0x1da>
    524a:	1b40      	subs	r0, r0, r5
    524c:	6060      	str	r0, [r4, #4]
    524e:	6863      	ldr	r3, [r4, #4]
    5250:	6123      	str	r3, [r4, #16]
    5252:	2300      	movs	r3, #0
    5254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    5258:	e79f      	b.n	519a <_printf_i+0x126>
    525a:	6923      	ldr	r3, [r4, #16]
    525c:	462a      	mov	r2, r5
    525e:	4639      	mov	r1, r7
    5260:	4630      	mov	r0, r6
    5262:	47c0      	blx	r8
    5264:	3001      	adds	r0, #1
    5266:	d0a2      	beq.n	51ae <_printf_i+0x13a>
    5268:	6823      	ldr	r3, [r4, #0]
    526a:	079b      	lsls	r3, r3, #30
    526c:	d507      	bpl.n	527e <_printf_i+0x20a>
    526e:	2500      	movs	r5, #0
    5270:	f104 0919 	add.w	r9, r4, #25
    5274:	68e3      	ldr	r3, [r4, #12]
    5276:	9a03      	ldr	r2, [sp, #12]
    5278:	1a9b      	subs	r3, r3, r2
    527a:	429d      	cmp	r5, r3
    527c:	db05      	blt.n	528a <_printf_i+0x216>
    527e:	68e0      	ldr	r0, [r4, #12]
    5280:	9b03      	ldr	r3, [sp, #12]
    5282:	4298      	cmp	r0, r3
    5284:	bfb8      	it	lt
    5286:	4618      	movlt	r0, r3
    5288:	e793      	b.n	51b2 <_printf_i+0x13e>
    528a:	2301      	movs	r3, #1
    528c:	464a      	mov	r2, r9
    528e:	4639      	mov	r1, r7
    5290:	4630      	mov	r0, r6
    5292:	47c0      	blx	r8
    5294:	3001      	adds	r0, #1
    5296:	d08a      	beq.n	51ae <_printf_i+0x13a>
    5298:	3501      	adds	r5, #1
    529a:	e7eb      	b.n	5274 <_printf_i+0x200>
    529c:	2b00      	cmp	r3, #0
    529e:	d1a7      	bne.n	51f0 <_printf_i+0x17c>
    52a0:	780b      	ldrb	r3, [r1, #0]
    52a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    52a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
    52aa:	e765      	b.n	5178 <_printf_i+0x104>
    52ac:	0000781d 	.word	0x0000781d
    52b0:	0000780c 	.word	0x0000780c

000052b4 <siprintf>:
    52b4:	b40e      	push	{r1, r2, r3}
    52b6:	b500      	push	{lr}
    52b8:	b09c      	sub	sp, #112	; 0x70
    52ba:	f44f 7102 	mov.w	r1, #520	; 0x208
    52be:	ab1d      	add	r3, sp, #116	; 0x74
    52c0:	f8ad 1014 	strh.w	r1, [sp, #20]
    52c4:	9002      	str	r0, [sp, #8]
    52c6:	9006      	str	r0, [sp, #24]
    52c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    52cc:	480a      	ldr	r0, [pc, #40]	; (52f8 <siprintf+0x44>)
    52ce:	9104      	str	r1, [sp, #16]
    52d0:	9107      	str	r1, [sp, #28]
    52d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    52d6:	f853 2b04 	ldr.w	r2, [r3], #4
    52da:	f8ad 1016 	strh.w	r1, [sp, #22]
    52de:	6800      	ldr	r0, [r0, #0]
    52e0:	9301      	str	r3, [sp, #4]
    52e2:	a902      	add	r1, sp, #8
    52e4:	f001 face 	bl	6884 <_svfiprintf_r>
    52e8:	9b02      	ldr	r3, [sp, #8]
    52ea:	2200      	movs	r2, #0
    52ec:	701a      	strb	r2, [r3, #0]
    52ee:	b01c      	add	sp, #112	; 0x70
    52f0:	f85d eb04 	ldr.w	lr, [sp], #4
    52f4:	b003      	add	sp, #12
    52f6:	4770      	bx	lr
    52f8:	200000dc 	.word	0x200000dc

000052fc <strlen>:
    52fc:	4603      	mov	r3, r0
    52fe:	f813 2b01 	ldrb.w	r2, [r3], #1
    5302:	2a00      	cmp	r2, #0
    5304:	d1fb      	bne.n	52fe <strlen+0x2>
    5306:	1a18      	subs	r0, r3, r0
    5308:	3801      	subs	r0, #1
    530a:	4770      	bx	lr

0000530c <quorem>:
    530c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5310:	6903      	ldr	r3, [r0, #16]
    5312:	690c      	ldr	r4, [r1, #16]
    5314:	429c      	cmp	r4, r3
    5316:	4680      	mov	r8, r0
    5318:	f300 8082 	bgt.w	5420 <quorem+0x114>
    531c:	3c01      	subs	r4, #1
    531e:	f101 0714 	add.w	r7, r1, #20
    5322:	ea4f 0e84 	mov.w	lr, r4, lsl #2
    5326:	f100 0614 	add.w	r6, r0, #20
    532a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
    532e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    5332:	eb06 030e 	add.w	r3, r6, lr
    5336:	3501      	adds	r5, #1
    5338:	eb07 090e 	add.w	r9, r7, lr
    533c:	9301      	str	r3, [sp, #4]
    533e:	fbb0 f5f5 	udiv	r5, r0, r5
    5342:	b395      	cbz	r5, 53aa <quorem+0x9e>
    5344:	f04f 0a00 	mov.w	sl, #0
    5348:	4638      	mov	r0, r7
    534a:	46b4      	mov	ip, r6
    534c:	46d3      	mov	fp, sl
    534e:	f850 2b04 	ldr.w	r2, [r0], #4
    5352:	b293      	uxth	r3, r2
    5354:	fb05 a303 	mla	r3, r5, r3, sl
    5358:	ea4f 4a13 	mov.w	sl, r3, lsr #16
    535c:	b29b      	uxth	r3, r3
    535e:	ebab 0303 	sub.w	r3, fp, r3
    5362:	0c12      	lsrs	r2, r2, #16
    5364:	f8bc b000 	ldrh.w	fp, [ip]
    5368:	fb05 a202 	mla	r2, r5, r2, sl
    536c:	fa13 f38b 	uxtah	r3, r3, fp
    5370:	ea4f 4a12 	mov.w	sl, r2, lsr #16
    5374:	fa1f fb82 	uxth.w	fp, r2
    5378:	f8dc 2000 	ldr.w	r2, [ip]
    537c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
    5380:	eb02 4223 	add.w	r2, r2, r3, asr #16
    5384:	b29b      	uxth	r3, r3
    5386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    538a:	4581      	cmp	r9, r0
    538c:	ea4f 4b22 	mov.w	fp, r2, asr #16
    5390:	f84c 3b04 	str.w	r3, [ip], #4
    5394:	d2db      	bcs.n	534e <quorem+0x42>
    5396:	f856 300e 	ldr.w	r3, [r6, lr]
    539a:	b933      	cbnz	r3, 53aa <quorem+0x9e>
    539c:	9b01      	ldr	r3, [sp, #4]
    539e:	3b04      	subs	r3, #4
    53a0:	429e      	cmp	r6, r3
    53a2:	461a      	mov	r2, r3
    53a4:	d330      	bcc.n	5408 <quorem+0xfc>
    53a6:	f8c8 4010 	str.w	r4, [r8, #16]
    53aa:	4640      	mov	r0, r8
    53ac:	f001 f88d 	bl	64ca <__mcmp>
    53b0:	2800      	cmp	r0, #0
    53b2:	db25      	blt.n	5400 <quorem+0xf4>
    53b4:	3501      	adds	r5, #1
    53b6:	4630      	mov	r0, r6
    53b8:	f04f 0e00 	mov.w	lr, #0
    53bc:	f857 2b04 	ldr.w	r2, [r7], #4
    53c0:	f8d0 c000 	ldr.w	ip, [r0]
    53c4:	b293      	uxth	r3, r2
    53c6:	ebae 0303 	sub.w	r3, lr, r3
    53ca:	0c12      	lsrs	r2, r2, #16
    53cc:	fa13 f38c 	uxtah	r3, r3, ip
    53d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
    53d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
    53d8:	b29b      	uxth	r3, r3
    53da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    53de:	45b9      	cmp	r9, r7
    53e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
    53e4:	f840 3b04 	str.w	r3, [r0], #4
    53e8:	d2e8      	bcs.n	53bc <quorem+0xb0>
    53ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    53ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    53f2:	b92a      	cbnz	r2, 5400 <quorem+0xf4>
    53f4:	3b04      	subs	r3, #4
    53f6:	429e      	cmp	r6, r3
    53f8:	461a      	mov	r2, r3
    53fa:	d30b      	bcc.n	5414 <quorem+0x108>
    53fc:	f8c8 4010 	str.w	r4, [r8, #16]
    5400:	4628      	mov	r0, r5
    5402:	b003      	add	sp, #12
    5404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5408:	6812      	ldr	r2, [r2, #0]
    540a:	3b04      	subs	r3, #4
    540c:	2a00      	cmp	r2, #0
    540e:	d1ca      	bne.n	53a6 <quorem+0x9a>
    5410:	3c01      	subs	r4, #1
    5412:	e7c5      	b.n	53a0 <quorem+0x94>
    5414:	6812      	ldr	r2, [r2, #0]
    5416:	3b04      	subs	r3, #4
    5418:	2a00      	cmp	r2, #0
    541a:	d1ef      	bne.n	53fc <quorem+0xf0>
    541c:	3c01      	subs	r4, #1
    541e:	e7ea      	b.n	53f6 <quorem+0xea>
    5420:	2000      	movs	r0, #0
    5422:	e7ee      	b.n	5402 <quorem+0xf6>
    5424:	0000      	movs	r0, r0
	...

00005428 <_dtoa_r>:
    5428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    542c:	6a46      	ldr	r6, [r0, #36]	; 0x24
    542e:	b095      	sub	sp, #84	; 0x54
    5430:	4604      	mov	r4, r0
    5432:	9d21      	ldr	r5, [sp, #132]	; 0x84
    5434:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5438:	b93e      	cbnz	r6, 544a <_dtoa_r+0x22>
    543a:	2010      	movs	r0, #16
    543c:	f000 fdd4 	bl	5fe8 <malloc>
    5440:	6260      	str	r0, [r4, #36]	; 0x24
    5442:	6046      	str	r6, [r0, #4]
    5444:	6086      	str	r6, [r0, #8]
    5446:	6006      	str	r6, [r0, #0]
    5448:	60c6      	str	r6, [r0, #12]
    544a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    544c:	6819      	ldr	r1, [r3, #0]
    544e:	b151      	cbz	r1, 5466 <_dtoa_r+0x3e>
    5450:	685a      	ldr	r2, [r3, #4]
    5452:	604a      	str	r2, [r1, #4]
    5454:	2301      	movs	r3, #1
    5456:	4093      	lsls	r3, r2
    5458:	608b      	str	r3, [r1, #8]
    545a:	4620      	mov	r0, r4
    545c:	f000 fe5f 	bl	611e <_Bfree>
    5460:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5462:	2200      	movs	r2, #0
    5464:	601a      	str	r2, [r3, #0]
    5466:	9b03      	ldr	r3, [sp, #12]
    5468:	2b00      	cmp	r3, #0
    546a:	bfbf      	itttt	lt
    546c:	2301      	movlt	r3, #1
    546e:	602b      	strlt	r3, [r5, #0]
    5470:	9b03      	ldrlt	r3, [sp, #12]
    5472:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    5476:	bfb2      	itee	lt
    5478:	9303      	strlt	r3, [sp, #12]
    547a:	2300      	movge	r3, #0
    547c:	602b      	strge	r3, [r5, #0]
    547e:	f8dd 900c 	ldr.w	r9, [sp, #12]
    5482:	4ba9      	ldr	r3, [pc, #676]	; (5728 <_dtoa_r+0x300>)
    5484:	ea33 0309 	bics.w	r3, r3, r9
    5488:	d11b      	bne.n	54c2 <_dtoa_r+0x9a>
    548a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    548c:	f242 730f 	movw	r3, #9999	; 0x270f
    5490:	6013      	str	r3, [r2, #0]
    5492:	9b02      	ldr	r3, [sp, #8]
    5494:	b923      	cbnz	r3, 54a0 <_dtoa_r+0x78>
    5496:	f3c9 0013 	ubfx	r0, r9, #0, #20
    549a:	2800      	cmp	r0, #0
    549c:	f000 8581 	beq.w	5fa2 <_dtoa_r+0xb7a>
    54a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    54a2:	b953      	cbnz	r3, 54ba <_dtoa_r+0x92>
    54a4:	4ba1      	ldr	r3, [pc, #644]	; (572c <_dtoa_r+0x304>)
    54a6:	e021      	b.n	54ec <_dtoa_r+0xc4>
    54a8:	4ba1      	ldr	r3, [pc, #644]	; (5730 <_dtoa_r+0x308>)
    54aa:	9306      	str	r3, [sp, #24]
    54ac:	3308      	adds	r3, #8
    54ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
    54b0:	6013      	str	r3, [r2, #0]
    54b2:	9806      	ldr	r0, [sp, #24]
    54b4:	b015      	add	sp, #84	; 0x54
    54b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54ba:	4b9c      	ldr	r3, [pc, #624]	; (572c <_dtoa_r+0x304>)
    54bc:	9306      	str	r3, [sp, #24]
    54be:	3303      	adds	r3, #3
    54c0:	e7f5      	b.n	54ae <_dtoa_r+0x86>
    54c2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    54c6:	2200      	movs	r2, #0
    54c8:	2300      	movs	r3, #0
    54ca:	4630      	mov	r0, r6
    54cc:	4639      	mov	r1, r7
    54ce:	f001 ff67 	bl	73a0 <__aeabi_dcmpeq>
    54d2:	4680      	mov	r8, r0
    54d4:	b160      	cbz	r0, 54f0 <_dtoa_r+0xc8>
    54d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    54d8:	2301      	movs	r3, #1
    54da:	6013      	str	r3, [r2, #0]
    54dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    54de:	2b00      	cmp	r3, #0
    54e0:	f000 855c 	beq.w	5f9c <_dtoa_r+0xb74>
    54e4:	4b93      	ldr	r3, [pc, #588]	; (5734 <_dtoa_r+0x30c>)
    54e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    54e8:	6013      	str	r3, [r2, #0]
    54ea:	3b01      	subs	r3, #1
    54ec:	9306      	str	r3, [sp, #24]
    54ee:	e7e0      	b.n	54b2 <_dtoa_r+0x8a>
    54f0:	ab12      	add	r3, sp, #72	; 0x48
    54f2:	9301      	str	r3, [sp, #4]
    54f4:	ab13      	add	r3, sp, #76	; 0x4c
    54f6:	9300      	str	r3, [sp, #0]
    54f8:	4632      	mov	r2, r6
    54fa:	463b      	mov	r3, r7
    54fc:	4620      	mov	r0, r4
    54fe:	f001 f85c 	bl	65ba <__d2b>
    5502:	f3c9 550a 	ubfx	r5, r9, #20, #11
    5506:	4682      	mov	sl, r0
    5508:	2d00      	cmp	r5, #0
    550a:	d07c      	beq.n	5606 <_dtoa_r+0x1de>
    550c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    5510:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    5514:	4630      	mov	r0, r6
    5516:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    551a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    551e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    5522:	2200      	movs	r2, #0
    5524:	4b84      	ldr	r3, [pc, #528]	; (5738 <_dtoa_r+0x310>)
    5526:	f001 fb1f 	bl	6b68 <__aeabi_dsub>
    552a:	a379      	add	r3, pc, #484	; (adr r3, 5710 <_dtoa_r+0x2e8>)
    552c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5530:	f001 fcce 	bl	6ed0 <__aeabi_dmul>
    5534:	a378      	add	r3, pc, #480	; (adr r3, 5718 <_dtoa_r+0x2f0>)
    5536:	e9d3 2300 	ldrd	r2, r3, [r3]
    553a:	f001 fb17 	bl	6b6c <__adddf3>
    553e:	4606      	mov	r6, r0
    5540:	4628      	mov	r0, r5
    5542:	460f      	mov	r7, r1
    5544:	f001 fc5e 	bl	6e04 <__aeabi_i2d>
    5548:	a375      	add	r3, pc, #468	; (adr r3, 5720 <_dtoa_r+0x2f8>)
    554a:	e9d3 2300 	ldrd	r2, r3, [r3]
    554e:	f001 fcbf 	bl	6ed0 <__aeabi_dmul>
    5552:	4602      	mov	r2, r0
    5554:	460b      	mov	r3, r1
    5556:	4630      	mov	r0, r6
    5558:	4639      	mov	r1, r7
    555a:	f001 fb07 	bl	6b6c <__adddf3>
    555e:	4606      	mov	r6, r0
    5560:	460f      	mov	r7, r1
    5562:	f001 ff65 	bl	7430 <__aeabi_d2iz>
    5566:	2200      	movs	r2, #0
    5568:	4683      	mov	fp, r0
    556a:	2300      	movs	r3, #0
    556c:	4630      	mov	r0, r6
    556e:	4639      	mov	r1, r7
    5570:	f001 ff20 	bl	73b4 <__aeabi_dcmplt>
    5574:	b158      	cbz	r0, 558e <_dtoa_r+0x166>
    5576:	4658      	mov	r0, fp
    5578:	f001 fc44 	bl	6e04 <__aeabi_i2d>
    557c:	4602      	mov	r2, r0
    557e:	460b      	mov	r3, r1
    5580:	4630      	mov	r0, r6
    5582:	4639      	mov	r1, r7
    5584:	f001 ff0c 	bl	73a0 <__aeabi_dcmpeq>
    5588:	b908      	cbnz	r0, 558e <_dtoa_r+0x166>
    558a:	f10b 3bff 	add.w	fp, fp, #4294967295
    558e:	f1bb 0f16 	cmp.w	fp, #22
    5592:	d857      	bhi.n	5644 <_dtoa_r+0x21c>
    5594:	4969      	ldr	r1, [pc, #420]	; (573c <_dtoa_r+0x314>)
    5596:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
    559a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    559e:	e9d1 0100 	ldrd	r0, r1, [r1]
    55a2:	f001 ff25 	bl	73f0 <__aeabi_dcmpgt>
    55a6:	2800      	cmp	r0, #0
    55a8:	d04e      	beq.n	5648 <_dtoa_r+0x220>
    55aa:	f10b 3bff 	add.w	fp, fp, #4294967295
    55ae:	2300      	movs	r3, #0
    55b0:	930d      	str	r3, [sp, #52]	; 0x34
    55b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    55b4:	1b5d      	subs	r5, r3, r5
    55b6:	1e6b      	subs	r3, r5, #1
    55b8:	9307      	str	r3, [sp, #28]
    55ba:	bf43      	ittte	mi
    55bc:	2300      	movmi	r3, #0
    55be:	f1c5 0801 	rsbmi	r8, r5, #1
    55c2:	9307      	strmi	r3, [sp, #28]
    55c4:	f04f 0800 	movpl.w	r8, #0
    55c8:	f1bb 0f00 	cmp.w	fp, #0
    55cc:	db3e      	blt.n	564c <_dtoa_r+0x224>
    55ce:	9b07      	ldr	r3, [sp, #28]
    55d0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    55d4:	445b      	add	r3, fp
    55d6:	9307      	str	r3, [sp, #28]
    55d8:	2300      	movs	r3, #0
    55da:	9308      	str	r3, [sp, #32]
    55dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    55de:	2b09      	cmp	r3, #9
    55e0:	f200 80b0 	bhi.w	5744 <_dtoa_r+0x31c>
    55e4:	2b05      	cmp	r3, #5
    55e6:	bfc4      	itt	gt
    55e8:	3b04      	subgt	r3, #4
    55ea:	931e      	strgt	r3, [sp, #120]	; 0x78
    55ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    55ee:	f1a3 0302 	sub.w	r3, r3, #2
    55f2:	bfcc      	ite	gt
    55f4:	2600      	movgt	r6, #0
    55f6:	2601      	movle	r6, #1
    55f8:	2b03      	cmp	r3, #3
    55fa:	f200 80af 	bhi.w	575c <_dtoa_r+0x334>
    55fe:	e8df f003 	tbb	[pc, r3]
    5602:	8583      	.short	0x8583
    5604:	772d      	.short	0x772d
    5606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5608:	9d12      	ldr	r5, [sp, #72]	; 0x48
    560a:	441d      	add	r5, r3
    560c:	f205 4332 	addw	r3, r5, #1074	; 0x432
    5610:	2b20      	cmp	r3, #32
    5612:	dd11      	ble.n	5638 <_dtoa_r+0x210>
    5614:	9a02      	ldr	r2, [sp, #8]
    5616:	f205 4012 	addw	r0, r5, #1042	; 0x412
    561a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    561e:	fa22 f000 	lsr.w	r0, r2, r0
    5622:	fa09 f303 	lsl.w	r3, r9, r3
    5626:	4318      	orrs	r0, r3
    5628:	f001 fbdc 	bl	6de4 <__aeabi_ui2d>
    562c:	2301      	movs	r3, #1
    562e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    5632:	3d01      	subs	r5, #1
    5634:	9310      	str	r3, [sp, #64]	; 0x40
    5636:	e774      	b.n	5522 <_dtoa_r+0xfa>
    5638:	f1c3 0020 	rsb	r0, r3, #32
    563c:	9b02      	ldr	r3, [sp, #8]
    563e:	fa03 f000 	lsl.w	r0, r3, r0
    5642:	e7f1      	b.n	5628 <_dtoa_r+0x200>
    5644:	2301      	movs	r3, #1
    5646:	e7b3      	b.n	55b0 <_dtoa_r+0x188>
    5648:	900d      	str	r0, [sp, #52]	; 0x34
    564a:	e7b2      	b.n	55b2 <_dtoa_r+0x18a>
    564c:	f1cb 0300 	rsb	r3, fp, #0
    5650:	9308      	str	r3, [sp, #32]
    5652:	2300      	movs	r3, #0
    5654:	eba8 080b 	sub.w	r8, r8, fp
    5658:	930c      	str	r3, [sp, #48]	; 0x30
    565a:	e7bf      	b.n	55dc <_dtoa_r+0x1b4>
    565c:	2301      	movs	r3, #1
    565e:	9309      	str	r3, [sp, #36]	; 0x24
    5660:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5662:	2b00      	cmp	r3, #0
    5664:	dd7d      	ble.n	5762 <_dtoa_r+0x33a>
    5666:	9304      	str	r3, [sp, #16]
    5668:	4699      	mov	r9, r3
    566a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    566c:	2200      	movs	r2, #0
    566e:	606a      	str	r2, [r5, #4]
    5670:	2104      	movs	r1, #4
    5672:	f101 0214 	add.w	r2, r1, #20
    5676:	429a      	cmp	r2, r3
    5678:	d978      	bls.n	576c <_dtoa_r+0x344>
    567a:	6869      	ldr	r1, [r5, #4]
    567c:	4620      	mov	r0, r4
    567e:	f000 fd1a 	bl	60b6 <_Balloc>
    5682:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5684:	6028      	str	r0, [r5, #0]
    5686:	681b      	ldr	r3, [r3, #0]
    5688:	9306      	str	r3, [sp, #24]
    568a:	f1b9 0f0e 	cmp.w	r9, #14
    568e:	f200 80ee 	bhi.w	586e <_dtoa_r+0x446>
    5692:	2e00      	cmp	r6, #0
    5694:	f000 80eb 	beq.w	586e <_dtoa_r+0x446>
    5698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    569c:	f1bb 0f00 	cmp.w	fp, #0
    56a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    56a4:	dd77      	ble.n	5796 <_dtoa_r+0x36e>
    56a6:	4a25      	ldr	r2, [pc, #148]	; (573c <_dtoa_r+0x314>)
    56a8:	f00b 030f 	and.w	r3, fp, #15
    56ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    56b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    56b4:	ea4f 162b 	mov.w	r6, fp, asr #4
    56b8:	06f0      	lsls	r0, r6, #27
    56ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    56be:	d55a      	bpl.n	5776 <_dtoa_r+0x34e>
    56c0:	4b1f      	ldr	r3, [pc, #124]	; (5740 <_dtoa_r+0x318>)
    56c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    56c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    56ca:	f001 fd2b 	bl	7124 <__aeabi_ddiv>
    56ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
    56d2:	f006 060f 	and.w	r6, r6, #15
    56d6:	2503      	movs	r5, #3
    56d8:	4f19      	ldr	r7, [pc, #100]	; (5740 <_dtoa_r+0x318>)
    56da:	2e00      	cmp	r6, #0
    56dc:	d14d      	bne.n	577a <_dtoa_r+0x352>
    56de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    56e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    56e6:	f001 fd1d 	bl	7124 <__aeabi_ddiv>
    56ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
    56ee:	e06c      	b.n	57ca <_dtoa_r+0x3a2>
    56f0:	2301      	movs	r3, #1
    56f2:	9309      	str	r3, [sp, #36]	; 0x24
    56f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    56f6:	445b      	add	r3, fp
    56f8:	f103 0901 	add.w	r9, r3, #1
    56fc:	9304      	str	r3, [sp, #16]
    56fe:	464b      	mov	r3, r9
    5700:	2b01      	cmp	r3, #1
    5702:	bfb8      	it	lt
    5704:	2301      	movlt	r3, #1
    5706:	e7b0      	b.n	566a <_dtoa_r+0x242>
    5708:	2300      	movs	r3, #0
    570a:	e7a8      	b.n	565e <_dtoa_r+0x236>
    570c:	2300      	movs	r3, #0
    570e:	e7f0      	b.n	56f2 <_dtoa_r+0x2ca>
    5710:	636f4361 	.word	0x636f4361
    5714:	3fd287a7 	.word	0x3fd287a7
    5718:	8b60c8b3 	.word	0x8b60c8b3
    571c:	3fc68a28 	.word	0x3fc68a28
    5720:	509f79fb 	.word	0x509f79fb
    5724:	3fd34413 	.word	0x3fd34413
    5728:	7ff00000 	.word	0x7ff00000
    572c:	00007837 	.word	0x00007837
    5730:	0000782e 	.word	0x0000782e
    5734:	0000780b 	.word	0x0000780b
    5738:	3ff80000 	.word	0x3ff80000
    573c:	00007868 	.word	0x00007868
    5740:	00007840 	.word	0x00007840
    5744:	2601      	movs	r6, #1
    5746:	2300      	movs	r3, #0
    5748:	931e      	str	r3, [sp, #120]	; 0x78
    574a:	9609      	str	r6, [sp, #36]	; 0x24
    574c:	f04f 33ff 	mov.w	r3, #4294967295
    5750:	9304      	str	r3, [sp, #16]
    5752:	4699      	mov	r9, r3
    5754:	2200      	movs	r2, #0
    5756:	2312      	movs	r3, #18
    5758:	921f      	str	r2, [sp, #124]	; 0x7c
    575a:	e786      	b.n	566a <_dtoa_r+0x242>
    575c:	2301      	movs	r3, #1
    575e:	9309      	str	r3, [sp, #36]	; 0x24
    5760:	e7f4      	b.n	574c <_dtoa_r+0x324>
    5762:	2301      	movs	r3, #1
    5764:	9304      	str	r3, [sp, #16]
    5766:	4699      	mov	r9, r3
    5768:	461a      	mov	r2, r3
    576a:	e7f5      	b.n	5758 <_dtoa_r+0x330>
    576c:	686a      	ldr	r2, [r5, #4]
    576e:	3201      	adds	r2, #1
    5770:	606a      	str	r2, [r5, #4]
    5772:	0049      	lsls	r1, r1, #1
    5774:	e77d      	b.n	5672 <_dtoa_r+0x24a>
    5776:	2502      	movs	r5, #2
    5778:	e7ae      	b.n	56d8 <_dtoa_r+0x2b0>
    577a:	07f1      	lsls	r1, r6, #31
    577c:	d508      	bpl.n	5790 <_dtoa_r+0x368>
    577e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    5782:	e9d7 2300 	ldrd	r2, r3, [r7]
    5786:	f001 fba3 	bl	6ed0 <__aeabi_dmul>
    578a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    578e:	3501      	adds	r5, #1
    5790:	1076      	asrs	r6, r6, #1
    5792:	3708      	adds	r7, #8
    5794:	e7a1      	b.n	56da <_dtoa_r+0x2b2>
    5796:	f000 80a5 	beq.w	58e4 <_dtoa_r+0x4bc>
    579a:	f1cb 0600 	rsb	r6, fp, #0
    579e:	4ba3      	ldr	r3, [pc, #652]	; (5a2c <_dtoa_r+0x604>)
    57a0:	4fa3      	ldr	r7, [pc, #652]	; (5a30 <_dtoa_r+0x608>)
    57a2:	f006 020f 	and.w	r2, r6, #15
    57a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    57aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    57ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    57b2:	f001 fb8d 	bl	6ed0 <__aeabi_dmul>
    57b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    57ba:	1136      	asrs	r6, r6, #4
    57bc:	2300      	movs	r3, #0
    57be:	2502      	movs	r5, #2
    57c0:	2e00      	cmp	r6, #0
    57c2:	f040 8084 	bne.w	58ce <_dtoa_r+0x4a6>
    57c6:	2b00      	cmp	r3, #0
    57c8:	d18f      	bne.n	56ea <_dtoa_r+0x2c2>
    57ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    57cc:	2b00      	cmp	r3, #0
    57ce:	f000 808b 	beq.w	58e8 <_dtoa_r+0x4c0>
    57d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    57d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    57da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    57de:	2200      	movs	r2, #0
    57e0:	4b94      	ldr	r3, [pc, #592]	; (5a34 <_dtoa_r+0x60c>)
    57e2:	f001 fde7 	bl	73b4 <__aeabi_dcmplt>
    57e6:	2800      	cmp	r0, #0
    57e8:	d07e      	beq.n	58e8 <_dtoa_r+0x4c0>
    57ea:	f1b9 0f00 	cmp.w	r9, #0
    57ee:	d07b      	beq.n	58e8 <_dtoa_r+0x4c0>
    57f0:	9b04      	ldr	r3, [sp, #16]
    57f2:	2b00      	cmp	r3, #0
    57f4:	dd37      	ble.n	5866 <_dtoa_r+0x43e>
    57f6:	2200      	movs	r2, #0
    57f8:	4b8f      	ldr	r3, [pc, #572]	; (5a38 <_dtoa_r+0x610>)
    57fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    57fe:	f001 fb67 	bl	6ed0 <__aeabi_dmul>
    5802:	e9cd 0102 	strd	r0, r1, [sp, #8]
    5806:	9e04      	ldr	r6, [sp, #16]
    5808:	f10b 37ff 	add.w	r7, fp, #4294967295
    580c:	3501      	adds	r5, #1
    580e:	4628      	mov	r0, r5
    5810:	f001 faf8 	bl	6e04 <__aeabi_i2d>
    5814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5818:	f001 fb5a 	bl	6ed0 <__aeabi_dmul>
    581c:	4b87      	ldr	r3, [pc, #540]	; (5a3c <_dtoa_r+0x614>)
    581e:	2200      	movs	r2, #0
    5820:	f001 f9a4 	bl	6b6c <__adddf3>
    5824:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    5828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    582a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
    582e:	950b      	str	r5, [sp, #44]	; 0x2c
    5830:	2e00      	cmp	r6, #0
    5832:	d15c      	bne.n	58ee <_dtoa_r+0x4c6>
    5834:	2200      	movs	r2, #0
    5836:	4b82      	ldr	r3, [pc, #520]	; (5a40 <_dtoa_r+0x618>)
    5838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    583c:	f001 f994 	bl	6b68 <__aeabi_dsub>
    5840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5842:	462b      	mov	r3, r5
    5844:	e9cd 0102 	strd	r0, r1, [sp, #8]
    5848:	f001 fdd2 	bl	73f0 <__aeabi_dcmpgt>
    584c:	2800      	cmp	r0, #0
    584e:	f040 82f7 	bne.w	5e40 <_dtoa_r+0xa18>
    5852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5854:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    5858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    585c:	f001 fdaa 	bl	73b4 <__aeabi_dcmplt>
    5860:	2800      	cmp	r0, #0
    5862:	f040 82eb 	bne.w	5e3c <_dtoa_r+0xa14>
    5866:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    586a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    586e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5870:	2b00      	cmp	r3, #0
    5872:	f2c0 8151 	blt.w	5b18 <_dtoa_r+0x6f0>
    5876:	f1bb 0f0e 	cmp.w	fp, #14
    587a:	f300 814d 	bgt.w	5b18 <_dtoa_r+0x6f0>
    587e:	4b6b      	ldr	r3, [pc, #428]	; (5a2c <_dtoa_r+0x604>)
    5880:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    5884:	e9d3 2300 	ldrd	r2, r3, [r3]
    5888:	e9cd 2304 	strd	r2, r3, [sp, #16]
    588c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    588e:	2b00      	cmp	r3, #0
    5890:	f280 80da 	bge.w	5a48 <_dtoa_r+0x620>
    5894:	f1b9 0f00 	cmp.w	r9, #0
    5898:	f300 80d6 	bgt.w	5a48 <_dtoa_r+0x620>
    589c:	f040 82cd 	bne.w	5e3a <_dtoa_r+0xa12>
    58a0:	2200      	movs	r2, #0
    58a2:	4b67      	ldr	r3, [pc, #412]	; (5a40 <_dtoa_r+0x618>)
    58a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    58a8:	f001 fb12 	bl	6ed0 <__aeabi_dmul>
    58ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    58b0:	f001 fd94 	bl	73dc <__aeabi_dcmpge>
    58b4:	464e      	mov	r6, r9
    58b6:	464f      	mov	r7, r9
    58b8:	2800      	cmp	r0, #0
    58ba:	f040 82a4 	bne.w	5e06 <_dtoa_r+0x9de>
    58be:	9b06      	ldr	r3, [sp, #24]
    58c0:	9a06      	ldr	r2, [sp, #24]
    58c2:	1c5d      	adds	r5, r3, #1
    58c4:	2331      	movs	r3, #49	; 0x31
    58c6:	7013      	strb	r3, [r2, #0]
    58c8:	f10b 0b01 	add.w	fp, fp, #1
    58cc:	e29f      	b.n	5e0e <_dtoa_r+0x9e6>
    58ce:	07f2      	lsls	r2, r6, #31
    58d0:	d505      	bpl.n	58de <_dtoa_r+0x4b6>
    58d2:	e9d7 2300 	ldrd	r2, r3, [r7]
    58d6:	f001 fafb 	bl	6ed0 <__aeabi_dmul>
    58da:	3501      	adds	r5, #1
    58dc:	2301      	movs	r3, #1
    58de:	1076      	asrs	r6, r6, #1
    58e0:	3708      	adds	r7, #8
    58e2:	e76d      	b.n	57c0 <_dtoa_r+0x398>
    58e4:	2502      	movs	r5, #2
    58e6:	e770      	b.n	57ca <_dtoa_r+0x3a2>
    58e8:	465f      	mov	r7, fp
    58ea:	464e      	mov	r6, r9
    58ec:	e78f      	b.n	580e <_dtoa_r+0x3e6>
    58ee:	9a06      	ldr	r2, [sp, #24]
    58f0:	4b4e      	ldr	r3, [pc, #312]	; (5a2c <_dtoa_r+0x604>)
    58f2:	4432      	add	r2, r6
    58f4:	9211      	str	r2, [sp, #68]	; 0x44
    58f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    58f8:	1e71      	subs	r1, r6, #1
    58fa:	2a00      	cmp	r2, #0
    58fc:	d048      	beq.n	5990 <_dtoa_r+0x568>
    58fe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    5902:	e9d3 2300 	ldrd	r2, r3, [r3]
    5906:	2000      	movs	r0, #0
    5908:	494e      	ldr	r1, [pc, #312]	; (5a44 <_dtoa_r+0x61c>)
    590a:	f001 fc0b 	bl	7124 <__aeabi_ddiv>
    590e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    5912:	f001 f929 	bl	6b68 <__aeabi_dsub>
    5916:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    591a:	9d06      	ldr	r5, [sp, #24]
    591c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5920:	f001 fd86 	bl	7430 <__aeabi_d2iz>
    5924:	4606      	mov	r6, r0
    5926:	f001 fa6d 	bl	6e04 <__aeabi_i2d>
    592a:	4602      	mov	r2, r0
    592c:	460b      	mov	r3, r1
    592e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5932:	f001 f919 	bl	6b68 <__aeabi_dsub>
    5936:	3630      	adds	r6, #48	; 0x30
    5938:	f805 6b01 	strb.w	r6, [r5], #1
    593c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    5940:	e9cd 0102 	strd	r0, r1, [sp, #8]
    5944:	f001 fd36 	bl	73b4 <__aeabi_dcmplt>
    5948:	2800      	cmp	r0, #0
    594a:	d165      	bne.n	5a18 <_dtoa_r+0x5f0>
    594c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5950:	2000      	movs	r0, #0
    5952:	4938      	ldr	r1, [pc, #224]	; (5a34 <_dtoa_r+0x60c>)
    5954:	f001 f908 	bl	6b68 <__aeabi_dsub>
    5958:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    595c:	f001 fd2a 	bl	73b4 <__aeabi_dcmplt>
    5960:	2800      	cmp	r0, #0
    5962:	f040 80b9 	bne.w	5ad8 <_dtoa_r+0x6b0>
    5966:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5968:	429d      	cmp	r5, r3
    596a:	f43f af7c 	beq.w	5866 <_dtoa_r+0x43e>
    596e:	2200      	movs	r2, #0
    5970:	4b31      	ldr	r3, [pc, #196]	; (5a38 <_dtoa_r+0x610>)
    5972:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    5976:	f001 faab 	bl	6ed0 <__aeabi_dmul>
    597a:	2200      	movs	r2, #0
    597c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    5980:	4b2d      	ldr	r3, [pc, #180]	; (5a38 <_dtoa_r+0x610>)
    5982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5986:	f001 faa3 	bl	6ed0 <__aeabi_dmul>
    598a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    598e:	e7c5      	b.n	591c <_dtoa_r+0x4f4>
    5990:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    5994:	e9d1 0100 	ldrd	r0, r1, [r1]
    5998:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    599c:	f001 fa98 	bl	6ed0 <__aeabi_dmul>
    59a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    59a4:	9d06      	ldr	r5, [sp, #24]
    59a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    59aa:	f001 fd41 	bl	7430 <__aeabi_d2iz>
    59ae:	4606      	mov	r6, r0
    59b0:	f001 fa28 	bl	6e04 <__aeabi_i2d>
    59b4:	3630      	adds	r6, #48	; 0x30
    59b6:	4602      	mov	r2, r0
    59b8:	460b      	mov	r3, r1
    59ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    59be:	f001 f8d3 	bl	6b68 <__aeabi_dsub>
    59c2:	f805 6b01 	strb.w	r6, [r5], #1
    59c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    59c8:	42ab      	cmp	r3, r5
    59ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
    59ce:	f04f 0200 	mov.w	r2, #0
    59d2:	d125      	bne.n	5a20 <_dtoa_r+0x5f8>
    59d4:	4b1b      	ldr	r3, [pc, #108]	; (5a44 <_dtoa_r+0x61c>)
    59d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    59da:	f001 f8c7 	bl	6b6c <__adddf3>
    59de:	4602      	mov	r2, r0
    59e0:	460b      	mov	r3, r1
    59e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    59e6:	f001 fd03 	bl	73f0 <__aeabi_dcmpgt>
    59ea:	2800      	cmp	r0, #0
    59ec:	d174      	bne.n	5ad8 <_dtoa_r+0x6b0>
    59ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    59f2:	2000      	movs	r0, #0
    59f4:	4913      	ldr	r1, [pc, #76]	; (5a44 <_dtoa_r+0x61c>)
    59f6:	f001 f8b7 	bl	6b68 <__aeabi_dsub>
    59fa:	4602      	mov	r2, r0
    59fc:	460b      	mov	r3, r1
    59fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5a02:	f001 fcd7 	bl	73b4 <__aeabi_dcmplt>
    5a06:	2800      	cmp	r0, #0
    5a08:	f43f af2d 	beq.w	5866 <_dtoa_r+0x43e>
    5a0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    5a10:	2b30      	cmp	r3, #48	; 0x30
    5a12:	f105 32ff 	add.w	r2, r5, #4294967295
    5a16:	d001      	beq.n	5a1c <_dtoa_r+0x5f4>
    5a18:	46bb      	mov	fp, r7
    5a1a:	e04c      	b.n	5ab6 <_dtoa_r+0x68e>
    5a1c:	4615      	mov	r5, r2
    5a1e:	e7f5      	b.n	5a0c <_dtoa_r+0x5e4>
    5a20:	4b05      	ldr	r3, [pc, #20]	; (5a38 <_dtoa_r+0x610>)
    5a22:	f001 fa55 	bl	6ed0 <__aeabi_dmul>
    5a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
    5a2a:	e7bc      	b.n	59a6 <_dtoa_r+0x57e>
    5a2c:	00007868 	.word	0x00007868
    5a30:	00007840 	.word	0x00007840
    5a34:	3ff00000 	.word	0x3ff00000
    5a38:	40240000 	.word	0x40240000
    5a3c:	401c0000 	.word	0x401c0000
    5a40:	40140000 	.word	0x40140000
    5a44:	3fe00000 	.word	0x3fe00000
    5a48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    5a4c:	9d06      	ldr	r5, [sp, #24]
    5a4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5a52:	4630      	mov	r0, r6
    5a54:	4639      	mov	r1, r7
    5a56:	f001 fb65 	bl	7124 <__aeabi_ddiv>
    5a5a:	f001 fce9 	bl	7430 <__aeabi_d2iz>
    5a5e:	4680      	mov	r8, r0
    5a60:	f001 f9d0 	bl	6e04 <__aeabi_i2d>
    5a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5a68:	f001 fa32 	bl	6ed0 <__aeabi_dmul>
    5a6c:	4602      	mov	r2, r0
    5a6e:	460b      	mov	r3, r1
    5a70:	4630      	mov	r0, r6
    5a72:	4639      	mov	r1, r7
    5a74:	f108 0630 	add.w	r6, r8, #48	; 0x30
    5a78:	f001 f876 	bl	6b68 <__aeabi_dsub>
    5a7c:	f805 6b01 	strb.w	r6, [r5], #1
    5a80:	9e06      	ldr	r6, [sp, #24]
    5a82:	1bae      	subs	r6, r5, r6
    5a84:	45b1      	cmp	r9, r6
    5a86:	4602      	mov	r2, r0
    5a88:	460b      	mov	r3, r1
    5a8a:	d138      	bne.n	5afe <_dtoa_r+0x6d6>
    5a8c:	f001 f86e 	bl	6b6c <__adddf3>
    5a90:	4606      	mov	r6, r0
    5a92:	460f      	mov	r7, r1
    5a94:	4602      	mov	r2, r0
    5a96:	460b      	mov	r3, r1
    5a98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5a9c:	f001 fc8a 	bl	73b4 <__aeabi_dcmplt>
    5aa0:	b9c8      	cbnz	r0, 5ad6 <_dtoa_r+0x6ae>
    5aa2:	4632      	mov	r2, r6
    5aa4:	463b      	mov	r3, r7
    5aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5aaa:	f001 fc79 	bl	73a0 <__aeabi_dcmpeq>
    5aae:	b110      	cbz	r0, 5ab6 <_dtoa_r+0x68e>
    5ab0:	f018 0f01 	tst.w	r8, #1
    5ab4:	d10f      	bne.n	5ad6 <_dtoa_r+0x6ae>
    5ab6:	4651      	mov	r1, sl
    5ab8:	4620      	mov	r0, r4
    5aba:	f000 fb30 	bl	611e <_Bfree>
    5abe:	2300      	movs	r3, #0
    5ac0:	9a20      	ldr	r2, [sp, #128]	; 0x80
    5ac2:	702b      	strb	r3, [r5, #0]
    5ac4:	f10b 0301 	add.w	r3, fp, #1
    5ac8:	6013      	str	r3, [r2, #0]
    5aca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5acc:	2b00      	cmp	r3, #0
    5ace:	f43f acf0 	beq.w	54b2 <_dtoa_r+0x8a>
    5ad2:	601d      	str	r5, [r3, #0]
    5ad4:	e4ed      	b.n	54b2 <_dtoa_r+0x8a>
    5ad6:	465f      	mov	r7, fp
    5ad8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    5adc:	2a39      	cmp	r2, #57	; 0x39
    5ade:	f105 33ff 	add.w	r3, r5, #4294967295
    5ae2:	d106      	bne.n	5af2 <_dtoa_r+0x6ca>
    5ae4:	9a06      	ldr	r2, [sp, #24]
    5ae6:	429a      	cmp	r2, r3
    5ae8:	d107      	bne.n	5afa <_dtoa_r+0x6d2>
    5aea:	2330      	movs	r3, #48	; 0x30
    5aec:	7013      	strb	r3, [r2, #0]
    5aee:	3701      	adds	r7, #1
    5af0:	4613      	mov	r3, r2
    5af2:	781a      	ldrb	r2, [r3, #0]
    5af4:	3201      	adds	r2, #1
    5af6:	701a      	strb	r2, [r3, #0]
    5af8:	e78e      	b.n	5a18 <_dtoa_r+0x5f0>
    5afa:	461d      	mov	r5, r3
    5afc:	e7ec      	b.n	5ad8 <_dtoa_r+0x6b0>
    5afe:	2200      	movs	r2, #0
    5b00:	4bb4      	ldr	r3, [pc, #720]	; (5dd4 <_dtoa_r+0x9ac>)
    5b02:	f001 f9e5 	bl	6ed0 <__aeabi_dmul>
    5b06:	2200      	movs	r2, #0
    5b08:	2300      	movs	r3, #0
    5b0a:	4606      	mov	r6, r0
    5b0c:	460f      	mov	r7, r1
    5b0e:	f001 fc47 	bl	73a0 <__aeabi_dcmpeq>
    5b12:	2800      	cmp	r0, #0
    5b14:	d09b      	beq.n	5a4e <_dtoa_r+0x626>
    5b16:	e7ce      	b.n	5ab6 <_dtoa_r+0x68e>
    5b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5b1a:	2a00      	cmp	r2, #0
    5b1c:	f000 8129 	beq.w	5d72 <_dtoa_r+0x94a>
    5b20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    5b22:	2a01      	cmp	r2, #1
    5b24:	f300 810e 	bgt.w	5d44 <_dtoa_r+0x91c>
    5b28:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5b2a:	2a00      	cmp	r2, #0
    5b2c:	f000 8106 	beq.w	5d3c <_dtoa_r+0x914>
    5b30:	f203 4333 	addw	r3, r3, #1075	; 0x433
    5b34:	9e08      	ldr	r6, [sp, #32]
    5b36:	4645      	mov	r5, r8
    5b38:	9a07      	ldr	r2, [sp, #28]
    5b3a:	2101      	movs	r1, #1
    5b3c:	441a      	add	r2, r3
    5b3e:	4620      	mov	r0, r4
    5b40:	4498      	add	r8, r3
    5b42:	9207      	str	r2, [sp, #28]
    5b44:	f000 fb8b 	bl	625e <__i2b>
    5b48:	4607      	mov	r7, r0
    5b4a:	2d00      	cmp	r5, #0
    5b4c:	dd0b      	ble.n	5b66 <_dtoa_r+0x73e>
    5b4e:	9b07      	ldr	r3, [sp, #28]
    5b50:	2b00      	cmp	r3, #0
    5b52:	dd08      	ble.n	5b66 <_dtoa_r+0x73e>
    5b54:	42ab      	cmp	r3, r5
    5b56:	9a07      	ldr	r2, [sp, #28]
    5b58:	bfa8      	it	ge
    5b5a:	462b      	movge	r3, r5
    5b5c:	eba8 0803 	sub.w	r8, r8, r3
    5b60:	1aed      	subs	r5, r5, r3
    5b62:	1ad3      	subs	r3, r2, r3
    5b64:	9307      	str	r3, [sp, #28]
    5b66:	9b08      	ldr	r3, [sp, #32]
    5b68:	b1fb      	cbz	r3, 5baa <_dtoa_r+0x782>
    5b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	f000 8104 	beq.w	5d7a <_dtoa_r+0x952>
    5b72:	2e00      	cmp	r6, #0
    5b74:	dd11      	ble.n	5b9a <_dtoa_r+0x772>
    5b76:	4639      	mov	r1, r7
    5b78:	4632      	mov	r2, r6
    5b7a:	4620      	mov	r0, r4
    5b7c:	f000 fc06 	bl	638c <__pow5mult>
    5b80:	4652      	mov	r2, sl
    5b82:	4601      	mov	r1, r0
    5b84:	4607      	mov	r7, r0
    5b86:	4620      	mov	r0, r4
    5b88:	f000 fb72 	bl	6270 <__multiply>
    5b8c:	4651      	mov	r1, sl
    5b8e:	900a      	str	r0, [sp, #40]	; 0x28
    5b90:	4620      	mov	r0, r4
    5b92:	f000 fac4 	bl	611e <_Bfree>
    5b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b98:	469a      	mov	sl, r3
    5b9a:	9b08      	ldr	r3, [sp, #32]
    5b9c:	1b9a      	subs	r2, r3, r6
    5b9e:	d004      	beq.n	5baa <_dtoa_r+0x782>
    5ba0:	4651      	mov	r1, sl
    5ba2:	4620      	mov	r0, r4
    5ba4:	f000 fbf2 	bl	638c <__pow5mult>
    5ba8:	4682      	mov	sl, r0
    5baa:	2101      	movs	r1, #1
    5bac:	4620      	mov	r0, r4
    5bae:	f000 fb56 	bl	625e <__i2b>
    5bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	4606      	mov	r6, r0
    5bb8:	f340 80e1 	ble.w	5d7e <_dtoa_r+0x956>
    5bbc:	461a      	mov	r2, r3
    5bbe:	4601      	mov	r1, r0
    5bc0:	4620      	mov	r0, r4
    5bc2:	f000 fbe3 	bl	638c <__pow5mult>
    5bc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5bc8:	2b01      	cmp	r3, #1
    5bca:	4606      	mov	r6, r0
    5bcc:	f340 80da 	ble.w	5d84 <_dtoa_r+0x95c>
    5bd0:	2300      	movs	r3, #0
    5bd2:	9308      	str	r3, [sp, #32]
    5bd4:	6933      	ldr	r3, [r6, #16]
    5bd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5bda:	6918      	ldr	r0, [r3, #16]
    5bdc:	f000 faf1 	bl	61c2 <__hi0bits>
    5be0:	f1c0 0020 	rsb	r0, r0, #32
    5be4:	9b07      	ldr	r3, [sp, #28]
    5be6:	4418      	add	r0, r3
    5be8:	f010 001f 	ands.w	r0, r0, #31
    5bec:	f000 80f0 	beq.w	5dd0 <_dtoa_r+0x9a8>
    5bf0:	f1c0 0320 	rsb	r3, r0, #32
    5bf4:	2b04      	cmp	r3, #4
    5bf6:	f340 80e2 	ble.w	5dbe <_dtoa_r+0x996>
    5bfa:	9b07      	ldr	r3, [sp, #28]
    5bfc:	f1c0 001c 	rsb	r0, r0, #28
    5c00:	4480      	add	r8, r0
    5c02:	4405      	add	r5, r0
    5c04:	4403      	add	r3, r0
    5c06:	9307      	str	r3, [sp, #28]
    5c08:	f1b8 0f00 	cmp.w	r8, #0
    5c0c:	dd05      	ble.n	5c1a <_dtoa_r+0x7f2>
    5c0e:	4651      	mov	r1, sl
    5c10:	4642      	mov	r2, r8
    5c12:	4620      	mov	r0, r4
    5c14:	f000 fc08 	bl	6428 <__lshift>
    5c18:	4682      	mov	sl, r0
    5c1a:	9b07      	ldr	r3, [sp, #28]
    5c1c:	2b00      	cmp	r3, #0
    5c1e:	dd05      	ble.n	5c2c <_dtoa_r+0x804>
    5c20:	4631      	mov	r1, r6
    5c22:	461a      	mov	r2, r3
    5c24:	4620      	mov	r0, r4
    5c26:	f000 fbff 	bl	6428 <__lshift>
    5c2a:	4606      	mov	r6, r0
    5c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c2e:	2b00      	cmp	r3, #0
    5c30:	f000 80d2 	beq.w	5dd8 <_dtoa_r+0x9b0>
    5c34:	4631      	mov	r1, r6
    5c36:	4650      	mov	r0, sl
    5c38:	f000 fc47 	bl	64ca <__mcmp>
    5c3c:	2800      	cmp	r0, #0
    5c3e:	f280 80cb 	bge.w	5dd8 <_dtoa_r+0x9b0>
    5c42:	2300      	movs	r3, #0
    5c44:	4651      	mov	r1, sl
    5c46:	220a      	movs	r2, #10
    5c48:	4620      	mov	r0, r4
    5c4a:	f000 fa7f 	bl	614c <__multadd>
    5c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c50:	f10b 3bff 	add.w	fp, fp, #4294967295
    5c54:	4682      	mov	sl, r0
    5c56:	2b00      	cmp	r3, #0
    5c58:	f000 81aa 	beq.w	5fb0 <_dtoa_r+0xb88>
    5c5c:	2300      	movs	r3, #0
    5c5e:	4639      	mov	r1, r7
    5c60:	220a      	movs	r2, #10
    5c62:	4620      	mov	r0, r4
    5c64:	f000 fa72 	bl	614c <__multadd>
    5c68:	9b04      	ldr	r3, [sp, #16]
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	4607      	mov	r7, r0
    5c6e:	dc03      	bgt.n	5c78 <_dtoa_r+0x850>
    5c70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5c72:	2b02      	cmp	r3, #2
    5c74:	f300 80b8 	bgt.w	5de8 <_dtoa_r+0x9c0>
    5c78:	2d00      	cmp	r5, #0
    5c7a:	dd05      	ble.n	5c88 <_dtoa_r+0x860>
    5c7c:	4639      	mov	r1, r7
    5c7e:	462a      	mov	r2, r5
    5c80:	4620      	mov	r0, r4
    5c82:	f000 fbd1 	bl	6428 <__lshift>
    5c86:	4607      	mov	r7, r0
    5c88:	9b08      	ldr	r3, [sp, #32]
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	f000 8110 	beq.w	5eb0 <_dtoa_r+0xa88>
    5c90:	6879      	ldr	r1, [r7, #4]
    5c92:	4620      	mov	r0, r4
    5c94:	f000 fa0f 	bl	60b6 <_Balloc>
    5c98:	693a      	ldr	r2, [r7, #16]
    5c9a:	3202      	adds	r2, #2
    5c9c:	4605      	mov	r5, r0
    5c9e:	0092      	lsls	r2, r2, #2
    5ca0:	f107 010c 	add.w	r1, r7, #12
    5ca4:	300c      	adds	r0, #12
    5ca6:	f000 f9fb 	bl	60a0 <memcpy>
    5caa:	2201      	movs	r2, #1
    5cac:	4629      	mov	r1, r5
    5cae:	4620      	mov	r0, r4
    5cb0:	f000 fbba 	bl	6428 <__lshift>
    5cb4:	9b02      	ldr	r3, [sp, #8]
    5cb6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    5cba:	9707      	str	r7, [sp, #28]
    5cbc:	f003 0301 	and.w	r3, r3, #1
    5cc0:	4607      	mov	r7, r0
    5cc2:	9308      	str	r3, [sp, #32]
    5cc4:	4631      	mov	r1, r6
    5cc6:	4650      	mov	r0, sl
    5cc8:	f7ff fb20 	bl	530c <quorem>
    5ccc:	9907      	ldr	r1, [sp, #28]
    5cce:	4605      	mov	r5, r0
    5cd0:	f100 0930 	add.w	r9, r0, #48	; 0x30
    5cd4:	4650      	mov	r0, sl
    5cd6:	f000 fbf8 	bl	64ca <__mcmp>
    5cda:	463a      	mov	r2, r7
    5cdc:	9002      	str	r0, [sp, #8]
    5cde:	4631      	mov	r1, r6
    5ce0:	4620      	mov	r0, r4
    5ce2:	f000 fc0c 	bl	64fe <__mdiff>
    5ce6:	68c3      	ldr	r3, [r0, #12]
    5ce8:	4602      	mov	r2, r0
    5cea:	2b00      	cmp	r3, #0
    5cec:	f040 80e2 	bne.w	5eb4 <_dtoa_r+0xa8c>
    5cf0:	4601      	mov	r1, r0
    5cf2:	9009      	str	r0, [sp, #36]	; 0x24
    5cf4:	4650      	mov	r0, sl
    5cf6:	f000 fbe8 	bl	64ca <__mcmp>
    5cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5cfc:	4603      	mov	r3, r0
    5cfe:	4611      	mov	r1, r2
    5d00:	4620      	mov	r0, r4
    5d02:	9309      	str	r3, [sp, #36]	; 0x24
    5d04:	f000 fa0b 	bl	611e <_Bfree>
    5d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	f040 80d4 	bne.w	5eb8 <_dtoa_r+0xa90>
    5d10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    5d12:	2a00      	cmp	r2, #0
    5d14:	f040 80d0 	bne.w	5eb8 <_dtoa_r+0xa90>
    5d18:	9a08      	ldr	r2, [sp, #32]
    5d1a:	2a00      	cmp	r2, #0
    5d1c:	f040 80cc 	bne.w	5eb8 <_dtoa_r+0xa90>
    5d20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    5d24:	f000 80e8 	beq.w	5ef8 <_dtoa_r+0xad0>
    5d28:	9b02      	ldr	r3, [sp, #8]
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	dd01      	ble.n	5d32 <_dtoa_r+0x90a>
    5d2e:	f105 0931 	add.w	r9, r5, #49	; 0x31
    5d32:	f108 0501 	add.w	r5, r8, #1
    5d36:	f888 9000 	strb.w	r9, [r8]
    5d3a:	e06a      	b.n	5e12 <_dtoa_r+0x9ea>
    5d3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5d3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    5d42:	e6f7      	b.n	5b34 <_dtoa_r+0x70c>
    5d44:	9b08      	ldr	r3, [sp, #32]
    5d46:	f109 36ff 	add.w	r6, r9, #4294967295
    5d4a:	42b3      	cmp	r3, r6
    5d4c:	bfbf      	itttt	lt
    5d4e:	9b08      	ldrlt	r3, [sp, #32]
    5d50:	9608      	strlt	r6, [sp, #32]
    5d52:	1af2      	sublt	r2, r6, r3
    5d54:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    5d56:	bfb7      	itett	lt
    5d58:	189b      	addlt	r3, r3, r2
    5d5a:	1b9e      	subge	r6, r3, r6
    5d5c:	930c      	strlt	r3, [sp, #48]	; 0x30
    5d5e:	2600      	movlt	r6, #0
    5d60:	f1b9 0f00 	cmp.w	r9, #0
    5d64:	bfb9      	ittee	lt
    5d66:	eba8 0509 	sublt.w	r5, r8, r9
    5d6a:	2300      	movlt	r3, #0
    5d6c:	4645      	movge	r5, r8
    5d6e:	464b      	movge	r3, r9
    5d70:	e6e2      	b.n	5b38 <_dtoa_r+0x710>
    5d72:	9e08      	ldr	r6, [sp, #32]
    5d74:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5d76:	4645      	mov	r5, r8
    5d78:	e6e7      	b.n	5b4a <_dtoa_r+0x722>
    5d7a:	9a08      	ldr	r2, [sp, #32]
    5d7c:	e710      	b.n	5ba0 <_dtoa_r+0x778>
    5d7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5d80:	2b01      	cmp	r3, #1
    5d82:	dc18      	bgt.n	5db6 <_dtoa_r+0x98e>
    5d84:	9b02      	ldr	r3, [sp, #8]
    5d86:	b9b3      	cbnz	r3, 5db6 <_dtoa_r+0x98e>
    5d88:	9b03      	ldr	r3, [sp, #12]
    5d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5d8e:	b9a3      	cbnz	r3, 5dba <_dtoa_r+0x992>
    5d90:	9b03      	ldr	r3, [sp, #12]
    5d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5d96:	0d1b      	lsrs	r3, r3, #20
    5d98:	051b      	lsls	r3, r3, #20
    5d9a:	b12b      	cbz	r3, 5da8 <_dtoa_r+0x980>
    5d9c:	9b07      	ldr	r3, [sp, #28]
    5d9e:	3301      	adds	r3, #1
    5da0:	9307      	str	r3, [sp, #28]
    5da2:	f108 0801 	add.w	r8, r8, #1
    5da6:	2301      	movs	r3, #1
    5da8:	9308      	str	r3, [sp, #32]
    5daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5dac:	2b00      	cmp	r3, #0
    5dae:	f47f af11 	bne.w	5bd4 <_dtoa_r+0x7ac>
    5db2:	2001      	movs	r0, #1
    5db4:	e716      	b.n	5be4 <_dtoa_r+0x7bc>
    5db6:	2300      	movs	r3, #0
    5db8:	e7f6      	b.n	5da8 <_dtoa_r+0x980>
    5dba:	9b02      	ldr	r3, [sp, #8]
    5dbc:	e7f4      	b.n	5da8 <_dtoa_r+0x980>
    5dbe:	f43f af23 	beq.w	5c08 <_dtoa_r+0x7e0>
    5dc2:	9a07      	ldr	r2, [sp, #28]
    5dc4:	331c      	adds	r3, #28
    5dc6:	441a      	add	r2, r3
    5dc8:	4498      	add	r8, r3
    5dca:	441d      	add	r5, r3
    5dcc:	4613      	mov	r3, r2
    5dce:	e71a      	b.n	5c06 <_dtoa_r+0x7de>
    5dd0:	4603      	mov	r3, r0
    5dd2:	e7f6      	b.n	5dc2 <_dtoa_r+0x99a>
    5dd4:	40240000 	.word	0x40240000
    5dd8:	f1b9 0f00 	cmp.w	r9, #0
    5ddc:	dc33      	bgt.n	5e46 <_dtoa_r+0xa1e>
    5dde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5de0:	2b02      	cmp	r3, #2
    5de2:	dd30      	ble.n	5e46 <_dtoa_r+0xa1e>
    5de4:	f8cd 9010 	str.w	r9, [sp, #16]
    5de8:	9b04      	ldr	r3, [sp, #16]
    5dea:	b963      	cbnz	r3, 5e06 <_dtoa_r+0x9de>
    5dec:	4631      	mov	r1, r6
    5dee:	2205      	movs	r2, #5
    5df0:	4620      	mov	r0, r4
    5df2:	f000 f9ab 	bl	614c <__multadd>
    5df6:	4601      	mov	r1, r0
    5df8:	4606      	mov	r6, r0
    5dfa:	4650      	mov	r0, sl
    5dfc:	f000 fb65 	bl	64ca <__mcmp>
    5e00:	2800      	cmp	r0, #0
    5e02:	f73f ad5c 	bgt.w	58be <_dtoa_r+0x496>
    5e06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5e08:	9d06      	ldr	r5, [sp, #24]
    5e0a:	ea6f 0b03 	mvn.w	fp, r3
    5e0e:	2300      	movs	r3, #0
    5e10:	9307      	str	r3, [sp, #28]
    5e12:	4631      	mov	r1, r6
    5e14:	4620      	mov	r0, r4
    5e16:	f000 f982 	bl	611e <_Bfree>
    5e1a:	2f00      	cmp	r7, #0
    5e1c:	f43f ae4b 	beq.w	5ab6 <_dtoa_r+0x68e>
    5e20:	9b07      	ldr	r3, [sp, #28]
    5e22:	b12b      	cbz	r3, 5e30 <_dtoa_r+0xa08>
    5e24:	42bb      	cmp	r3, r7
    5e26:	d003      	beq.n	5e30 <_dtoa_r+0xa08>
    5e28:	4619      	mov	r1, r3
    5e2a:	4620      	mov	r0, r4
    5e2c:	f000 f977 	bl	611e <_Bfree>
    5e30:	4639      	mov	r1, r7
    5e32:	4620      	mov	r0, r4
    5e34:	f000 f973 	bl	611e <_Bfree>
    5e38:	e63d      	b.n	5ab6 <_dtoa_r+0x68e>
    5e3a:	2600      	movs	r6, #0
    5e3c:	4637      	mov	r7, r6
    5e3e:	e7e2      	b.n	5e06 <_dtoa_r+0x9de>
    5e40:	46bb      	mov	fp, r7
    5e42:	4637      	mov	r7, r6
    5e44:	e53b      	b.n	58be <_dtoa_r+0x496>
    5e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e48:	f8cd 9010 	str.w	r9, [sp, #16]
    5e4c:	2b00      	cmp	r3, #0
    5e4e:	f47f af13 	bne.w	5c78 <_dtoa_r+0x850>
    5e52:	9d06      	ldr	r5, [sp, #24]
    5e54:	4631      	mov	r1, r6
    5e56:	4650      	mov	r0, sl
    5e58:	f7ff fa58 	bl	530c <quorem>
    5e5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
    5e60:	f805 9b01 	strb.w	r9, [r5], #1
    5e64:	9b06      	ldr	r3, [sp, #24]
    5e66:	9a04      	ldr	r2, [sp, #16]
    5e68:	1aeb      	subs	r3, r5, r3
    5e6a:	429a      	cmp	r2, r3
    5e6c:	f300 8083 	bgt.w	5f76 <_dtoa_r+0xb4e>
    5e70:	9b06      	ldr	r3, [sp, #24]
    5e72:	2a01      	cmp	r2, #1
    5e74:	bfac      	ite	ge
    5e76:	189b      	addge	r3, r3, r2
    5e78:	3301      	addlt	r3, #1
    5e7a:	4698      	mov	r8, r3
    5e7c:	2300      	movs	r3, #0
    5e7e:	9307      	str	r3, [sp, #28]
    5e80:	4651      	mov	r1, sl
    5e82:	2201      	movs	r2, #1
    5e84:	4620      	mov	r0, r4
    5e86:	f000 facf 	bl	6428 <__lshift>
    5e8a:	4631      	mov	r1, r6
    5e8c:	4682      	mov	sl, r0
    5e8e:	f000 fb1c 	bl	64ca <__mcmp>
    5e92:	2800      	cmp	r0, #0
    5e94:	dc35      	bgt.n	5f02 <_dtoa_r+0xada>
    5e96:	d102      	bne.n	5e9e <_dtoa_r+0xa76>
    5e98:	f019 0f01 	tst.w	r9, #1
    5e9c:	d131      	bne.n	5f02 <_dtoa_r+0xada>
    5e9e:	4645      	mov	r5, r8
    5ea0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    5ea4:	2b30      	cmp	r3, #48	; 0x30
    5ea6:	f105 32ff 	add.w	r2, r5, #4294967295
    5eaa:	d1b2      	bne.n	5e12 <_dtoa_r+0x9ea>
    5eac:	4615      	mov	r5, r2
    5eae:	e7f7      	b.n	5ea0 <_dtoa_r+0xa78>
    5eb0:	4638      	mov	r0, r7
    5eb2:	e6ff      	b.n	5cb4 <_dtoa_r+0x88c>
    5eb4:	2301      	movs	r3, #1
    5eb6:	e722      	b.n	5cfe <_dtoa_r+0x8d6>
    5eb8:	9a02      	ldr	r2, [sp, #8]
    5eba:	2a00      	cmp	r2, #0
    5ebc:	db04      	blt.n	5ec8 <_dtoa_r+0xaa0>
    5ebe:	d129      	bne.n	5f14 <_dtoa_r+0xaec>
    5ec0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    5ec2:	bb3a      	cbnz	r2, 5f14 <_dtoa_r+0xaec>
    5ec4:	9a08      	ldr	r2, [sp, #32]
    5ec6:	bb2a      	cbnz	r2, 5f14 <_dtoa_r+0xaec>
    5ec8:	2b00      	cmp	r3, #0
    5eca:	f77f af32 	ble.w	5d32 <_dtoa_r+0x90a>
    5ece:	4651      	mov	r1, sl
    5ed0:	2201      	movs	r2, #1
    5ed2:	4620      	mov	r0, r4
    5ed4:	f000 faa8 	bl	6428 <__lshift>
    5ed8:	4631      	mov	r1, r6
    5eda:	4682      	mov	sl, r0
    5edc:	f000 faf5 	bl	64ca <__mcmp>
    5ee0:	2800      	cmp	r0, #0
    5ee2:	dc05      	bgt.n	5ef0 <_dtoa_r+0xac8>
    5ee4:	f47f af25 	bne.w	5d32 <_dtoa_r+0x90a>
    5ee8:	f019 0f01 	tst.w	r9, #1
    5eec:	f43f af21 	beq.w	5d32 <_dtoa_r+0x90a>
    5ef0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    5ef4:	f47f af1b 	bne.w	5d2e <_dtoa_r+0x906>
    5ef8:	2339      	movs	r3, #57	; 0x39
    5efa:	f888 3000 	strb.w	r3, [r8]
    5efe:	f108 0801 	add.w	r8, r8, #1
    5f02:	4645      	mov	r5, r8
    5f04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    5f08:	2b39      	cmp	r3, #57	; 0x39
    5f0a:	f105 32ff 	add.w	r2, r5, #4294967295
    5f0e:	d03a      	beq.n	5f86 <_dtoa_r+0xb5e>
    5f10:	3301      	adds	r3, #1
    5f12:	e03f      	b.n	5f94 <_dtoa_r+0xb6c>
    5f14:	2b00      	cmp	r3, #0
    5f16:	f108 0501 	add.w	r5, r8, #1
    5f1a:	dd05      	ble.n	5f28 <_dtoa_r+0xb00>
    5f1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    5f20:	d0ea      	beq.n	5ef8 <_dtoa_r+0xad0>
    5f22:	f109 0901 	add.w	r9, r9, #1
    5f26:	e706      	b.n	5d36 <_dtoa_r+0x90e>
    5f28:	9b06      	ldr	r3, [sp, #24]
    5f2a:	9a04      	ldr	r2, [sp, #16]
    5f2c:	f805 9c01 	strb.w	r9, [r5, #-1]
    5f30:	1aeb      	subs	r3, r5, r3
    5f32:	4293      	cmp	r3, r2
    5f34:	46a8      	mov	r8, r5
    5f36:	d0a3      	beq.n	5e80 <_dtoa_r+0xa58>
    5f38:	4651      	mov	r1, sl
    5f3a:	2300      	movs	r3, #0
    5f3c:	220a      	movs	r2, #10
    5f3e:	4620      	mov	r0, r4
    5f40:	f000 f904 	bl	614c <__multadd>
    5f44:	9b07      	ldr	r3, [sp, #28]
    5f46:	9907      	ldr	r1, [sp, #28]
    5f48:	42bb      	cmp	r3, r7
    5f4a:	4682      	mov	sl, r0
    5f4c:	f04f 0300 	mov.w	r3, #0
    5f50:	f04f 020a 	mov.w	r2, #10
    5f54:	4620      	mov	r0, r4
    5f56:	d104      	bne.n	5f62 <_dtoa_r+0xb3a>
    5f58:	f000 f8f8 	bl	614c <__multadd>
    5f5c:	9007      	str	r0, [sp, #28]
    5f5e:	4607      	mov	r7, r0
    5f60:	e6b0      	b.n	5cc4 <_dtoa_r+0x89c>
    5f62:	f000 f8f3 	bl	614c <__multadd>
    5f66:	2300      	movs	r3, #0
    5f68:	9007      	str	r0, [sp, #28]
    5f6a:	220a      	movs	r2, #10
    5f6c:	4639      	mov	r1, r7
    5f6e:	4620      	mov	r0, r4
    5f70:	f000 f8ec 	bl	614c <__multadd>
    5f74:	e7f3      	b.n	5f5e <_dtoa_r+0xb36>
    5f76:	4651      	mov	r1, sl
    5f78:	2300      	movs	r3, #0
    5f7a:	220a      	movs	r2, #10
    5f7c:	4620      	mov	r0, r4
    5f7e:	f000 f8e5 	bl	614c <__multadd>
    5f82:	4682      	mov	sl, r0
    5f84:	e766      	b.n	5e54 <_dtoa_r+0xa2c>
    5f86:	9b06      	ldr	r3, [sp, #24]
    5f88:	4293      	cmp	r3, r2
    5f8a:	d105      	bne.n	5f98 <_dtoa_r+0xb70>
    5f8c:	9a06      	ldr	r2, [sp, #24]
    5f8e:	f10b 0b01 	add.w	fp, fp, #1
    5f92:	2331      	movs	r3, #49	; 0x31
    5f94:	7013      	strb	r3, [r2, #0]
    5f96:	e73c      	b.n	5e12 <_dtoa_r+0x9ea>
    5f98:	4615      	mov	r5, r2
    5f9a:	e7b3      	b.n	5f04 <_dtoa_r+0xadc>
    5f9c:	4b09      	ldr	r3, [pc, #36]	; (5fc4 <_dtoa_r+0xb9c>)
    5f9e:	f7ff baa5 	b.w	54ec <_dtoa_r+0xc4>
    5fa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	f47f aa7f 	bne.w	54a8 <_dtoa_r+0x80>
    5faa:	4b07      	ldr	r3, [pc, #28]	; (5fc8 <_dtoa_r+0xba0>)
    5fac:	f7ff ba9e 	b.w	54ec <_dtoa_r+0xc4>
    5fb0:	9b04      	ldr	r3, [sp, #16]
    5fb2:	2b00      	cmp	r3, #0
    5fb4:	f73f af4d 	bgt.w	5e52 <_dtoa_r+0xa2a>
    5fb8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5fba:	2b02      	cmp	r3, #2
    5fbc:	f77f af49 	ble.w	5e52 <_dtoa_r+0xa2a>
    5fc0:	e712      	b.n	5de8 <_dtoa_r+0x9c0>
    5fc2:	bf00      	nop
    5fc4:	0000780a 	.word	0x0000780a
    5fc8:	0000782e 	.word	0x0000782e

00005fcc <_localeconv_r>:
    5fcc:	4b04      	ldr	r3, [pc, #16]	; (5fe0 <_localeconv_r+0x14>)
    5fce:	681b      	ldr	r3, [r3, #0]
    5fd0:	6a18      	ldr	r0, [r3, #32]
    5fd2:	4b04      	ldr	r3, [pc, #16]	; (5fe4 <_localeconv_r+0x18>)
    5fd4:	2800      	cmp	r0, #0
    5fd6:	bf08      	it	eq
    5fd8:	4618      	moveq	r0, r3
    5fda:	30f0      	adds	r0, #240	; 0xf0
    5fdc:	4770      	bx	lr
    5fde:	bf00      	nop
    5fe0:	200000dc 	.word	0x200000dc
    5fe4:	20000140 	.word	0x20000140

00005fe8 <malloc>:
    5fe8:	4b02      	ldr	r3, [pc, #8]	; (5ff4 <malloc+0xc>)
    5fea:	4601      	mov	r1, r0
    5fec:	6818      	ldr	r0, [r3, #0]
    5fee:	f000 bb8f 	b.w	6710 <_malloc_r>
    5ff2:	bf00      	nop
    5ff4:	200000dc 	.word	0x200000dc
	...

00006000 <memchr>:
    6000:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6004:	2a10      	cmp	r2, #16
    6006:	db2b      	blt.n	6060 <memchr+0x60>
    6008:	f010 0f07 	tst.w	r0, #7
    600c:	d008      	beq.n	6020 <memchr+0x20>
    600e:	f810 3b01 	ldrb.w	r3, [r0], #1
    6012:	3a01      	subs	r2, #1
    6014:	428b      	cmp	r3, r1
    6016:	d02d      	beq.n	6074 <memchr+0x74>
    6018:	f010 0f07 	tst.w	r0, #7
    601c:	b342      	cbz	r2, 6070 <memchr+0x70>
    601e:	d1f6      	bne.n	600e <memchr+0xe>
    6020:	b4f0      	push	{r4, r5, r6, r7}
    6022:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    6026:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    602a:	f022 0407 	bic.w	r4, r2, #7
    602e:	f07f 0700 	mvns.w	r7, #0
    6032:	2300      	movs	r3, #0
    6034:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    6038:	3c08      	subs	r4, #8
    603a:	ea85 0501 	eor.w	r5, r5, r1
    603e:	ea86 0601 	eor.w	r6, r6, r1
    6042:	fa85 f547 	uadd8	r5, r5, r7
    6046:	faa3 f587 	sel	r5, r3, r7
    604a:	fa86 f647 	uadd8	r6, r6, r7
    604e:	faa5 f687 	sel	r6, r5, r7
    6052:	b98e      	cbnz	r6, 6078 <memchr+0x78>
    6054:	d1ee      	bne.n	6034 <memchr+0x34>
    6056:	bcf0      	pop	{r4, r5, r6, r7}
    6058:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    605c:	f002 0207 	and.w	r2, r2, #7
    6060:	b132      	cbz	r2, 6070 <memchr+0x70>
    6062:	f810 3b01 	ldrb.w	r3, [r0], #1
    6066:	3a01      	subs	r2, #1
    6068:	ea83 0301 	eor.w	r3, r3, r1
    606c:	b113      	cbz	r3, 6074 <memchr+0x74>
    606e:	d1f8      	bne.n	6062 <memchr+0x62>
    6070:	2000      	movs	r0, #0
    6072:	4770      	bx	lr
    6074:	3801      	subs	r0, #1
    6076:	4770      	bx	lr
    6078:	2d00      	cmp	r5, #0
    607a:	bf06      	itte	eq
    607c:	4635      	moveq	r5, r6
    607e:	3803      	subeq	r0, #3
    6080:	3807      	subne	r0, #7
    6082:	f015 0f01 	tst.w	r5, #1
    6086:	d107      	bne.n	6098 <memchr+0x98>
    6088:	3001      	adds	r0, #1
    608a:	f415 7f80 	tst.w	r5, #256	; 0x100
    608e:	bf02      	ittt	eq
    6090:	3001      	addeq	r0, #1
    6092:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    6096:	3001      	addeq	r0, #1
    6098:	bcf0      	pop	{r4, r5, r6, r7}
    609a:	3801      	subs	r0, #1
    609c:	4770      	bx	lr
    609e:	bf00      	nop

000060a0 <memcpy>:
    60a0:	b510      	push	{r4, lr}
    60a2:	1e43      	subs	r3, r0, #1
    60a4:	440a      	add	r2, r1
    60a6:	4291      	cmp	r1, r2
    60a8:	d100      	bne.n	60ac <memcpy+0xc>
    60aa:	bd10      	pop	{r4, pc}
    60ac:	f811 4b01 	ldrb.w	r4, [r1], #1
    60b0:	f803 4f01 	strb.w	r4, [r3, #1]!
    60b4:	e7f7      	b.n	60a6 <memcpy+0x6>

000060b6 <_Balloc>:
    60b6:	b570      	push	{r4, r5, r6, lr}
    60b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    60ba:	4604      	mov	r4, r0
    60bc:	460e      	mov	r6, r1
    60be:	b93d      	cbnz	r5, 60d0 <_Balloc+0x1a>
    60c0:	2010      	movs	r0, #16
    60c2:	f7ff ff91 	bl	5fe8 <malloc>
    60c6:	6260      	str	r0, [r4, #36]	; 0x24
    60c8:	6045      	str	r5, [r0, #4]
    60ca:	6085      	str	r5, [r0, #8]
    60cc:	6005      	str	r5, [r0, #0]
    60ce:	60c5      	str	r5, [r0, #12]
    60d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    60d2:	68eb      	ldr	r3, [r5, #12]
    60d4:	b183      	cbz	r3, 60f8 <_Balloc+0x42>
    60d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    60d8:	68db      	ldr	r3, [r3, #12]
    60da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    60de:	b9b8      	cbnz	r0, 6110 <_Balloc+0x5a>
    60e0:	2101      	movs	r1, #1
    60e2:	fa01 f506 	lsl.w	r5, r1, r6
    60e6:	1d6a      	adds	r2, r5, #5
    60e8:	0092      	lsls	r2, r2, #2
    60ea:	4620      	mov	r0, r4
    60ec:	f000 fab4 	bl	6658 <_calloc_r>
    60f0:	b160      	cbz	r0, 610c <_Balloc+0x56>
    60f2:	6046      	str	r6, [r0, #4]
    60f4:	6085      	str	r5, [r0, #8]
    60f6:	e00e      	b.n	6116 <_Balloc+0x60>
    60f8:	2221      	movs	r2, #33	; 0x21
    60fa:	2104      	movs	r1, #4
    60fc:	4620      	mov	r0, r4
    60fe:	f000 faab 	bl	6658 <_calloc_r>
    6102:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6104:	60e8      	str	r0, [r5, #12]
    6106:	68db      	ldr	r3, [r3, #12]
    6108:	2b00      	cmp	r3, #0
    610a:	d1e4      	bne.n	60d6 <_Balloc+0x20>
    610c:	2000      	movs	r0, #0
    610e:	bd70      	pop	{r4, r5, r6, pc}
    6110:	6802      	ldr	r2, [r0, #0]
    6112:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    6116:	2300      	movs	r3, #0
    6118:	6103      	str	r3, [r0, #16]
    611a:	60c3      	str	r3, [r0, #12]
    611c:	bd70      	pop	{r4, r5, r6, pc}

0000611e <_Bfree>:
    611e:	b570      	push	{r4, r5, r6, lr}
    6120:	6a44      	ldr	r4, [r0, #36]	; 0x24
    6122:	4606      	mov	r6, r0
    6124:	460d      	mov	r5, r1
    6126:	b93c      	cbnz	r4, 6138 <_Bfree+0x1a>
    6128:	2010      	movs	r0, #16
    612a:	f7ff ff5d 	bl	5fe8 <malloc>
    612e:	6270      	str	r0, [r6, #36]	; 0x24
    6130:	6044      	str	r4, [r0, #4]
    6132:	6084      	str	r4, [r0, #8]
    6134:	6004      	str	r4, [r0, #0]
    6136:	60c4      	str	r4, [r0, #12]
    6138:	b13d      	cbz	r5, 614a <_Bfree+0x2c>
    613a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    613c:	686a      	ldr	r2, [r5, #4]
    613e:	68db      	ldr	r3, [r3, #12]
    6140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6144:	6029      	str	r1, [r5, #0]
    6146:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    614a:	bd70      	pop	{r4, r5, r6, pc}

0000614c <__multadd>:
    614c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6150:	690d      	ldr	r5, [r1, #16]
    6152:	461f      	mov	r7, r3
    6154:	4606      	mov	r6, r0
    6156:	460c      	mov	r4, r1
    6158:	f101 0e14 	add.w	lr, r1, #20
    615c:	2300      	movs	r3, #0
    615e:	f8de 0000 	ldr.w	r0, [lr]
    6162:	b281      	uxth	r1, r0
    6164:	fb02 7101 	mla	r1, r2, r1, r7
    6168:	0c0f      	lsrs	r7, r1, #16
    616a:	0c00      	lsrs	r0, r0, #16
    616c:	fb02 7000 	mla	r0, r2, r0, r7
    6170:	b289      	uxth	r1, r1
    6172:	3301      	adds	r3, #1
    6174:	eb01 4100 	add.w	r1, r1, r0, lsl #16
    6178:	429d      	cmp	r5, r3
    617a:	ea4f 4710 	mov.w	r7, r0, lsr #16
    617e:	f84e 1b04 	str.w	r1, [lr], #4
    6182:	dcec      	bgt.n	615e <__multadd+0x12>
    6184:	b1d7      	cbz	r7, 61bc <__multadd+0x70>
    6186:	68a3      	ldr	r3, [r4, #8]
    6188:	429d      	cmp	r5, r3
    618a:	db12      	blt.n	61b2 <__multadd+0x66>
    618c:	6861      	ldr	r1, [r4, #4]
    618e:	4630      	mov	r0, r6
    6190:	3101      	adds	r1, #1
    6192:	f7ff ff90 	bl	60b6 <_Balloc>
    6196:	6922      	ldr	r2, [r4, #16]
    6198:	3202      	adds	r2, #2
    619a:	f104 010c 	add.w	r1, r4, #12
    619e:	4680      	mov	r8, r0
    61a0:	0092      	lsls	r2, r2, #2
    61a2:	300c      	adds	r0, #12
    61a4:	f7ff ff7c 	bl	60a0 <memcpy>
    61a8:	4621      	mov	r1, r4
    61aa:	4630      	mov	r0, r6
    61ac:	f7ff ffb7 	bl	611e <_Bfree>
    61b0:	4644      	mov	r4, r8
    61b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    61b6:	3501      	adds	r5, #1
    61b8:	615f      	str	r7, [r3, #20]
    61ba:	6125      	str	r5, [r4, #16]
    61bc:	4620      	mov	r0, r4
    61be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000061c2 <__hi0bits>:
    61c2:	0c02      	lsrs	r2, r0, #16
    61c4:	0412      	lsls	r2, r2, #16
    61c6:	4603      	mov	r3, r0
    61c8:	b9b2      	cbnz	r2, 61f8 <__hi0bits+0x36>
    61ca:	0403      	lsls	r3, r0, #16
    61cc:	2010      	movs	r0, #16
    61ce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    61d2:	bf04      	itt	eq
    61d4:	021b      	lsleq	r3, r3, #8
    61d6:	3008      	addeq	r0, #8
    61d8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    61dc:	bf04      	itt	eq
    61de:	011b      	lsleq	r3, r3, #4
    61e0:	3004      	addeq	r0, #4
    61e2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    61e6:	bf04      	itt	eq
    61e8:	009b      	lsleq	r3, r3, #2
    61ea:	3002      	addeq	r0, #2
    61ec:	2b00      	cmp	r3, #0
    61ee:	db06      	blt.n	61fe <__hi0bits+0x3c>
    61f0:	005b      	lsls	r3, r3, #1
    61f2:	d503      	bpl.n	61fc <__hi0bits+0x3a>
    61f4:	3001      	adds	r0, #1
    61f6:	4770      	bx	lr
    61f8:	2000      	movs	r0, #0
    61fa:	e7e8      	b.n	61ce <__hi0bits+0xc>
    61fc:	2020      	movs	r0, #32
    61fe:	4770      	bx	lr

00006200 <__lo0bits>:
    6200:	6803      	ldr	r3, [r0, #0]
    6202:	f013 0207 	ands.w	r2, r3, #7
    6206:	4601      	mov	r1, r0
    6208:	d00b      	beq.n	6222 <__lo0bits+0x22>
    620a:	07da      	lsls	r2, r3, #31
    620c:	d423      	bmi.n	6256 <__lo0bits+0x56>
    620e:	0798      	lsls	r0, r3, #30
    6210:	bf49      	itett	mi
    6212:	085b      	lsrmi	r3, r3, #1
    6214:	089b      	lsrpl	r3, r3, #2
    6216:	2001      	movmi	r0, #1
    6218:	600b      	strmi	r3, [r1, #0]
    621a:	bf5c      	itt	pl
    621c:	600b      	strpl	r3, [r1, #0]
    621e:	2002      	movpl	r0, #2
    6220:	4770      	bx	lr
    6222:	b298      	uxth	r0, r3
    6224:	b9a8      	cbnz	r0, 6252 <__lo0bits+0x52>
    6226:	0c1b      	lsrs	r3, r3, #16
    6228:	2010      	movs	r0, #16
    622a:	f013 0fff 	tst.w	r3, #255	; 0xff
    622e:	bf04      	itt	eq
    6230:	0a1b      	lsreq	r3, r3, #8
    6232:	3008      	addeq	r0, #8
    6234:	071a      	lsls	r2, r3, #28
    6236:	bf04      	itt	eq
    6238:	091b      	lsreq	r3, r3, #4
    623a:	3004      	addeq	r0, #4
    623c:	079a      	lsls	r2, r3, #30
    623e:	bf04      	itt	eq
    6240:	089b      	lsreq	r3, r3, #2
    6242:	3002      	addeq	r0, #2
    6244:	07da      	lsls	r2, r3, #31
    6246:	d402      	bmi.n	624e <__lo0bits+0x4e>
    6248:	085b      	lsrs	r3, r3, #1
    624a:	d006      	beq.n	625a <__lo0bits+0x5a>
    624c:	3001      	adds	r0, #1
    624e:	600b      	str	r3, [r1, #0]
    6250:	4770      	bx	lr
    6252:	4610      	mov	r0, r2
    6254:	e7e9      	b.n	622a <__lo0bits+0x2a>
    6256:	2000      	movs	r0, #0
    6258:	4770      	bx	lr
    625a:	2020      	movs	r0, #32
    625c:	4770      	bx	lr

0000625e <__i2b>:
    625e:	b510      	push	{r4, lr}
    6260:	460c      	mov	r4, r1
    6262:	2101      	movs	r1, #1
    6264:	f7ff ff27 	bl	60b6 <_Balloc>
    6268:	2201      	movs	r2, #1
    626a:	6144      	str	r4, [r0, #20]
    626c:	6102      	str	r2, [r0, #16]
    626e:	bd10      	pop	{r4, pc}

00006270 <__multiply>:
    6270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6274:	4614      	mov	r4, r2
    6276:	690a      	ldr	r2, [r1, #16]
    6278:	6923      	ldr	r3, [r4, #16]
    627a:	429a      	cmp	r2, r3
    627c:	bfb8      	it	lt
    627e:	460b      	movlt	r3, r1
    6280:	4689      	mov	r9, r1
    6282:	bfbc      	itt	lt
    6284:	46a1      	movlt	r9, r4
    6286:	461c      	movlt	r4, r3
    6288:	f8d9 7010 	ldr.w	r7, [r9, #16]
    628c:	f8d4 a010 	ldr.w	sl, [r4, #16]
    6290:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6294:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6298:	eb07 060a 	add.w	r6, r7, sl
    629c:	429e      	cmp	r6, r3
    629e:	bfc8      	it	gt
    62a0:	3101      	addgt	r1, #1
    62a2:	f7ff ff08 	bl	60b6 <_Balloc>
    62a6:	f100 0514 	add.w	r5, r0, #20
    62aa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    62ae:	462b      	mov	r3, r5
    62b0:	2200      	movs	r2, #0
    62b2:	4543      	cmp	r3, r8
    62b4:	d316      	bcc.n	62e4 <__multiply+0x74>
    62b6:	f104 0214 	add.w	r2, r4, #20
    62ba:	f109 0114 	add.w	r1, r9, #20
    62be:	eb02 038a 	add.w	r3, r2, sl, lsl #2
    62c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    62c6:	9301      	str	r3, [sp, #4]
    62c8:	9c01      	ldr	r4, [sp, #4]
    62ca:	4294      	cmp	r4, r2
    62cc:	4613      	mov	r3, r2
    62ce:	d80c      	bhi.n	62ea <__multiply+0x7a>
    62d0:	2e00      	cmp	r6, #0
    62d2:	dd03      	ble.n	62dc <__multiply+0x6c>
    62d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    62d8:	2b00      	cmp	r3, #0
    62da:	d054      	beq.n	6386 <__multiply+0x116>
    62dc:	6106      	str	r6, [r0, #16]
    62de:	b003      	add	sp, #12
    62e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62e4:	f843 2b04 	str.w	r2, [r3], #4
    62e8:	e7e3      	b.n	62b2 <__multiply+0x42>
    62ea:	f8b3 a000 	ldrh.w	sl, [r3]
    62ee:	3204      	adds	r2, #4
    62f0:	f1ba 0f00 	cmp.w	sl, #0
    62f4:	d020      	beq.n	6338 <__multiply+0xc8>
    62f6:	46ae      	mov	lr, r5
    62f8:	4689      	mov	r9, r1
    62fa:	f04f 0c00 	mov.w	ip, #0
    62fe:	f859 4b04 	ldr.w	r4, [r9], #4
    6302:	f8be b000 	ldrh.w	fp, [lr]
    6306:	b2a3      	uxth	r3, r4
    6308:	fb0a b303 	mla	r3, sl, r3, fp
    630c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
    6310:	f8de 4000 	ldr.w	r4, [lr]
    6314:	4463      	add	r3, ip
    6316:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    631a:	fb0a c40b 	mla	r4, sl, fp, ip
    631e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    6322:	b29b      	uxth	r3, r3
    6324:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    6328:	454f      	cmp	r7, r9
    632a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    632e:	f84e 3b04 	str.w	r3, [lr], #4
    6332:	d8e4      	bhi.n	62fe <__multiply+0x8e>
    6334:	f8ce c000 	str.w	ip, [lr]
    6338:	f832 9c02 	ldrh.w	r9, [r2, #-2]
    633c:	f1b9 0f00 	cmp.w	r9, #0
    6340:	d01f      	beq.n	6382 <__multiply+0x112>
    6342:	682b      	ldr	r3, [r5, #0]
    6344:	46ae      	mov	lr, r5
    6346:	468c      	mov	ip, r1
    6348:	f04f 0a00 	mov.w	sl, #0
    634c:	f8bc 4000 	ldrh.w	r4, [ip]
    6350:	f8be b002 	ldrh.w	fp, [lr, #2]
    6354:	fb09 b404 	mla	r4, r9, r4, fp
    6358:	44a2      	add	sl, r4
    635a:	b29b      	uxth	r3, r3
    635c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    6360:	f84e 3b04 	str.w	r3, [lr], #4
    6364:	f85c 3b04 	ldr.w	r3, [ip], #4
    6368:	f8be 4000 	ldrh.w	r4, [lr]
    636c:	0c1b      	lsrs	r3, r3, #16
    636e:	fb09 4303 	mla	r3, r9, r3, r4
    6372:	eb03 431a 	add.w	r3, r3, sl, lsr #16
    6376:	4567      	cmp	r7, ip
    6378:	ea4f 4a13 	mov.w	sl, r3, lsr #16
    637c:	d8e6      	bhi.n	634c <__multiply+0xdc>
    637e:	f8ce 3000 	str.w	r3, [lr]
    6382:	3504      	adds	r5, #4
    6384:	e7a0      	b.n	62c8 <__multiply+0x58>
    6386:	3e01      	subs	r6, #1
    6388:	e7a2      	b.n	62d0 <__multiply+0x60>
	...

0000638c <__pow5mult>:
    638c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6390:	4615      	mov	r5, r2
    6392:	f012 0203 	ands.w	r2, r2, #3
    6396:	4606      	mov	r6, r0
    6398:	460f      	mov	r7, r1
    639a:	d007      	beq.n	63ac <__pow5mult+0x20>
    639c:	3a01      	subs	r2, #1
    639e:	4c21      	ldr	r4, [pc, #132]	; (6424 <__pow5mult+0x98>)
    63a0:	2300      	movs	r3, #0
    63a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    63a6:	f7ff fed1 	bl	614c <__multadd>
    63aa:	4607      	mov	r7, r0
    63ac:	10ad      	asrs	r5, r5, #2
    63ae:	d035      	beq.n	641c <__pow5mult+0x90>
    63b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
    63b2:	b93c      	cbnz	r4, 63c4 <__pow5mult+0x38>
    63b4:	2010      	movs	r0, #16
    63b6:	f7ff fe17 	bl	5fe8 <malloc>
    63ba:	6270      	str	r0, [r6, #36]	; 0x24
    63bc:	6044      	str	r4, [r0, #4]
    63be:	6084      	str	r4, [r0, #8]
    63c0:	6004      	str	r4, [r0, #0]
    63c2:	60c4      	str	r4, [r0, #12]
    63c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    63c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
    63cc:	b94c      	cbnz	r4, 63e2 <__pow5mult+0x56>
    63ce:	f240 2171 	movw	r1, #625	; 0x271
    63d2:	4630      	mov	r0, r6
    63d4:	f7ff ff43 	bl	625e <__i2b>
    63d8:	2300      	movs	r3, #0
    63da:	f8c8 0008 	str.w	r0, [r8, #8]
    63de:	4604      	mov	r4, r0
    63e0:	6003      	str	r3, [r0, #0]
    63e2:	f04f 0800 	mov.w	r8, #0
    63e6:	07eb      	lsls	r3, r5, #31
    63e8:	d50a      	bpl.n	6400 <__pow5mult+0x74>
    63ea:	4639      	mov	r1, r7
    63ec:	4622      	mov	r2, r4
    63ee:	4630      	mov	r0, r6
    63f0:	f7ff ff3e 	bl	6270 <__multiply>
    63f4:	4639      	mov	r1, r7
    63f6:	4681      	mov	r9, r0
    63f8:	4630      	mov	r0, r6
    63fa:	f7ff fe90 	bl	611e <_Bfree>
    63fe:	464f      	mov	r7, r9
    6400:	106d      	asrs	r5, r5, #1
    6402:	d00b      	beq.n	641c <__pow5mult+0x90>
    6404:	6820      	ldr	r0, [r4, #0]
    6406:	b938      	cbnz	r0, 6418 <__pow5mult+0x8c>
    6408:	4622      	mov	r2, r4
    640a:	4621      	mov	r1, r4
    640c:	4630      	mov	r0, r6
    640e:	f7ff ff2f 	bl	6270 <__multiply>
    6412:	6020      	str	r0, [r4, #0]
    6414:	f8c0 8000 	str.w	r8, [r0]
    6418:	4604      	mov	r4, r0
    641a:	e7e4      	b.n	63e6 <__pow5mult+0x5a>
    641c:	4638      	mov	r0, r7
    641e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6422:	bf00      	nop
    6424:	00007930 	.word	0x00007930

00006428 <__lshift>:
    6428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    642c:	460c      	mov	r4, r1
    642e:	ea4f 1a62 	mov.w	sl, r2, asr #5
    6432:	6923      	ldr	r3, [r4, #16]
    6434:	6849      	ldr	r1, [r1, #4]
    6436:	eb0a 0903 	add.w	r9, sl, r3
    643a:	68a3      	ldr	r3, [r4, #8]
    643c:	4607      	mov	r7, r0
    643e:	4616      	mov	r6, r2
    6440:	f109 0501 	add.w	r5, r9, #1
    6444:	42ab      	cmp	r3, r5
    6446:	db31      	blt.n	64ac <__lshift+0x84>
    6448:	4638      	mov	r0, r7
    644a:	f7ff fe34 	bl	60b6 <_Balloc>
    644e:	2200      	movs	r2, #0
    6450:	4680      	mov	r8, r0
    6452:	f100 0314 	add.w	r3, r0, #20
    6456:	4611      	mov	r1, r2
    6458:	4552      	cmp	r2, sl
    645a:	db2a      	blt.n	64b2 <__lshift+0x8a>
    645c:	6920      	ldr	r0, [r4, #16]
    645e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    6462:	f104 0114 	add.w	r1, r4, #20
    6466:	f016 021f 	ands.w	r2, r6, #31
    646a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    646e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
    6472:	d022      	beq.n	64ba <__lshift+0x92>
    6474:	f1c2 0c20 	rsb	ip, r2, #32
    6478:	2000      	movs	r0, #0
    647a:	680e      	ldr	r6, [r1, #0]
    647c:	4096      	lsls	r6, r2
    647e:	4330      	orrs	r0, r6
    6480:	f843 0b04 	str.w	r0, [r3], #4
    6484:	f851 0b04 	ldr.w	r0, [r1], #4
    6488:	458e      	cmp	lr, r1
    648a:	fa20 f00c 	lsr.w	r0, r0, ip
    648e:	d8f4      	bhi.n	647a <__lshift+0x52>
    6490:	6018      	str	r0, [r3, #0]
    6492:	b108      	cbz	r0, 6498 <__lshift+0x70>
    6494:	f109 0502 	add.w	r5, r9, #2
    6498:	3d01      	subs	r5, #1
    649a:	4638      	mov	r0, r7
    649c:	f8c8 5010 	str.w	r5, [r8, #16]
    64a0:	4621      	mov	r1, r4
    64a2:	f7ff fe3c 	bl	611e <_Bfree>
    64a6:	4640      	mov	r0, r8
    64a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    64ac:	3101      	adds	r1, #1
    64ae:	005b      	lsls	r3, r3, #1
    64b0:	e7c8      	b.n	6444 <__lshift+0x1c>
    64b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    64b6:	3201      	adds	r2, #1
    64b8:	e7ce      	b.n	6458 <__lshift+0x30>
    64ba:	3b04      	subs	r3, #4
    64bc:	f851 2b04 	ldr.w	r2, [r1], #4
    64c0:	f843 2f04 	str.w	r2, [r3, #4]!
    64c4:	458e      	cmp	lr, r1
    64c6:	d8f9      	bhi.n	64bc <__lshift+0x94>
    64c8:	e7e6      	b.n	6498 <__lshift+0x70>

000064ca <__mcmp>:
    64ca:	6903      	ldr	r3, [r0, #16]
    64cc:	690a      	ldr	r2, [r1, #16]
    64ce:	1a9b      	subs	r3, r3, r2
    64d0:	b530      	push	{r4, r5, lr}
    64d2:	d10c      	bne.n	64ee <__mcmp+0x24>
    64d4:	0092      	lsls	r2, r2, #2
    64d6:	3014      	adds	r0, #20
    64d8:	3114      	adds	r1, #20
    64da:	1884      	adds	r4, r0, r2
    64dc:	4411      	add	r1, r2
    64de:	f854 5d04 	ldr.w	r5, [r4, #-4]!
    64e2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    64e6:	4295      	cmp	r5, r2
    64e8:	d003      	beq.n	64f2 <__mcmp+0x28>
    64ea:	d305      	bcc.n	64f8 <__mcmp+0x2e>
    64ec:	2301      	movs	r3, #1
    64ee:	4618      	mov	r0, r3
    64f0:	bd30      	pop	{r4, r5, pc}
    64f2:	42a0      	cmp	r0, r4
    64f4:	d3f3      	bcc.n	64de <__mcmp+0x14>
    64f6:	e7fa      	b.n	64ee <__mcmp+0x24>
    64f8:	f04f 33ff 	mov.w	r3, #4294967295
    64fc:	e7f7      	b.n	64ee <__mcmp+0x24>

000064fe <__mdiff>:
    64fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6502:	460d      	mov	r5, r1
    6504:	4607      	mov	r7, r0
    6506:	4611      	mov	r1, r2
    6508:	4628      	mov	r0, r5
    650a:	4614      	mov	r4, r2
    650c:	f7ff ffdd 	bl	64ca <__mcmp>
    6510:	1e06      	subs	r6, r0, #0
    6512:	d108      	bne.n	6526 <__mdiff+0x28>
    6514:	4631      	mov	r1, r6
    6516:	4638      	mov	r0, r7
    6518:	f7ff fdcd 	bl	60b6 <_Balloc>
    651c:	2301      	movs	r3, #1
    651e:	6103      	str	r3, [r0, #16]
    6520:	6146      	str	r6, [r0, #20]
    6522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6526:	bfa4      	itt	ge
    6528:	4623      	movge	r3, r4
    652a:	462c      	movge	r4, r5
    652c:	4638      	mov	r0, r7
    652e:	6861      	ldr	r1, [r4, #4]
    6530:	bfa6      	itte	ge
    6532:	461d      	movge	r5, r3
    6534:	2600      	movge	r6, #0
    6536:	2601      	movlt	r6, #1
    6538:	f7ff fdbd 	bl	60b6 <_Balloc>
    653c:	692b      	ldr	r3, [r5, #16]
    653e:	60c6      	str	r6, [r0, #12]
    6540:	6926      	ldr	r6, [r4, #16]
    6542:	f105 0914 	add.w	r9, r5, #20
    6546:	f104 0214 	add.w	r2, r4, #20
    654a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
    654e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
    6552:	f100 0514 	add.w	r5, r0, #20
    6556:	f04f 0c00 	mov.w	ip, #0
    655a:	f852 ab04 	ldr.w	sl, [r2], #4
    655e:	f859 4b04 	ldr.w	r4, [r9], #4
    6562:	fa1c f18a 	uxtah	r1, ip, sl
    6566:	b2a3      	uxth	r3, r4
    6568:	1ac9      	subs	r1, r1, r3
    656a:	0c23      	lsrs	r3, r4, #16
    656c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
    6570:	eb03 4321 	add.w	r3, r3, r1, asr #16
    6574:	b289      	uxth	r1, r1
    6576:	ea4f 4c23 	mov.w	ip, r3, asr #16
    657a:	45c8      	cmp	r8, r9
    657c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    6580:	4696      	mov	lr, r2
    6582:	f845 3b04 	str.w	r3, [r5], #4
    6586:	d8e8      	bhi.n	655a <__mdiff+0x5c>
    6588:	45be      	cmp	lr, r7
    658a:	d305      	bcc.n	6598 <__mdiff+0x9a>
    658c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    6590:	b18b      	cbz	r3, 65b6 <__mdiff+0xb8>
    6592:	6106      	str	r6, [r0, #16]
    6594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6598:	f85e 1b04 	ldr.w	r1, [lr], #4
    659c:	fa1c f381 	uxtah	r3, ip, r1
    65a0:	141a      	asrs	r2, r3, #16
    65a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    65a6:	b29b      	uxth	r3, r3
    65a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    65ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
    65b0:	f845 3b04 	str.w	r3, [r5], #4
    65b4:	e7e8      	b.n	6588 <__mdiff+0x8a>
    65b6:	3e01      	subs	r6, #1
    65b8:	e7e8      	b.n	658c <__mdiff+0x8e>

000065ba <__d2b>:
    65ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    65be:	2101      	movs	r1, #1
    65c0:	461c      	mov	r4, r3
    65c2:	4690      	mov	r8, r2
    65c4:	9e08      	ldr	r6, [sp, #32]
    65c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    65c8:	f7ff fd75 	bl	60b6 <_Balloc>
    65cc:	f3c4 0213 	ubfx	r2, r4, #0, #20
    65d0:	f3c4 540a 	ubfx	r4, r4, #20, #11
    65d4:	4607      	mov	r7, r0
    65d6:	bb34      	cbnz	r4, 6626 <__d2b+0x6c>
    65d8:	9201      	str	r2, [sp, #4]
    65da:	f1b8 0f00 	cmp.w	r8, #0
    65de:	d027      	beq.n	6630 <__d2b+0x76>
    65e0:	a802      	add	r0, sp, #8
    65e2:	f840 8d08 	str.w	r8, [r0, #-8]!
    65e6:	f7ff fe0b 	bl	6200 <__lo0bits>
    65ea:	9900      	ldr	r1, [sp, #0]
    65ec:	b1f0      	cbz	r0, 662c <__d2b+0x72>
    65ee:	9a01      	ldr	r2, [sp, #4]
    65f0:	f1c0 0320 	rsb	r3, r0, #32
    65f4:	fa02 f303 	lsl.w	r3, r2, r3
    65f8:	430b      	orrs	r3, r1
    65fa:	40c2      	lsrs	r2, r0
    65fc:	617b      	str	r3, [r7, #20]
    65fe:	9201      	str	r2, [sp, #4]
    6600:	9b01      	ldr	r3, [sp, #4]
    6602:	61bb      	str	r3, [r7, #24]
    6604:	2b00      	cmp	r3, #0
    6606:	bf14      	ite	ne
    6608:	2102      	movne	r1, #2
    660a:	2101      	moveq	r1, #1
    660c:	6139      	str	r1, [r7, #16]
    660e:	b1c4      	cbz	r4, 6642 <__d2b+0x88>
    6610:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
    6614:	4404      	add	r4, r0
    6616:	6034      	str	r4, [r6, #0]
    6618:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    661c:	6028      	str	r0, [r5, #0]
    661e:	4638      	mov	r0, r7
    6620:	b002      	add	sp, #8
    6622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6626:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    662a:	e7d5      	b.n	65d8 <__d2b+0x1e>
    662c:	6179      	str	r1, [r7, #20]
    662e:	e7e7      	b.n	6600 <__d2b+0x46>
    6630:	a801      	add	r0, sp, #4
    6632:	f7ff fde5 	bl	6200 <__lo0bits>
    6636:	9b01      	ldr	r3, [sp, #4]
    6638:	617b      	str	r3, [r7, #20]
    663a:	2101      	movs	r1, #1
    663c:	6139      	str	r1, [r7, #16]
    663e:	3020      	adds	r0, #32
    6640:	e7e5      	b.n	660e <__d2b+0x54>
    6642:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    6646:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    664a:	6030      	str	r0, [r6, #0]
    664c:	6918      	ldr	r0, [r3, #16]
    664e:	f7ff fdb8 	bl	61c2 <__hi0bits>
    6652:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    6656:	e7e1      	b.n	661c <__d2b+0x62>

00006658 <_calloc_r>:
    6658:	b538      	push	{r3, r4, r5, lr}
    665a:	fb02 f401 	mul.w	r4, r2, r1
    665e:	4621      	mov	r1, r4
    6660:	f000 f856 	bl	6710 <_malloc_r>
    6664:	4605      	mov	r5, r0
    6666:	b118      	cbz	r0, 6670 <_calloc_r+0x18>
    6668:	4622      	mov	r2, r4
    666a:	2100      	movs	r1, #0
    666c:	f7fe f9ba 	bl	49e4 <memset>
    6670:	4628      	mov	r0, r5
    6672:	bd38      	pop	{r3, r4, r5, pc}

00006674 <_free_r>:
    6674:	b538      	push	{r3, r4, r5, lr}
    6676:	4605      	mov	r5, r0
    6678:	2900      	cmp	r1, #0
    667a:	d045      	beq.n	6708 <_free_r+0x94>
    667c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6680:	1f0c      	subs	r4, r1, #4
    6682:	2b00      	cmp	r3, #0
    6684:	bfb8      	it	lt
    6686:	18e4      	addlt	r4, r4, r3
    6688:	f000 fa2c 	bl	6ae4 <__malloc_lock>
    668c:	4a1f      	ldr	r2, [pc, #124]	; (670c <_free_r+0x98>)
    668e:	6813      	ldr	r3, [r2, #0]
    6690:	4610      	mov	r0, r2
    6692:	b933      	cbnz	r3, 66a2 <_free_r+0x2e>
    6694:	6063      	str	r3, [r4, #4]
    6696:	6014      	str	r4, [r2, #0]
    6698:	4628      	mov	r0, r5
    669a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    669e:	f000 ba22 	b.w	6ae6 <__malloc_unlock>
    66a2:	42a3      	cmp	r3, r4
    66a4:	d90c      	bls.n	66c0 <_free_r+0x4c>
    66a6:	6821      	ldr	r1, [r4, #0]
    66a8:	1862      	adds	r2, r4, r1
    66aa:	4293      	cmp	r3, r2
    66ac:	bf04      	itt	eq
    66ae:	681a      	ldreq	r2, [r3, #0]
    66b0:	685b      	ldreq	r3, [r3, #4]
    66b2:	6063      	str	r3, [r4, #4]
    66b4:	bf04      	itt	eq
    66b6:	1852      	addeq	r2, r2, r1
    66b8:	6022      	streq	r2, [r4, #0]
    66ba:	6004      	str	r4, [r0, #0]
    66bc:	e7ec      	b.n	6698 <_free_r+0x24>
    66be:	4613      	mov	r3, r2
    66c0:	685a      	ldr	r2, [r3, #4]
    66c2:	b10a      	cbz	r2, 66c8 <_free_r+0x54>
    66c4:	42a2      	cmp	r2, r4
    66c6:	d9fa      	bls.n	66be <_free_r+0x4a>
    66c8:	6819      	ldr	r1, [r3, #0]
    66ca:	1858      	adds	r0, r3, r1
    66cc:	42a0      	cmp	r0, r4
    66ce:	d10b      	bne.n	66e8 <_free_r+0x74>
    66d0:	6820      	ldr	r0, [r4, #0]
    66d2:	4401      	add	r1, r0
    66d4:	1858      	adds	r0, r3, r1
    66d6:	4282      	cmp	r2, r0
    66d8:	6019      	str	r1, [r3, #0]
    66da:	d1dd      	bne.n	6698 <_free_r+0x24>
    66dc:	6810      	ldr	r0, [r2, #0]
    66de:	6852      	ldr	r2, [r2, #4]
    66e0:	605a      	str	r2, [r3, #4]
    66e2:	4401      	add	r1, r0
    66e4:	6019      	str	r1, [r3, #0]
    66e6:	e7d7      	b.n	6698 <_free_r+0x24>
    66e8:	d902      	bls.n	66f0 <_free_r+0x7c>
    66ea:	230c      	movs	r3, #12
    66ec:	602b      	str	r3, [r5, #0]
    66ee:	e7d3      	b.n	6698 <_free_r+0x24>
    66f0:	6820      	ldr	r0, [r4, #0]
    66f2:	1821      	adds	r1, r4, r0
    66f4:	428a      	cmp	r2, r1
    66f6:	bf04      	itt	eq
    66f8:	6811      	ldreq	r1, [r2, #0]
    66fa:	6852      	ldreq	r2, [r2, #4]
    66fc:	6062      	str	r2, [r4, #4]
    66fe:	bf04      	itt	eq
    6700:	1809      	addeq	r1, r1, r0
    6702:	6021      	streq	r1, [r4, #0]
    6704:	605c      	str	r4, [r3, #4]
    6706:	e7c7      	b.n	6698 <_free_r+0x24>
    6708:	bd38      	pop	{r3, r4, r5, pc}
    670a:	bf00      	nop
    670c:	2000046c 	.word	0x2000046c

00006710 <_malloc_r>:
    6710:	b570      	push	{r4, r5, r6, lr}
    6712:	1ccd      	adds	r5, r1, #3
    6714:	f025 0503 	bic.w	r5, r5, #3
    6718:	3508      	adds	r5, #8
    671a:	2d0c      	cmp	r5, #12
    671c:	bf38      	it	cc
    671e:	250c      	movcc	r5, #12
    6720:	2d00      	cmp	r5, #0
    6722:	4606      	mov	r6, r0
    6724:	db01      	blt.n	672a <_malloc_r+0x1a>
    6726:	42a9      	cmp	r1, r5
    6728:	d903      	bls.n	6732 <_malloc_r+0x22>
    672a:	230c      	movs	r3, #12
    672c:	6033      	str	r3, [r6, #0]
    672e:	2000      	movs	r0, #0
    6730:	bd70      	pop	{r4, r5, r6, pc}
    6732:	f000 f9d7 	bl	6ae4 <__malloc_lock>
    6736:	4a23      	ldr	r2, [pc, #140]	; (67c4 <_malloc_r+0xb4>)
    6738:	6814      	ldr	r4, [r2, #0]
    673a:	4621      	mov	r1, r4
    673c:	b991      	cbnz	r1, 6764 <_malloc_r+0x54>
    673e:	4c22      	ldr	r4, [pc, #136]	; (67c8 <_malloc_r+0xb8>)
    6740:	6823      	ldr	r3, [r4, #0]
    6742:	b91b      	cbnz	r3, 674c <_malloc_r+0x3c>
    6744:	4630      	mov	r0, r6
    6746:	f000 f991 	bl	6a6c <_sbrk_r>
    674a:	6020      	str	r0, [r4, #0]
    674c:	4629      	mov	r1, r5
    674e:	4630      	mov	r0, r6
    6750:	f000 f98c 	bl	6a6c <_sbrk_r>
    6754:	1c43      	adds	r3, r0, #1
    6756:	d126      	bne.n	67a6 <_malloc_r+0x96>
    6758:	230c      	movs	r3, #12
    675a:	6033      	str	r3, [r6, #0]
    675c:	4630      	mov	r0, r6
    675e:	f000 f9c2 	bl	6ae6 <__malloc_unlock>
    6762:	e7e4      	b.n	672e <_malloc_r+0x1e>
    6764:	680b      	ldr	r3, [r1, #0]
    6766:	1b5b      	subs	r3, r3, r5
    6768:	d41a      	bmi.n	67a0 <_malloc_r+0x90>
    676a:	2b0b      	cmp	r3, #11
    676c:	d90f      	bls.n	678e <_malloc_r+0x7e>
    676e:	600b      	str	r3, [r1, #0]
    6770:	50cd      	str	r5, [r1, r3]
    6772:	18cc      	adds	r4, r1, r3
    6774:	4630      	mov	r0, r6
    6776:	f000 f9b6 	bl	6ae6 <__malloc_unlock>
    677a:	f104 000b 	add.w	r0, r4, #11
    677e:	1d23      	adds	r3, r4, #4
    6780:	f020 0007 	bic.w	r0, r0, #7
    6784:	1ac3      	subs	r3, r0, r3
    6786:	d01b      	beq.n	67c0 <_malloc_r+0xb0>
    6788:	425a      	negs	r2, r3
    678a:	50e2      	str	r2, [r4, r3]
    678c:	bd70      	pop	{r4, r5, r6, pc}
    678e:	428c      	cmp	r4, r1
    6790:	bf0d      	iteet	eq
    6792:	6863      	ldreq	r3, [r4, #4]
    6794:	684b      	ldrne	r3, [r1, #4]
    6796:	6063      	strne	r3, [r4, #4]
    6798:	6013      	streq	r3, [r2, #0]
    679a:	bf18      	it	ne
    679c:	460c      	movne	r4, r1
    679e:	e7e9      	b.n	6774 <_malloc_r+0x64>
    67a0:	460c      	mov	r4, r1
    67a2:	6849      	ldr	r1, [r1, #4]
    67a4:	e7ca      	b.n	673c <_malloc_r+0x2c>
    67a6:	1cc4      	adds	r4, r0, #3
    67a8:	f024 0403 	bic.w	r4, r4, #3
    67ac:	42a0      	cmp	r0, r4
    67ae:	d005      	beq.n	67bc <_malloc_r+0xac>
    67b0:	1a21      	subs	r1, r4, r0
    67b2:	4630      	mov	r0, r6
    67b4:	f000 f95a 	bl	6a6c <_sbrk_r>
    67b8:	3001      	adds	r0, #1
    67ba:	d0cd      	beq.n	6758 <_malloc_r+0x48>
    67bc:	6025      	str	r5, [r4, #0]
    67be:	e7d9      	b.n	6774 <_malloc_r+0x64>
    67c0:	bd70      	pop	{r4, r5, r6, pc}
    67c2:	bf00      	nop
    67c4:	2000046c 	.word	0x2000046c
    67c8:	20000470 	.word	0x20000470

000067cc <__ssputs_r>:
    67cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67d0:	688e      	ldr	r6, [r1, #8]
    67d2:	429e      	cmp	r6, r3
    67d4:	4682      	mov	sl, r0
    67d6:	460c      	mov	r4, r1
    67d8:	4691      	mov	r9, r2
    67da:	4698      	mov	r8, r3
    67dc:	d835      	bhi.n	684a <__ssputs_r+0x7e>
    67de:	898a      	ldrh	r2, [r1, #12]
    67e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
    67e4:	d031      	beq.n	684a <__ssputs_r+0x7e>
    67e6:	6825      	ldr	r5, [r4, #0]
    67e8:	6909      	ldr	r1, [r1, #16]
    67ea:	1a6f      	subs	r7, r5, r1
    67ec:	6965      	ldr	r5, [r4, #20]
    67ee:	2302      	movs	r3, #2
    67f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    67f4:	fb95 f5f3 	sdiv	r5, r5, r3
    67f8:	f108 0301 	add.w	r3, r8, #1
    67fc:	443b      	add	r3, r7
    67fe:	429d      	cmp	r5, r3
    6800:	bf38      	it	cc
    6802:	461d      	movcc	r5, r3
    6804:	0553      	lsls	r3, r2, #21
    6806:	d531      	bpl.n	686c <__ssputs_r+0xa0>
    6808:	4629      	mov	r1, r5
    680a:	f7ff ff81 	bl	6710 <_malloc_r>
    680e:	4606      	mov	r6, r0
    6810:	b950      	cbnz	r0, 6828 <__ssputs_r+0x5c>
    6812:	230c      	movs	r3, #12
    6814:	f8ca 3000 	str.w	r3, [sl]
    6818:	89a3      	ldrh	r3, [r4, #12]
    681a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    681e:	81a3      	strh	r3, [r4, #12]
    6820:	f04f 30ff 	mov.w	r0, #4294967295
    6824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6828:	463a      	mov	r2, r7
    682a:	6921      	ldr	r1, [r4, #16]
    682c:	f7ff fc38 	bl	60a0 <memcpy>
    6830:	89a3      	ldrh	r3, [r4, #12]
    6832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    6836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    683a:	81a3      	strh	r3, [r4, #12]
    683c:	6126      	str	r6, [r4, #16]
    683e:	6165      	str	r5, [r4, #20]
    6840:	443e      	add	r6, r7
    6842:	1bed      	subs	r5, r5, r7
    6844:	6026      	str	r6, [r4, #0]
    6846:	60a5      	str	r5, [r4, #8]
    6848:	4646      	mov	r6, r8
    684a:	4546      	cmp	r6, r8
    684c:	bf28      	it	cs
    684e:	4646      	movcs	r6, r8
    6850:	4632      	mov	r2, r6
    6852:	4649      	mov	r1, r9
    6854:	6820      	ldr	r0, [r4, #0]
    6856:	f000 f92b 	bl	6ab0 <memmove>
    685a:	68a3      	ldr	r3, [r4, #8]
    685c:	1b9b      	subs	r3, r3, r6
    685e:	60a3      	str	r3, [r4, #8]
    6860:	6823      	ldr	r3, [r4, #0]
    6862:	441e      	add	r6, r3
    6864:	6026      	str	r6, [r4, #0]
    6866:	2000      	movs	r0, #0
    6868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    686c:	462a      	mov	r2, r5
    686e:	f000 f93b 	bl	6ae8 <_realloc_r>
    6872:	4606      	mov	r6, r0
    6874:	2800      	cmp	r0, #0
    6876:	d1e1      	bne.n	683c <__ssputs_r+0x70>
    6878:	6921      	ldr	r1, [r4, #16]
    687a:	4650      	mov	r0, sl
    687c:	f7ff fefa 	bl	6674 <_free_r>
    6880:	e7c7      	b.n	6812 <__ssputs_r+0x46>
	...

00006884 <_svfiprintf_r>:
    6884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6888:	b09d      	sub	sp, #116	; 0x74
    688a:	4680      	mov	r8, r0
    688c:	9303      	str	r3, [sp, #12]
    688e:	898b      	ldrh	r3, [r1, #12]
    6890:	061c      	lsls	r4, r3, #24
    6892:	460d      	mov	r5, r1
    6894:	4616      	mov	r6, r2
    6896:	d50f      	bpl.n	68b8 <_svfiprintf_r+0x34>
    6898:	690b      	ldr	r3, [r1, #16]
    689a:	b96b      	cbnz	r3, 68b8 <_svfiprintf_r+0x34>
    689c:	2140      	movs	r1, #64	; 0x40
    689e:	f7ff ff37 	bl	6710 <_malloc_r>
    68a2:	6028      	str	r0, [r5, #0]
    68a4:	6128      	str	r0, [r5, #16]
    68a6:	b928      	cbnz	r0, 68b4 <_svfiprintf_r+0x30>
    68a8:	230c      	movs	r3, #12
    68aa:	f8c8 3000 	str.w	r3, [r8]
    68ae:	f04f 30ff 	mov.w	r0, #4294967295
    68b2:	e0c5      	b.n	6a40 <_svfiprintf_r+0x1bc>
    68b4:	2340      	movs	r3, #64	; 0x40
    68b6:	616b      	str	r3, [r5, #20]
    68b8:	2300      	movs	r3, #0
    68ba:	9309      	str	r3, [sp, #36]	; 0x24
    68bc:	2320      	movs	r3, #32
    68be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    68c2:	2330      	movs	r3, #48	; 0x30
    68c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    68c8:	f04f 0b01 	mov.w	fp, #1
    68cc:	4637      	mov	r7, r6
    68ce:	463c      	mov	r4, r7
    68d0:	f814 3b01 	ldrb.w	r3, [r4], #1
    68d4:	2b00      	cmp	r3, #0
    68d6:	d13c      	bne.n	6952 <_svfiprintf_r+0xce>
    68d8:	ebb7 0a06 	subs.w	sl, r7, r6
    68dc:	d00b      	beq.n	68f6 <_svfiprintf_r+0x72>
    68de:	4653      	mov	r3, sl
    68e0:	4632      	mov	r2, r6
    68e2:	4629      	mov	r1, r5
    68e4:	4640      	mov	r0, r8
    68e6:	f7ff ff71 	bl	67cc <__ssputs_r>
    68ea:	3001      	adds	r0, #1
    68ec:	f000 80a3 	beq.w	6a36 <_svfiprintf_r+0x1b2>
    68f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    68f2:	4453      	add	r3, sl
    68f4:	9309      	str	r3, [sp, #36]	; 0x24
    68f6:	783b      	ldrb	r3, [r7, #0]
    68f8:	2b00      	cmp	r3, #0
    68fa:	f000 809c 	beq.w	6a36 <_svfiprintf_r+0x1b2>
    68fe:	2300      	movs	r3, #0
    6900:	f04f 32ff 	mov.w	r2, #4294967295
    6904:	9304      	str	r3, [sp, #16]
    6906:	9307      	str	r3, [sp, #28]
    6908:	9205      	str	r2, [sp, #20]
    690a:	9306      	str	r3, [sp, #24]
    690c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    6910:	931a      	str	r3, [sp, #104]	; 0x68
    6912:	2205      	movs	r2, #5
    6914:	7821      	ldrb	r1, [r4, #0]
    6916:	4850      	ldr	r0, [pc, #320]	; (6a58 <_svfiprintf_r+0x1d4>)
    6918:	f7ff fb72 	bl	6000 <memchr>
    691c:	1c67      	adds	r7, r4, #1
    691e:	9b04      	ldr	r3, [sp, #16]
    6920:	b9d8      	cbnz	r0, 695a <_svfiprintf_r+0xd6>
    6922:	06d9      	lsls	r1, r3, #27
    6924:	bf44      	itt	mi
    6926:	2220      	movmi	r2, #32
    6928:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    692c:	071a      	lsls	r2, r3, #28
    692e:	bf44      	itt	mi
    6930:	222b      	movmi	r2, #43	; 0x2b
    6932:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6936:	7822      	ldrb	r2, [r4, #0]
    6938:	2a2a      	cmp	r2, #42	; 0x2a
    693a:	d016      	beq.n	696a <_svfiprintf_r+0xe6>
    693c:	9a07      	ldr	r2, [sp, #28]
    693e:	2100      	movs	r1, #0
    6940:	200a      	movs	r0, #10
    6942:	4627      	mov	r7, r4
    6944:	3401      	adds	r4, #1
    6946:	783b      	ldrb	r3, [r7, #0]
    6948:	3b30      	subs	r3, #48	; 0x30
    694a:	2b09      	cmp	r3, #9
    694c:	d951      	bls.n	69f2 <_svfiprintf_r+0x16e>
    694e:	b1c9      	cbz	r1, 6984 <_svfiprintf_r+0x100>
    6950:	e011      	b.n	6976 <_svfiprintf_r+0xf2>
    6952:	2b25      	cmp	r3, #37	; 0x25
    6954:	d0c0      	beq.n	68d8 <_svfiprintf_r+0x54>
    6956:	4627      	mov	r7, r4
    6958:	e7b9      	b.n	68ce <_svfiprintf_r+0x4a>
    695a:	4a3f      	ldr	r2, [pc, #252]	; (6a58 <_svfiprintf_r+0x1d4>)
    695c:	1a80      	subs	r0, r0, r2
    695e:	fa0b f000 	lsl.w	r0, fp, r0
    6962:	4318      	orrs	r0, r3
    6964:	9004      	str	r0, [sp, #16]
    6966:	463c      	mov	r4, r7
    6968:	e7d3      	b.n	6912 <_svfiprintf_r+0x8e>
    696a:	9a03      	ldr	r2, [sp, #12]
    696c:	1d11      	adds	r1, r2, #4
    696e:	6812      	ldr	r2, [r2, #0]
    6970:	9103      	str	r1, [sp, #12]
    6972:	2a00      	cmp	r2, #0
    6974:	db01      	blt.n	697a <_svfiprintf_r+0xf6>
    6976:	9207      	str	r2, [sp, #28]
    6978:	e004      	b.n	6984 <_svfiprintf_r+0x100>
    697a:	4252      	negs	r2, r2
    697c:	f043 0302 	orr.w	r3, r3, #2
    6980:	9207      	str	r2, [sp, #28]
    6982:	9304      	str	r3, [sp, #16]
    6984:	783b      	ldrb	r3, [r7, #0]
    6986:	2b2e      	cmp	r3, #46	; 0x2e
    6988:	d10e      	bne.n	69a8 <_svfiprintf_r+0x124>
    698a:	787b      	ldrb	r3, [r7, #1]
    698c:	2b2a      	cmp	r3, #42	; 0x2a
    698e:	f107 0101 	add.w	r1, r7, #1
    6992:	d132      	bne.n	69fa <_svfiprintf_r+0x176>
    6994:	9b03      	ldr	r3, [sp, #12]
    6996:	1d1a      	adds	r2, r3, #4
    6998:	681b      	ldr	r3, [r3, #0]
    699a:	9203      	str	r2, [sp, #12]
    699c:	2b00      	cmp	r3, #0
    699e:	bfb8      	it	lt
    69a0:	f04f 33ff 	movlt.w	r3, #4294967295
    69a4:	3702      	adds	r7, #2
    69a6:	9305      	str	r3, [sp, #20]
    69a8:	4c2c      	ldr	r4, [pc, #176]	; (6a5c <_svfiprintf_r+0x1d8>)
    69aa:	7839      	ldrb	r1, [r7, #0]
    69ac:	2203      	movs	r2, #3
    69ae:	4620      	mov	r0, r4
    69b0:	f7ff fb26 	bl	6000 <memchr>
    69b4:	b138      	cbz	r0, 69c6 <_svfiprintf_r+0x142>
    69b6:	2340      	movs	r3, #64	; 0x40
    69b8:	1b00      	subs	r0, r0, r4
    69ba:	fa03 f000 	lsl.w	r0, r3, r0
    69be:	9b04      	ldr	r3, [sp, #16]
    69c0:	4303      	orrs	r3, r0
    69c2:	9304      	str	r3, [sp, #16]
    69c4:	3701      	adds	r7, #1
    69c6:	7839      	ldrb	r1, [r7, #0]
    69c8:	4825      	ldr	r0, [pc, #148]	; (6a60 <_svfiprintf_r+0x1dc>)
    69ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    69ce:	2206      	movs	r2, #6
    69d0:	1c7e      	adds	r6, r7, #1
    69d2:	f7ff fb15 	bl	6000 <memchr>
    69d6:	2800      	cmp	r0, #0
    69d8:	d035      	beq.n	6a46 <_svfiprintf_r+0x1c2>
    69da:	4b22      	ldr	r3, [pc, #136]	; (6a64 <_svfiprintf_r+0x1e0>)
    69dc:	b9fb      	cbnz	r3, 6a1e <_svfiprintf_r+0x19a>
    69de:	9b03      	ldr	r3, [sp, #12]
    69e0:	3307      	adds	r3, #7
    69e2:	f023 0307 	bic.w	r3, r3, #7
    69e6:	3308      	adds	r3, #8
    69e8:	9303      	str	r3, [sp, #12]
    69ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    69ec:	444b      	add	r3, r9
    69ee:	9309      	str	r3, [sp, #36]	; 0x24
    69f0:	e76c      	b.n	68cc <_svfiprintf_r+0x48>
    69f2:	fb00 3202 	mla	r2, r0, r2, r3
    69f6:	2101      	movs	r1, #1
    69f8:	e7a3      	b.n	6942 <_svfiprintf_r+0xbe>
    69fa:	2300      	movs	r3, #0
    69fc:	9305      	str	r3, [sp, #20]
    69fe:	4618      	mov	r0, r3
    6a00:	240a      	movs	r4, #10
    6a02:	460f      	mov	r7, r1
    6a04:	3101      	adds	r1, #1
    6a06:	783a      	ldrb	r2, [r7, #0]
    6a08:	3a30      	subs	r2, #48	; 0x30
    6a0a:	2a09      	cmp	r2, #9
    6a0c:	d903      	bls.n	6a16 <_svfiprintf_r+0x192>
    6a0e:	2b00      	cmp	r3, #0
    6a10:	d0ca      	beq.n	69a8 <_svfiprintf_r+0x124>
    6a12:	9005      	str	r0, [sp, #20]
    6a14:	e7c8      	b.n	69a8 <_svfiprintf_r+0x124>
    6a16:	fb04 2000 	mla	r0, r4, r0, r2
    6a1a:	2301      	movs	r3, #1
    6a1c:	e7f1      	b.n	6a02 <_svfiprintf_r+0x17e>
    6a1e:	ab03      	add	r3, sp, #12
    6a20:	9300      	str	r3, [sp, #0]
    6a22:	462a      	mov	r2, r5
    6a24:	4b10      	ldr	r3, [pc, #64]	; (6a68 <_svfiprintf_r+0x1e4>)
    6a26:	a904      	add	r1, sp, #16
    6a28:	4640      	mov	r0, r8
    6a2a:	f7fe f875 	bl	4b18 <_printf_float>
    6a2e:	f1b0 3fff 	cmp.w	r0, #4294967295
    6a32:	4681      	mov	r9, r0
    6a34:	d1d9      	bne.n	69ea <_svfiprintf_r+0x166>
    6a36:	89ab      	ldrh	r3, [r5, #12]
    6a38:	065b      	lsls	r3, r3, #25
    6a3a:	f53f af38 	bmi.w	68ae <_svfiprintf_r+0x2a>
    6a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    6a40:	b01d      	add	sp, #116	; 0x74
    6a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a46:	ab03      	add	r3, sp, #12
    6a48:	9300      	str	r3, [sp, #0]
    6a4a:	462a      	mov	r2, r5
    6a4c:	4b06      	ldr	r3, [pc, #24]	; (6a68 <_svfiprintf_r+0x1e4>)
    6a4e:	a904      	add	r1, sp, #16
    6a50:	4640      	mov	r0, r8
    6a52:	f7fe fb0f 	bl	5074 <_printf_i>
    6a56:	e7ea      	b.n	6a2e <_svfiprintf_r+0x1aa>
    6a58:	0000793c 	.word	0x0000793c
    6a5c:	00007942 	.word	0x00007942
    6a60:	00007946 	.word	0x00007946
    6a64:	00004b19 	.word	0x00004b19
    6a68:	000067cd 	.word	0x000067cd

00006a6c <_sbrk_r>:
    6a6c:	b538      	push	{r3, r4, r5, lr}
    6a6e:	4c06      	ldr	r4, [pc, #24]	; (6a88 <_sbrk_r+0x1c>)
    6a70:	2300      	movs	r3, #0
    6a72:	4605      	mov	r5, r0
    6a74:	4608      	mov	r0, r1
    6a76:	6023      	str	r3, [r4, #0]
    6a78:	f7fd f848 	bl	3b0c <_sbrk>
    6a7c:	1c43      	adds	r3, r0, #1
    6a7e:	d102      	bne.n	6a86 <_sbrk_r+0x1a>
    6a80:	6823      	ldr	r3, [r4, #0]
    6a82:	b103      	cbz	r3, 6a86 <_sbrk_r+0x1a>
    6a84:	602b      	str	r3, [r5, #0]
    6a86:	bd38      	pop	{r3, r4, r5, pc}
    6a88:	200004e4 	.word	0x200004e4

00006a8c <__ascii_mbtowc>:
    6a8c:	b082      	sub	sp, #8
    6a8e:	b901      	cbnz	r1, 6a92 <__ascii_mbtowc+0x6>
    6a90:	a901      	add	r1, sp, #4
    6a92:	b142      	cbz	r2, 6aa6 <__ascii_mbtowc+0x1a>
    6a94:	b14b      	cbz	r3, 6aaa <__ascii_mbtowc+0x1e>
    6a96:	7813      	ldrb	r3, [r2, #0]
    6a98:	600b      	str	r3, [r1, #0]
    6a9a:	7812      	ldrb	r2, [r2, #0]
    6a9c:	1c10      	adds	r0, r2, #0
    6a9e:	bf18      	it	ne
    6aa0:	2001      	movne	r0, #1
    6aa2:	b002      	add	sp, #8
    6aa4:	4770      	bx	lr
    6aa6:	4610      	mov	r0, r2
    6aa8:	e7fb      	b.n	6aa2 <__ascii_mbtowc+0x16>
    6aaa:	f06f 0001 	mvn.w	r0, #1
    6aae:	e7f8      	b.n	6aa2 <__ascii_mbtowc+0x16>

00006ab0 <memmove>:
    6ab0:	4288      	cmp	r0, r1
    6ab2:	b510      	push	{r4, lr}
    6ab4:	eb01 0302 	add.w	r3, r1, r2
    6ab8:	d803      	bhi.n	6ac2 <memmove+0x12>
    6aba:	1e42      	subs	r2, r0, #1
    6abc:	4299      	cmp	r1, r3
    6abe:	d10c      	bne.n	6ada <memmove+0x2a>
    6ac0:	bd10      	pop	{r4, pc}
    6ac2:	4298      	cmp	r0, r3
    6ac4:	d2f9      	bcs.n	6aba <memmove+0xa>
    6ac6:	1881      	adds	r1, r0, r2
    6ac8:	1ad2      	subs	r2, r2, r3
    6aca:	42d3      	cmn	r3, r2
    6acc:	d100      	bne.n	6ad0 <memmove+0x20>
    6ace:	bd10      	pop	{r4, pc}
    6ad0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    6ad4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    6ad8:	e7f7      	b.n	6aca <memmove+0x1a>
    6ada:	f811 4b01 	ldrb.w	r4, [r1], #1
    6ade:	f802 4f01 	strb.w	r4, [r2, #1]!
    6ae2:	e7eb      	b.n	6abc <memmove+0xc>

00006ae4 <__malloc_lock>:
    6ae4:	4770      	bx	lr

00006ae6 <__malloc_unlock>:
    6ae6:	4770      	bx	lr

00006ae8 <_realloc_r>:
    6ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6aea:	4607      	mov	r7, r0
    6aec:	4614      	mov	r4, r2
    6aee:	460e      	mov	r6, r1
    6af0:	b921      	cbnz	r1, 6afc <_realloc_r+0x14>
    6af2:	4611      	mov	r1, r2
    6af4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6af8:	f7ff be0a 	b.w	6710 <_malloc_r>
    6afc:	b922      	cbnz	r2, 6b08 <_realloc_r+0x20>
    6afe:	f7ff fdb9 	bl	6674 <_free_r>
    6b02:	4625      	mov	r5, r4
    6b04:	4628      	mov	r0, r5
    6b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b08:	f000 f821 	bl	6b4e <_malloc_usable_size_r>
    6b0c:	4284      	cmp	r4, r0
    6b0e:	d90f      	bls.n	6b30 <_realloc_r+0x48>
    6b10:	4621      	mov	r1, r4
    6b12:	4638      	mov	r0, r7
    6b14:	f7ff fdfc 	bl	6710 <_malloc_r>
    6b18:	4605      	mov	r5, r0
    6b1a:	2800      	cmp	r0, #0
    6b1c:	d0f2      	beq.n	6b04 <_realloc_r+0x1c>
    6b1e:	4631      	mov	r1, r6
    6b20:	4622      	mov	r2, r4
    6b22:	f7ff fabd 	bl	60a0 <memcpy>
    6b26:	4631      	mov	r1, r6
    6b28:	4638      	mov	r0, r7
    6b2a:	f7ff fda3 	bl	6674 <_free_r>
    6b2e:	e7e9      	b.n	6b04 <_realloc_r+0x1c>
    6b30:	4635      	mov	r5, r6
    6b32:	e7e7      	b.n	6b04 <_realloc_r+0x1c>

00006b34 <__ascii_wctomb>:
    6b34:	b149      	cbz	r1, 6b4a <__ascii_wctomb+0x16>
    6b36:	2aff      	cmp	r2, #255	; 0xff
    6b38:	bf85      	ittet	hi
    6b3a:	238a      	movhi	r3, #138	; 0x8a
    6b3c:	6003      	strhi	r3, [r0, #0]
    6b3e:	700a      	strbls	r2, [r1, #0]
    6b40:	f04f 30ff 	movhi.w	r0, #4294967295
    6b44:	bf98      	it	ls
    6b46:	2001      	movls	r0, #1
    6b48:	4770      	bx	lr
    6b4a:	4608      	mov	r0, r1
    6b4c:	4770      	bx	lr

00006b4e <_malloc_usable_size_r>:
    6b4e:	f851 0c04 	ldr.w	r0, [r1, #-4]
    6b52:	2800      	cmp	r0, #0
    6b54:	f1a0 0004 	sub.w	r0, r0, #4
    6b58:	bfbc      	itt	lt
    6b5a:	580b      	ldrlt	r3, [r1, r0]
    6b5c:	18c0      	addlt	r0, r0, r3
    6b5e:	4770      	bx	lr

00006b60 <__aeabi_drsub>:
    6b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    6b64:	e002      	b.n	6b6c <__adddf3>
    6b66:	bf00      	nop

00006b68 <__aeabi_dsub>:
    6b68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00006b6c <__adddf3>:
    6b6c:	b530      	push	{r4, r5, lr}
    6b6e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    6b72:	ea4f 0543 	mov.w	r5, r3, lsl #1
    6b76:	ea94 0f05 	teq	r4, r5
    6b7a:	bf08      	it	eq
    6b7c:	ea90 0f02 	teqeq	r0, r2
    6b80:	bf1f      	itttt	ne
    6b82:	ea54 0c00 	orrsne.w	ip, r4, r0
    6b86:	ea55 0c02 	orrsne.w	ip, r5, r2
    6b8a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    6b8e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    6b92:	f000 80e2 	beq.w	6d5a <__adddf3+0x1ee>
    6b96:	ea4f 5454 	mov.w	r4, r4, lsr #21
    6b9a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    6b9e:	bfb8      	it	lt
    6ba0:	426d      	neglt	r5, r5
    6ba2:	dd0c      	ble.n	6bbe <__adddf3+0x52>
    6ba4:	442c      	add	r4, r5
    6ba6:	ea80 0202 	eor.w	r2, r0, r2
    6baa:	ea81 0303 	eor.w	r3, r1, r3
    6bae:	ea82 0000 	eor.w	r0, r2, r0
    6bb2:	ea83 0101 	eor.w	r1, r3, r1
    6bb6:	ea80 0202 	eor.w	r2, r0, r2
    6bba:	ea81 0303 	eor.w	r3, r1, r3
    6bbe:	2d36      	cmp	r5, #54	; 0x36
    6bc0:	bf88      	it	hi
    6bc2:	bd30      	pophi	{r4, r5, pc}
    6bc4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6bc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    6bcc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    6bd0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    6bd4:	d002      	beq.n	6bdc <__adddf3+0x70>
    6bd6:	4240      	negs	r0, r0
    6bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6bdc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    6be0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6be4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    6be8:	d002      	beq.n	6bf0 <__adddf3+0x84>
    6bea:	4252      	negs	r2, r2
    6bec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6bf0:	ea94 0f05 	teq	r4, r5
    6bf4:	f000 80a7 	beq.w	6d46 <__adddf3+0x1da>
    6bf8:	f1a4 0401 	sub.w	r4, r4, #1
    6bfc:	f1d5 0e20 	rsbs	lr, r5, #32
    6c00:	db0d      	blt.n	6c1e <__adddf3+0xb2>
    6c02:	fa02 fc0e 	lsl.w	ip, r2, lr
    6c06:	fa22 f205 	lsr.w	r2, r2, r5
    6c0a:	1880      	adds	r0, r0, r2
    6c0c:	f141 0100 	adc.w	r1, r1, #0
    6c10:	fa03 f20e 	lsl.w	r2, r3, lr
    6c14:	1880      	adds	r0, r0, r2
    6c16:	fa43 f305 	asr.w	r3, r3, r5
    6c1a:	4159      	adcs	r1, r3
    6c1c:	e00e      	b.n	6c3c <__adddf3+0xd0>
    6c1e:	f1a5 0520 	sub.w	r5, r5, #32
    6c22:	f10e 0e20 	add.w	lr, lr, #32
    6c26:	2a01      	cmp	r2, #1
    6c28:	fa03 fc0e 	lsl.w	ip, r3, lr
    6c2c:	bf28      	it	cs
    6c2e:	f04c 0c02 	orrcs.w	ip, ip, #2
    6c32:	fa43 f305 	asr.w	r3, r3, r5
    6c36:	18c0      	adds	r0, r0, r3
    6c38:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    6c3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6c40:	d507      	bpl.n	6c52 <__adddf3+0xe6>
    6c42:	f04f 0e00 	mov.w	lr, #0
    6c46:	f1dc 0c00 	rsbs	ip, ip, #0
    6c4a:	eb7e 0000 	sbcs.w	r0, lr, r0
    6c4e:	eb6e 0101 	sbc.w	r1, lr, r1
    6c52:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    6c56:	d31b      	bcc.n	6c90 <__adddf3+0x124>
    6c58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    6c5c:	d30c      	bcc.n	6c78 <__adddf3+0x10c>
    6c5e:	0849      	lsrs	r1, r1, #1
    6c60:	ea5f 0030 	movs.w	r0, r0, rrx
    6c64:	ea4f 0c3c 	mov.w	ip, ip, rrx
    6c68:	f104 0401 	add.w	r4, r4, #1
    6c6c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    6c70:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    6c74:	f080 809a 	bcs.w	6dac <__adddf3+0x240>
    6c78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6c7c:	bf08      	it	eq
    6c7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    6c82:	f150 0000 	adcs.w	r0, r0, #0
    6c86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6c8a:	ea41 0105 	orr.w	r1, r1, r5
    6c8e:	bd30      	pop	{r4, r5, pc}
    6c90:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    6c94:	4140      	adcs	r0, r0
    6c96:	eb41 0101 	adc.w	r1, r1, r1
    6c9a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6c9e:	f1a4 0401 	sub.w	r4, r4, #1
    6ca2:	d1e9      	bne.n	6c78 <__adddf3+0x10c>
    6ca4:	f091 0f00 	teq	r1, #0
    6ca8:	bf04      	itt	eq
    6caa:	4601      	moveq	r1, r0
    6cac:	2000      	moveq	r0, #0
    6cae:	fab1 f381 	clz	r3, r1
    6cb2:	bf08      	it	eq
    6cb4:	3320      	addeq	r3, #32
    6cb6:	f1a3 030b 	sub.w	r3, r3, #11
    6cba:	f1b3 0220 	subs.w	r2, r3, #32
    6cbe:	da0c      	bge.n	6cda <__adddf3+0x16e>
    6cc0:	320c      	adds	r2, #12
    6cc2:	dd08      	ble.n	6cd6 <__adddf3+0x16a>
    6cc4:	f102 0c14 	add.w	ip, r2, #20
    6cc8:	f1c2 020c 	rsb	r2, r2, #12
    6ccc:	fa01 f00c 	lsl.w	r0, r1, ip
    6cd0:	fa21 f102 	lsr.w	r1, r1, r2
    6cd4:	e00c      	b.n	6cf0 <__adddf3+0x184>
    6cd6:	f102 0214 	add.w	r2, r2, #20
    6cda:	bfd8      	it	le
    6cdc:	f1c2 0c20 	rsble	ip, r2, #32
    6ce0:	fa01 f102 	lsl.w	r1, r1, r2
    6ce4:	fa20 fc0c 	lsr.w	ip, r0, ip
    6ce8:	bfdc      	itt	le
    6cea:	ea41 010c 	orrle.w	r1, r1, ip
    6cee:	4090      	lslle	r0, r2
    6cf0:	1ae4      	subs	r4, r4, r3
    6cf2:	bfa2      	ittt	ge
    6cf4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    6cf8:	4329      	orrge	r1, r5
    6cfa:	bd30      	popge	{r4, r5, pc}
    6cfc:	ea6f 0404 	mvn.w	r4, r4
    6d00:	3c1f      	subs	r4, #31
    6d02:	da1c      	bge.n	6d3e <__adddf3+0x1d2>
    6d04:	340c      	adds	r4, #12
    6d06:	dc0e      	bgt.n	6d26 <__adddf3+0x1ba>
    6d08:	f104 0414 	add.w	r4, r4, #20
    6d0c:	f1c4 0220 	rsb	r2, r4, #32
    6d10:	fa20 f004 	lsr.w	r0, r0, r4
    6d14:	fa01 f302 	lsl.w	r3, r1, r2
    6d18:	ea40 0003 	orr.w	r0, r0, r3
    6d1c:	fa21 f304 	lsr.w	r3, r1, r4
    6d20:	ea45 0103 	orr.w	r1, r5, r3
    6d24:	bd30      	pop	{r4, r5, pc}
    6d26:	f1c4 040c 	rsb	r4, r4, #12
    6d2a:	f1c4 0220 	rsb	r2, r4, #32
    6d2e:	fa20 f002 	lsr.w	r0, r0, r2
    6d32:	fa01 f304 	lsl.w	r3, r1, r4
    6d36:	ea40 0003 	orr.w	r0, r0, r3
    6d3a:	4629      	mov	r1, r5
    6d3c:	bd30      	pop	{r4, r5, pc}
    6d3e:	fa21 f004 	lsr.w	r0, r1, r4
    6d42:	4629      	mov	r1, r5
    6d44:	bd30      	pop	{r4, r5, pc}
    6d46:	f094 0f00 	teq	r4, #0
    6d4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    6d4e:	bf06      	itte	eq
    6d50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    6d54:	3401      	addeq	r4, #1
    6d56:	3d01      	subne	r5, #1
    6d58:	e74e      	b.n	6bf8 <__adddf3+0x8c>
    6d5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    6d5e:	bf18      	it	ne
    6d60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    6d64:	d029      	beq.n	6dba <__adddf3+0x24e>
    6d66:	ea94 0f05 	teq	r4, r5
    6d6a:	bf08      	it	eq
    6d6c:	ea90 0f02 	teqeq	r0, r2
    6d70:	d005      	beq.n	6d7e <__adddf3+0x212>
    6d72:	ea54 0c00 	orrs.w	ip, r4, r0
    6d76:	bf04      	itt	eq
    6d78:	4619      	moveq	r1, r3
    6d7a:	4610      	moveq	r0, r2
    6d7c:	bd30      	pop	{r4, r5, pc}
    6d7e:	ea91 0f03 	teq	r1, r3
    6d82:	bf1e      	ittt	ne
    6d84:	2100      	movne	r1, #0
    6d86:	2000      	movne	r0, #0
    6d88:	bd30      	popne	{r4, r5, pc}
    6d8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    6d8e:	d105      	bne.n	6d9c <__adddf3+0x230>
    6d90:	0040      	lsls	r0, r0, #1
    6d92:	4149      	adcs	r1, r1
    6d94:	bf28      	it	cs
    6d96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    6d9a:	bd30      	pop	{r4, r5, pc}
    6d9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    6da0:	bf3c      	itt	cc
    6da2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    6da6:	bd30      	popcc	{r4, r5, pc}
    6da8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6dac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    6db0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6db4:	f04f 0000 	mov.w	r0, #0
    6db8:	bd30      	pop	{r4, r5, pc}
    6dba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    6dbe:	bf1a      	itte	ne
    6dc0:	4619      	movne	r1, r3
    6dc2:	4610      	movne	r0, r2
    6dc4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    6dc8:	bf1c      	itt	ne
    6dca:	460b      	movne	r3, r1
    6dcc:	4602      	movne	r2, r0
    6dce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6dd2:	bf06      	itte	eq
    6dd4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    6dd8:	ea91 0f03 	teqeq	r1, r3
    6ddc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    6de0:	bd30      	pop	{r4, r5, pc}
    6de2:	bf00      	nop

00006de4 <__aeabi_ui2d>:
    6de4:	f090 0f00 	teq	r0, #0
    6de8:	bf04      	itt	eq
    6dea:	2100      	moveq	r1, #0
    6dec:	4770      	bxeq	lr
    6dee:	b530      	push	{r4, r5, lr}
    6df0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6df4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6df8:	f04f 0500 	mov.w	r5, #0
    6dfc:	f04f 0100 	mov.w	r1, #0
    6e00:	e750      	b.n	6ca4 <__adddf3+0x138>
    6e02:	bf00      	nop

00006e04 <__aeabi_i2d>:
    6e04:	f090 0f00 	teq	r0, #0
    6e08:	bf04      	itt	eq
    6e0a:	2100      	moveq	r1, #0
    6e0c:	4770      	bxeq	lr
    6e0e:	b530      	push	{r4, r5, lr}
    6e10:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6e14:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6e18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    6e1c:	bf48      	it	mi
    6e1e:	4240      	negmi	r0, r0
    6e20:	f04f 0100 	mov.w	r1, #0
    6e24:	e73e      	b.n	6ca4 <__adddf3+0x138>
    6e26:	bf00      	nop

00006e28 <__aeabi_f2d>:
    6e28:	0042      	lsls	r2, r0, #1
    6e2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    6e2e:	ea4f 0131 	mov.w	r1, r1, rrx
    6e32:	ea4f 7002 	mov.w	r0, r2, lsl #28
    6e36:	bf1f      	itttt	ne
    6e38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    6e3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6e40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    6e44:	4770      	bxne	lr
    6e46:	f092 0f00 	teq	r2, #0
    6e4a:	bf14      	ite	ne
    6e4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6e50:	4770      	bxeq	lr
    6e52:	b530      	push	{r4, r5, lr}
    6e54:	f44f 7460 	mov.w	r4, #896	; 0x380
    6e58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6e5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6e60:	e720      	b.n	6ca4 <__adddf3+0x138>
    6e62:	bf00      	nop

00006e64 <__aeabi_ul2d>:
    6e64:	ea50 0201 	orrs.w	r2, r0, r1
    6e68:	bf08      	it	eq
    6e6a:	4770      	bxeq	lr
    6e6c:	b530      	push	{r4, r5, lr}
    6e6e:	f04f 0500 	mov.w	r5, #0
    6e72:	e00a      	b.n	6e8a <__aeabi_l2d+0x16>

00006e74 <__aeabi_l2d>:
    6e74:	ea50 0201 	orrs.w	r2, r0, r1
    6e78:	bf08      	it	eq
    6e7a:	4770      	bxeq	lr
    6e7c:	b530      	push	{r4, r5, lr}
    6e7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    6e82:	d502      	bpl.n	6e8a <__aeabi_l2d+0x16>
    6e84:	4240      	negs	r0, r0
    6e86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6e8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6e8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6e92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    6e96:	f43f aedc 	beq.w	6c52 <__adddf3+0xe6>
    6e9a:	f04f 0203 	mov.w	r2, #3
    6e9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    6ea2:	bf18      	it	ne
    6ea4:	3203      	addne	r2, #3
    6ea6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    6eaa:	bf18      	it	ne
    6eac:	3203      	addne	r2, #3
    6eae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    6eb2:	f1c2 0320 	rsb	r3, r2, #32
    6eb6:	fa00 fc03 	lsl.w	ip, r0, r3
    6eba:	fa20 f002 	lsr.w	r0, r0, r2
    6ebe:	fa01 fe03 	lsl.w	lr, r1, r3
    6ec2:	ea40 000e 	orr.w	r0, r0, lr
    6ec6:	fa21 f102 	lsr.w	r1, r1, r2
    6eca:	4414      	add	r4, r2
    6ecc:	e6c1      	b.n	6c52 <__adddf3+0xe6>
    6ece:	bf00      	nop

00006ed0 <__aeabi_dmul>:
    6ed0:	b570      	push	{r4, r5, r6, lr}
    6ed2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6ed6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    6eda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    6ede:	bf1d      	ittte	ne
    6ee0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    6ee4:	ea94 0f0c 	teqne	r4, ip
    6ee8:	ea95 0f0c 	teqne	r5, ip
    6eec:	f000 f8de 	bleq	70ac <__aeabi_dmul+0x1dc>
    6ef0:	442c      	add	r4, r5
    6ef2:	ea81 0603 	eor.w	r6, r1, r3
    6ef6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    6efa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    6efe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    6f02:	bf18      	it	ne
    6f04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    6f08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6f10:	d038      	beq.n	6f84 <__aeabi_dmul+0xb4>
    6f12:	fba0 ce02 	umull	ip, lr, r0, r2
    6f16:	f04f 0500 	mov.w	r5, #0
    6f1a:	fbe1 e502 	umlal	lr, r5, r1, r2
    6f1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    6f22:	fbe0 e503 	umlal	lr, r5, r0, r3
    6f26:	f04f 0600 	mov.w	r6, #0
    6f2a:	fbe1 5603 	umlal	r5, r6, r1, r3
    6f2e:	f09c 0f00 	teq	ip, #0
    6f32:	bf18      	it	ne
    6f34:	f04e 0e01 	orrne.w	lr, lr, #1
    6f38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    6f3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    6f40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    6f44:	d204      	bcs.n	6f50 <__aeabi_dmul+0x80>
    6f46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    6f4a:	416d      	adcs	r5, r5
    6f4c:	eb46 0606 	adc.w	r6, r6, r6
    6f50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    6f54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    6f58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    6f5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    6f60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    6f64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    6f68:	bf88      	it	hi
    6f6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    6f6e:	d81e      	bhi.n	6fae <__aeabi_dmul+0xde>
    6f70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    6f74:	bf08      	it	eq
    6f76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    6f7a:	f150 0000 	adcs.w	r0, r0, #0
    6f7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6f82:	bd70      	pop	{r4, r5, r6, pc}
    6f84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    6f88:	ea46 0101 	orr.w	r1, r6, r1
    6f8c:	ea40 0002 	orr.w	r0, r0, r2
    6f90:	ea81 0103 	eor.w	r1, r1, r3
    6f94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    6f98:	bfc2      	ittt	gt
    6f9a:	ebd4 050c 	rsbsgt	r5, r4, ip
    6f9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    6fa2:	bd70      	popgt	{r4, r5, r6, pc}
    6fa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6fa8:	f04f 0e00 	mov.w	lr, #0
    6fac:	3c01      	subs	r4, #1
    6fae:	f300 80ab 	bgt.w	7108 <__aeabi_dmul+0x238>
    6fb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    6fb6:	bfde      	ittt	le
    6fb8:	2000      	movle	r0, #0
    6fba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    6fbe:	bd70      	pople	{r4, r5, r6, pc}
    6fc0:	f1c4 0400 	rsb	r4, r4, #0
    6fc4:	3c20      	subs	r4, #32
    6fc6:	da35      	bge.n	7034 <__aeabi_dmul+0x164>
    6fc8:	340c      	adds	r4, #12
    6fca:	dc1b      	bgt.n	7004 <__aeabi_dmul+0x134>
    6fcc:	f104 0414 	add.w	r4, r4, #20
    6fd0:	f1c4 0520 	rsb	r5, r4, #32
    6fd4:	fa00 f305 	lsl.w	r3, r0, r5
    6fd8:	fa20 f004 	lsr.w	r0, r0, r4
    6fdc:	fa01 f205 	lsl.w	r2, r1, r5
    6fe0:	ea40 0002 	orr.w	r0, r0, r2
    6fe4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    6fe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6fec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    6ff0:	fa21 f604 	lsr.w	r6, r1, r4
    6ff4:	eb42 0106 	adc.w	r1, r2, r6
    6ff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    6ffc:	bf08      	it	eq
    6ffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    7002:	bd70      	pop	{r4, r5, r6, pc}
    7004:	f1c4 040c 	rsb	r4, r4, #12
    7008:	f1c4 0520 	rsb	r5, r4, #32
    700c:	fa00 f304 	lsl.w	r3, r0, r4
    7010:	fa20 f005 	lsr.w	r0, r0, r5
    7014:	fa01 f204 	lsl.w	r2, r1, r4
    7018:	ea40 0002 	orr.w	r0, r0, r2
    701c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    7020:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    7024:	f141 0100 	adc.w	r1, r1, #0
    7028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    702c:	bf08      	it	eq
    702e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    7032:	bd70      	pop	{r4, r5, r6, pc}
    7034:	f1c4 0520 	rsb	r5, r4, #32
    7038:	fa00 f205 	lsl.w	r2, r0, r5
    703c:	ea4e 0e02 	orr.w	lr, lr, r2
    7040:	fa20 f304 	lsr.w	r3, r0, r4
    7044:	fa01 f205 	lsl.w	r2, r1, r5
    7048:	ea43 0302 	orr.w	r3, r3, r2
    704c:	fa21 f004 	lsr.w	r0, r1, r4
    7050:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    7054:	fa21 f204 	lsr.w	r2, r1, r4
    7058:	ea20 0002 	bic.w	r0, r0, r2
    705c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    7060:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    7064:	bf08      	it	eq
    7066:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    706a:	bd70      	pop	{r4, r5, r6, pc}
    706c:	f094 0f00 	teq	r4, #0
    7070:	d10f      	bne.n	7092 <__aeabi_dmul+0x1c2>
    7072:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    7076:	0040      	lsls	r0, r0, #1
    7078:	eb41 0101 	adc.w	r1, r1, r1
    707c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    7080:	bf08      	it	eq
    7082:	3c01      	subeq	r4, #1
    7084:	d0f7      	beq.n	7076 <__aeabi_dmul+0x1a6>
    7086:	ea41 0106 	orr.w	r1, r1, r6
    708a:	f095 0f00 	teq	r5, #0
    708e:	bf18      	it	ne
    7090:	4770      	bxne	lr
    7092:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    7096:	0052      	lsls	r2, r2, #1
    7098:	eb43 0303 	adc.w	r3, r3, r3
    709c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    70a0:	bf08      	it	eq
    70a2:	3d01      	subeq	r5, #1
    70a4:	d0f7      	beq.n	7096 <__aeabi_dmul+0x1c6>
    70a6:	ea43 0306 	orr.w	r3, r3, r6
    70aa:	4770      	bx	lr
    70ac:	ea94 0f0c 	teq	r4, ip
    70b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    70b4:	bf18      	it	ne
    70b6:	ea95 0f0c 	teqne	r5, ip
    70ba:	d00c      	beq.n	70d6 <__aeabi_dmul+0x206>
    70bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    70c0:	bf18      	it	ne
    70c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    70c6:	d1d1      	bne.n	706c <__aeabi_dmul+0x19c>
    70c8:	ea81 0103 	eor.w	r1, r1, r3
    70cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    70d0:	f04f 0000 	mov.w	r0, #0
    70d4:	bd70      	pop	{r4, r5, r6, pc}
    70d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    70da:	bf06      	itte	eq
    70dc:	4610      	moveq	r0, r2
    70de:	4619      	moveq	r1, r3
    70e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    70e4:	d019      	beq.n	711a <__aeabi_dmul+0x24a>
    70e6:	ea94 0f0c 	teq	r4, ip
    70ea:	d102      	bne.n	70f2 <__aeabi_dmul+0x222>
    70ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    70f0:	d113      	bne.n	711a <__aeabi_dmul+0x24a>
    70f2:	ea95 0f0c 	teq	r5, ip
    70f6:	d105      	bne.n	7104 <__aeabi_dmul+0x234>
    70f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    70fc:	bf1c      	itt	ne
    70fe:	4610      	movne	r0, r2
    7100:	4619      	movne	r1, r3
    7102:	d10a      	bne.n	711a <__aeabi_dmul+0x24a>
    7104:	ea81 0103 	eor.w	r1, r1, r3
    7108:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    710c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    7110:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    7114:	f04f 0000 	mov.w	r0, #0
    7118:	bd70      	pop	{r4, r5, r6, pc}
    711a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    711e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    7122:	bd70      	pop	{r4, r5, r6, pc}

00007124 <__aeabi_ddiv>:
    7124:	b570      	push	{r4, r5, r6, lr}
    7126:	f04f 0cff 	mov.w	ip, #255	; 0xff
    712a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    712e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    7132:	bf1d      	ittte	ne
    7134:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    7138:	ea94 0f0c 	teqne	r4, ip
    713c:	ea95 0f0c 	teqne	r5, ip
    7140:	f000 f8a7 	bleq	7292 <__aeabi_ddiv+0x16e>
    7144:	eba4 0405 	sub.w	r4, r4, r5
    7148:	ea81 0e03 	eor.w	lr, r1, r3
    714c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    7150:	ea4f 3101 	mov.w	r1, r1, lsl #12
    7154:	f000 8088 	beq.w	7268 <__aeabi_ddiv+0x144>
    7158:	ea4f 3303 	mov.w	r3, r3, lsl #12
    715c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7160:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    7164:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    7168:	ea4f 2202 	mov.w	r2, r2, lsl #8
    716c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    7170:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    7174:	ea4f 2600 	mov.w	r6, r0, lsl #8
    7178:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    717c:	429d      	cmp	r5, r3
    717e:	bf08      	it	eq
    7180:	4296      	cmpeq	r6, r2
    7182:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    7186:	f504 7440 	add.w	r4, r4, #768	; 0x300
    718a:	d202      	bcs.n	7192 <__aeabi_ddiv+0x6e>
    718c:	085b      	lsrs	r3, r3, #1
    718e:	ea4f 0232 	mov.w	r2, r2, rrx
    7192:	1ab6      	subs	r6, r6, r2
    7194:	eb65 0503 	sbc.w	r5, r5, r3
    7198:	085b      	lsrs	r3, r3, #1
    719a:	ea4f 0232 	mov.w	r2, r2, rrx
    719e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    71a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    71a6:	ebb6 0e02 	subs.w	lr, r6, r2
    71aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    71ae:	bf22      	ittt	cs
    71b0:	1ab6      	subcs	r6, r6, r2
    71b2:	4675      	movcs	r5, lr
    71b4:	ea40 000c 	orrcs.w	r0, r0, ip
    71b8:	085b      	lsrs	r3, r3, #1
    71ba:	ea4f 0232 	mov.w	r2, r2, rrx
    71be:	ebb6 0e02 	subs.w	lr, r6, r2
    71c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    71c6:	bf22      	ittt	cs
    71c8:	1ab6      	subcs	r6, r6, r2
    71ca:	4675      	movcs	r5, lr
    71cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    71d0:	085b      	lsrs	r3, r3, #1
    71d2:	ea4f 0232 	mov.w	r2, r2, rrx
    71d6:	ebb6 0e02 	subs.w	lr, r6, r2
    71da:	eb75 0e03 	sbcs.w	lr, r5, r3
    71de:	bf22      	ittt	cs
    71e0:	1ab6      	subcs	r6, r6, r2
    71e2:	4675      	movcs	r5, lr
    71e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    71e8:	085b      	lsrs	r3, r3, #1
    71ea:	ea4f 0232 	mov.w	r2, r2, rrx
    71ee:	ebb6 0e02 	subs.w	lr, r6, r2
    71f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    71f6:	bf22      	ittt	cs
    71f8:	1ab6      	subcs	r6, r6, r2
    71fa:	4675      	movcs	r5, lr
    71fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    7200:	ea55 0e06 	orrs.w	lr, r5, r6
    7204:	d018      	beq.n	7238 <__aeabi_ddiv+0x114>
    7206:	ea4f 1505 	mov.w	r5, r5, lsl #4
    720a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    720e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    7212:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    7216:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    721a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    721e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    7222:	d1c0      	bne.n	71a6 <__aeabi_ddiv+0x82>
    7224:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    7228:	d10b      	bne.n	7242 <__aeabi_ddiv+0x11e>
    722a:	ea41 0100 	orr.w	r1, r1, r0
    722e:	f04f 0000 	mov.w	r0, #0
    7232:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    7236:	e7b6      	b.n	71a6 <__aeabi_ddiv+0x82>
    7238:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    723c:	bf04      	itt	eq
    723e:	4301      	orreq	r1, r0
    7240:	2000      	moveq	r0, #0
    7242:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    7246:	bf88      	it	hi
    7248:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    724c:	f63f aeaf 	bhi.w	6fae <__aeabi_dmul+0xde>
    7250:	ebb5 0c03 	subs.w	ip, r5, r3
    7254:	bf04      	itt	eq
    7256:	ebb6 0c02 	subseq.w	ip, r6, r2
    725a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    725e:	f150 0000 	adcs.w	r0, r0, #0
    7262:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    7266:	bd70      	pop	{r4, r5, r6, pc}
    7268:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    726c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    7270:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    7274:	bfc2      	ittt	gt
    7276:	ebd4 050c 	rsbsgt	r5, r4, ip
    727a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    727e:	bd70      	popgt	{r4, r5, r6, pc}
    7280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    7284:	f04f 0e00 	mov.w	lr, #0
    7288:	3c01      	subs	r4, #1
    728a:	e690      	b.n	6fae <__aeabi_dmul+0xde>
    728c:	ea45 0e06 	orr.w	lr, r5, r6
    7290:	e68d      	b.n	6fae <__aeabi_dmul+0xde>
    7292:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    7296:	ea94 0f0c 	teq	r4, ip
    729a:	bf08      	it	eq
    729c:	ea95 0f0c 	teqeq	r5, ip
    72a0:	f43f af3b 	beq.w	711a <__aeabi_dmul+0x24a>
    72a4:	ea94 0f0c 	teq	r4, ip
    72a8:	d10a      	bne.n	72c0 <__aeabi_ddiv+0x19c>
    72aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    72ae:	f47f af34 	bne.w	711a <__aeabi_dmul+0x24a>
    72b2:	ea95 0f0c 	teq	r5, ip
    72b6:	f47f af25 	bne.w	7104 <__aeabi_dmul+0x234>
    72ba:	4610      	mov	r0, r2
    72bc:	4619      	mov	r1, r3
    72be:	e72c      	b.n	711a <__aeabi_dmul+0x24a>
    72c0:	ea95 0f0c 	teq	r5, ip
    72c4:	d106      	bne.n	72d4 <__aeabi_ddiv+0x1b0>
    72c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    72ca:	f43f aefd 	beq.w	70c8 <__aeabi_dmul+0x1f8>
    72ce:	4610      	mov	r0, r2
    72d0:	4619      	mov	r1, r3
    72d2:	e722      	b.n	711a <__aeabi_dmul+0x24a>
    72d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    72d8:	bf18      	it	ne
    72da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    72de:	f47f aec5 	bne.w	706c <__aeabi_dmul+0x19c>
    72e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    72e6:	f47f af0d 	bne.w	7104 <__aeabi_dmul+0x234>
    72ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    72ee:	f47f aeeb 	bne.w	70c8 <__aeabi_dmul+0x1f8>
    72f2:	e712      	b.n	711a <__aeabi_dmul+0x24a>

000072f4 <__gedf2>:
    72f4:	f04f 3cff 	mov.w	ip, #4294967295
    72f8:	e006      	b.n	7308 <__cmpdf2+0x4>
    72fa:	bf00      	nop

000072fc <__ledf2>:
    72fc:	f04f 0c01 	mov.w	ip, #1
    7300:	e002      	b.n	7308 <__cmpdf2+0x4>
    7302:	bf00      	nop

00007304 <__cmpdf2>:
    7304:	f04f 0c01 	mov.w	ip, #1
    7308:	f84d cd04 	str.w	ip, [sp, #-4]!
    730c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    7310:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7314:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    7318:	bf18      	it	ne
    731a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    731e:	d01b      	beq.n	7358 <__cmpdf2+0x54>
    7320:	b001      	add	sp, #4
    7322:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    7326:	bf0c      	ite	eq
    7328:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    732c:	ea91 0f03 	teqne	r1, r3
    7330:	bf02      	ittt	eq
    7332:	ea90 0f02 	teqeq	r0, r2
    7336:	2000      	moveq	r0, #0
    7338:	4770      	bxeq	lr
    733a:	f110 0f00 	cmn.w	r0, #0
    733e:	ea91 0f03 	teq	r1, r3
    7342:	bf58      	it	pl
    7344:	4299      	cmppl	r1, r3
    7346:	bf08      	it	eq
    7348:	4290      	cmpeq	r0, r2
    734a:	bf2c      	ite	cs
    734c:	17d8      	asrcs	r0, r3, #31
    734e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    7352:	f040 0001 	orr.w	r0, r0, #1
    7356:	4770      	bx	lr
    7358:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    735c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7360:	d102      	bne.n	7368 <__cmpdf2+0x64>
    7362:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    7366:	d107      	bne.n	7378 <__cmpdf2+0x74>
    7368:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    736c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    7370:	d1d6      	bne.n	7320 <__cmpdf2+0x1c>
    7372:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    7376:	d0d3      	beq.n	7320 <__cmpdf2+0x1c>
    7378:	f85d 0b04 	ldr.w	r0, [sp], #4
    737c:	4770      	bx	lr
    737e:	bf00      	nop

00007380 <__aeabi_cdrcmple>:
    7380:	4684      	mov	ip, r0
    7382:	4610      	mov	r0, r2
    7384:	4662      	mov	r2, ip
    7386:	468c      	mov	ip, r1
    7388:	4619      	mov	r1, r3
    738a:	4663      	mov	r3, ip
    738c:	e000      	b.n	7390 <__aeabi_cdcmpeq>
    738e:	bf00      	nop

00007390 <__aeabi_cdcmpeq>:
    7390:	b501      	push	{r0, lr}
    7392:	f7ff ffb7 	bl	7304 <__cmpdf2>
    7396:	2800      	cmp	r0, #0
    7398:	bf48      	it	mi
    739a:	f110 0f00 	cmnmi.w	r0, #0
    739e:	bd01      	pop	{r0, pc}

000073a0 <__aeabi_dcmpeq>:
    73a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    73a4:	f7ff fff4 	bl	7390 <__aeabi_cdcmpeq>
    73a8:	bf0c      	ite	eq
    73aa:	2001      	moveq	r0, #1
    73ac:	2000      	movne	r0, #0
    73ae:	f85d fb08 	ldr.w	pc, [sp], #8
    73b2:	bf00      	nop

000073b4 <__aeabi_dcmplt>:
    73b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    73b8:	f7ff ffea 	bl	7390 <__aeabi_cdcmpeq>
    73bc:	bf34      	ite	cc
    73be:	2001      	movcc	r0, #1
    73c0:	2000      	movcs	r0, #0
    73c2:	f85d fb08 	ldr.w	pc, [sp], #8
    73c6:	bf00      	nop

000073c8 <__aeabi_dcmple>:
    73c8:	f84d ed08 	str.w	lr, [sp, #-8]!
    73cc:	f7ff ffe0 	bl	7390 <__aeabi_cdcmpeq>
    73d0:	bf94      	ite	ls
    73d2:	2001      	movls	r0, #1
    73d4:	2000      	movhi	r0, #0
    73d6:	f85d fb08 	ldr.w	pc, [sp], #8
    73da:	bf00      	nop

000073dc <__aeabi_dcmpge>:
    73dc:	f84d ed08 	str.w	lr, [sp, #-8]!
    73e0:	f7ff ffce 	bl	7380 <__aeabi_cdrcmple>
    73e4:	bf94      	ite	ls
    73e6:	2001      	movls	r0, #1
    73e8:	2000      	movhi	r0, #0
    73ea:	f85d fb08 	ldr.w	pc, [sp], #8
    73ee:	bf00      	nop

000073f0 <__aeabi_dcmpgt>:
    73f0:	f84d ed08 	str.w	lr, [sp, #-8]!
    73f4:	f7ff ffc4 	bl	7380 <__aeabi_cdrcmple>
    73f8:	bf34      	ite	cc
    73fa:	2001      	movcc	r0, #1
    73fc:	2000      	movcs	r0, #0
    73fe:	f85d fb08 	ldr.w	pc, [sp], #8
    7402:	bf00      	nop

00007404 <__aeabi_dcmpun>:
    7404:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    7408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    740c:	d102      	bne.n	7414 <__aeabi_dcmpun+0x10>
    740e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    7412:	d10a      	bne.n	742a <__aeabi_dcmpun+0x26>
    7414:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    7418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    741c:	d102      	bne.n	7424 <__aeabi_dcmpun+0x20>
    741e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    7422:	d102      	bne.n	742a <__aeabi_dcmpun+0x26>
    7424:	f04f 0000 	mov.w	r0, #0
    7428:	4770      	bx	lr
    742a:	f04f 0001 	mov.w	r0, #1
    742e:	4770      	bx	lr

00007430 <__aeabi_d2iz>:
    7430:	ea4f 0241 	mov.w	r2, r1, lsl #1
    7434:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    7438:	d215      	bcs.n	7466 <__aeabi_d2iz+0x36>
    743a:	d511      	bpl.n	7460 <__aeabi_d2iz+0x30>
    743c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    7440:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    7444:	d912      	bls.n	746c <__aeabi_d2iz+0x3c>
    7446:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    744a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    744e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    7452:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    7456:	fa23 f002 	lsr.w	r0, r3, r2
    745a:	bf18      	it	ne
    745c:	4240      	negne	r0, r0
    745e:	4770      	bx	lr
    7460:	f04f 0000 	mov.w	r0, #0
    7464:	4770      	bx	lr
    7466:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    746a:	d105      	bne.n	7478 <__aeabi_d2iz+0x48>
    746c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    7470:	bf08      	it	eq
    7472:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    7476:	4770      	bx	lr
    7478:	f04f 0000 	mov.w	r0, #0
    747c:	4770      	bx	lr
    747e:	bf00      	nop

00007480 <__aeabi_frsub>:
    7480:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    7484:	e002      	b.n	748c <__addsf3>
    7486:	bf00      	nop

00007488 <__aeabi_fsub>:
    7488:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000748c <__addsf3>:
    748c:	0042      	lsls	r2, r0, #1
    748e:	bf1f      	itttt	ne
    7490:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    7494:	ea92 0f03 	teqne	r2, r3
    7498:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    749c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    74a0:	d06a      	beq.n	7578 <__addsf3+0xec>
    74a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
    74a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    74aa:	bfc1      	itttt	gt
    74ac:	18d2      	addgt	r2, r2, r3
    74ae:	4041      	eorgt	r1, r0
    74b0:	4048      	eorgt	r0, r1
    74b2:	4041      	eorgt	r1, r0
    74b4:	bfb8      	it	lt
    74b6:	425b      	neglt	r3, r3
    74b8:	2b19      	cmp	r3, #25
    74ba:	bf88      	it	hi
    74bc:	4770      	bxhi	lr
    74be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    74c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    74c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    74ca:	bf18      	it	ne
    74cc:	4240      	negne	r0, r0
    74ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    74d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    74d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    74da:	bf18      	it	ne
    74dc:	4249      	negne	r1, r1
    74de:	ea92 0f03 	teq	r2, r3
    74e2:	d03f      	beq.n	7564 <__addsf3+0xd8>
    74e4:	f1a2 0201 	sub.w	r2, r2, #1
    74e8:	fa41 fc03 	asr.w	ip, r1, r3
    74ec:	eb10 000c 	adds.w	r0, r0, ip
    74f0:	f1c3 0320 	rsb	r3, r3, #32
    74f4:	fa01 f103 	lsl.w	r1, r1, r3
    74f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    74fc:	d502      	bpl.n	7504 <__addsf3+0x78>
    74fe:	4249      	negs	r1, r1
    7500:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    7504:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7508:	d313      	bcc.n	7532 <__addsf3+0xa6>
    750a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    750e:	d306      	bcc.n	751e <__addsf3+0x92>
    7510:	0840      	lsrs	r0, r0, #1
    7512:	ea4f 0131 	mov.w	r1, r1, rrx
    7516:	f102 0201 	add.w	r2, r2, #1
    751a:	2afe      	cmp	r2, #254	; 0xfe
    751c:	d251      	bcs.n	75c2 <__addsf3+0x136>
    751e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    7522:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    7526:	bf08      	it	eq
    7528:	f020 0001 	biceq.w	r0, r0, #1
    752c:	ea40 0003 	orr.w	r0, r0, r3
    7530:	4770      	bx	lr
    7532:	0049      	lsls	r1, r1, #1
    7534:	eb40 0000 	adc.w	r0, r0, r0
    7538:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    753c:	f1a2 0201 	sub.w	r2, r2, #1
    7540:	d1ed      	bne.n	751e <__addsf3+0x92>
    7542:	fab0 fc80 	clz	ip, r0
    7546:	f1ac 0c08 	sub.w	ip, ip, #8
    754a:	ebb2 020c 	subs.w	r2, r2, ip
    754e:	fa00 f00c 	lsl.w	r0, r0, ip
    7552:	bfaa      	itet	ge
    7554:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    7558:	4252      	neglt	r2, r2
    755a:	4318      	orrge	r0, r3
    755c:	bfbc      	itt	lt
    755e:	40d0      	lsrlt	r0, r2
    7560:	4318      	orrlt	r0, r3
    7562:	4770      	bx	lr
    7564:	f092 0f00 	teq	r2, #0
    7568:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    756c:	bf06      	itte	eq
    756e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    7572:	3201      	addeq	r2, #1
    7574:	3b01      	subne	r3, #1
    7576:	e7b5      	b.n	74e4 <__addsf3+0x58>
    7578:	ea4f 0341 	mov.w	r3, r1, lsl #1
    757c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    7580:	bf18      	it	ne
    7582:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    7586:	d021      	beq.n	75cc <__addsf3+0x140>
    7588:	ea92 0f03 	teq	r2, r3
    758c:	d004      	beq.n	7598 <__addsf3+0x10c>
    758e:	f092 0f00 	teq	r2, #0
    7592:	bf08      	it	eq
    7594:	4608      	moveq	r0, r1
    7596:	4770      	bx	lr
    7598:	ea90 0f01 	teq	r0, r1
    759c:	bf1c      	itt	ne
    759e:	2000      	movne	r0, #0
    75a0:	4770      	bxne	lr
    75a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    75a6:	d104      	bne.n	75b2 <__addsf3+0x126>
    75a8:	0040      	lsls	r0, r0, #1
    75aa:	bf28      	it	cs
    75ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    75b0:	4770      	bx	lr
    75b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    75b6:	bf3c      	itt	cc
    75b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    75bc:	4770      	bxcc	lr
    75be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    75c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    75c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    75ca:	4770      	bx	lr
    75cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
    75d0:	bf16      	itet	ne
    75d2:	4608      	movne	r0, r1
    75d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    75d8:	4601      	movne	r1, r0
    75da:	0242      	lsls	r2, r0, #9
    75dc:	bf06      	itte	eq
    75de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    75e2:	ea90 0f01 	teqeq	r0, r1
    75e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    75ea:	4770      	bx	lr

000075ec <__aeabi_ui2f>:
    75ec:	f04f 0300 	mov.w	r3, #0
    75f0:	e004      	b.n	75fc <__aeabi_i2f+0x8>
    75f2:	bf00      	nop

000075f4 <__aeabi_i2f>:
    75f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    75f8:	bf48      	it	mi
    75fa:	4240      	negmi	r0, r0
    75fc:	ea5f 0c00 	movs.w	ip, r0
    7600:	bf08      	it	eq
    7602:	4770      	bxeq	lr
    7604:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    7608:	4601      	mov	r1, r0
    760a:	f04f 0000 	mov.w	r0, #0
    760e:	e01c      	b.n	764a <__aeabi_l2f+0x2a>

00007610 <__aeabi_ul2f>:
    7610:	ea50 0201 	orrs.w	r2, r0, r1
    7614:	bf08      	it	eq
    7616:	4770      	bxeq	lr
    7618:	f04f 0300 	mov.w	r3, #0
    761c:	e00a      	b.n	7634 <__aeabi_l2f+0x14>
    761e:	bf00      	nop

00007620 <__aeabi_l2f>:
    7620:	ea50 0201 	orrs.w	r2, r0, r1
    7624:	bf08      	it	eq
    7626:	4770      	bxeq	lr
    7628:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    762c:	d502      	bpl.n	7634 <__aeabi_l2f+0x14>
    762e:	4240      	negs	r0, r0
    7630:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7634:	ea5f 0c01 	movs.w	ip, r1
    7638:	bf02      	ittt	eq
    763a:	4684      	moveq	ip, r0
    763c:	4601      	moveq	r1, r0
    763e:	2000      	moveq	r0, #0
    7640:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    7644:	bf08      	it	eq
    7646:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    764a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    764e:	fabc f28c 	clz	r2, ip
    7652:	3a08      	subs	r2, #8
    7654:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    7658:	db10      	blt.n	767c <__aeabi_l2f+0x5c>
    765a:	fa01 fc02 	lsl.w	ip, r1, r2
    765e:	4463      	add	r3, ip
    7660:	fa00 fc02 	lsl.w	ip, r0, r2
    7664:	f1c2 0220 	rsb	r2, r2, #32
    7668:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    766c:	fa20 f202 	lsr.w	r2, r0, r2
    7670:	eb43 0002 	adc.w	r0, r3, r2
    7674:	bf08      	it	eq
    7676:	f020 0001 	biceq.w	r0, r0, #1
    767a:	4770      	bx	lr
    767c:	f102 0220 	add.w	r2, r2, #32
    7680:	fa01 fc02 	lsl.w	ip, r1, r2
    7684:	f1c2 0220 	rsb	r2, r2, #32
    7688:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    768c:	fa21 f202 	lsr.w	r2, r1, r2
    7690:	eb43 0002 	adc.w	r0, r3, r2
    7694:	bf08      	it	eq
    7696:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    769a:	4770      	bx	lr

0000769c <__gesf2>:
    769c:	f04f 3cff 	mov.w	ip, #4294967295
    76a0:	e006      	b.n	76b0 <__cmpsf2+0x4>
    76a2:	bf00      	nop

000076a4 <__lesf2>:
    76a4:	f04f 0c01 	mov.w	ip, #1
    76a8:	e002      	b.n	76b0 <__cmpsf2+0x4>
    76aa:	bf00      	nop

000076ac <__cmpsf2>:
    76ac:	f04f 0c01 	mov.w	ip, #1
    76b0:	f84d cd04 	str.w	ip, [sp, #-4]!
    76b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    76b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    76bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    76c0:	bf18      	it	ne
    76c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    76c6:	d011      	beq.n	76ec <__cmpsf2+0x40>
    76c8:	b001      	add	sp, #4
    76ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    76ce:	bf18      	it	ne
    76d0:	ea90 0f01 	teqne	r0, r1
    76d4:	bf58      	it	pl
    76d6:	ebb2 0003 	subspl.w	r0, r2, r3
    76da:	bf88      	it	hi
    76dc:	17c8      	asrhi	r0, r1, #31
    76de:	bf38      	it	cc
    76e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    76e4:	bf18      	it	ne
    76e6:	f040 0001 	orrne.w	r0, r0, #1
    76ea:	4770      	bx	lr
    76ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    76f0:	d102      	bne.n	76f8 <__cmpsf2+0x4c>
    76f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    76f6:	d105      	bne.n	7704 <__cmpsf2+0x58>
    76f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    76fc:	d1e4      	bne.n	76c8 <__cmpsf2+0x1c>
    76fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    7702:	d0e1      	beq.n	76c8 <__cmpsf2+0x1c>
    7704:	f85d 0b04 	ldr.w	r0, [sp], #4
    7708:	4770      	bx	lr
    770a:	bf00      	nop

0000770c <__aeabi_cfrcmple>:
    770c:	4684      	mov	ip, r0
    770e:	4608      	mov	r0, r1
    7710:	4661      	mov	r1, ip
    7712:	e7ff      	b.n	7714 <__aeabi_cfcmpeq>

00007714 <__aeabi_cfcmpeq>:
    7714:	b50f      	push	{r0, r1, r2, r3, lr}
    7716:	f7ff ffc9 	bl	76ac <__cmpsf2>
    771a:	2800      	cmp	r0, #0
    771c:	bf48      	it	mi
    771e:	f110 0f00 	cmnmi.w	r0, #0
    7722:	bd0f      	pop	{r0, r1, r2, r3, pc}

00007724 <__aeabi_fcmpeq>:
    7724:	f84d ed08 	str.w	lr, [sp, #-8]!
    7728:	f7ff fff4 	bl	7714 <__aeabi_cfcmpeq>
    772c:	bf0c      	ite	eq
    772e:	2001      	moveq	r0, #1
    7730:	2000      	movne	r0, #0
    7732:	f85d fb08 	ldr.w	pc, [sp], #8
    7736:	bf00      	nop

00007738 <__aeabi_fcmplt>:
    7738:	f84d ed08 	str.w	lr, [sp, #-8]!
    773c:	f7ff ffea 	bl	7714 <__aeabi_cfcmpeq>
    7740:	bf34      	ite	cc
    7742:	2001      	movcc	r0, #1
    7744:	2000      	movcs	r0, #0
    7746:	f85d fb08 	ldr.w	pc, [sp], #8
    774a:	bf00      	nop

0000774c <__aeabi_fcmple>:
    774c:	f84d ed08 	str.w	lr, [sp, #-8]!
    7750:	f7ff ffe0 	bl	7714 <__aeabi_cfcmpeq>
    7754:	bf94      	ite	ls
    7756:	2001      	movls	r0, #1
    7758:	2000      	movhi	r0, #0
    775a:	f85d fb08 	ldr.w	pc, [sp], #8
    775e:	bf00      	nop

00007760 <__aeabi_fcmpge>:
    7760:	f84d ed08 	str.w	lr, [sp, #-8]!
    7764:	f7ff ffd2 	bl	770c <__aeabi_cfrcmple>
    7768:	bf94      	ite	ls
    776a:	2001      	movls	r0, #1
    776c:	2000      	movhi	r0, #0
    776e:	f85d fb08 	ldr.w	pc, [sp], #8
    7772:	bf00      	nop

00007774 <__aeabi_fcmpgt>:
    7774:	f84d ed08 	str.w	lr, [sp, #-8]!
    7778:	f7ff ffc8 	bl	770c <__aeabi_cfrcmple>
    777c:	bf34      	ite	cc
    777e:	2001      	movcc	r0, #1
    7780:	2000      	movcs	r0, #0
    7782:	f85d fb08 	ldr.w	pc, [sp], #8
    7786:	bf00      	nop

00007788 <__aeabi_f2iz>:
    7788:	ea4f 0240 	mov.w	r2, r0, lsl #1
    778c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    7790:	d30f      	bcc.n	77b2 <__aeabi_f2iz+0x2a>
    7792:	f04f 039e 	mov.w	r3, #158	; 0x9e
    7796:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    779a:	d90d      	bls.n	77b8 <__aeabi_f2iz+0x30>
    779c:	ea4f 2300 	mov.w	r3, r0, lsl #8
    77a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    77a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    77a8:	fa23 f002 	lsr.w	r0, r3, r2
    77ac:	bf18      	it	ne
    77ae:	4240      	negne	r0, r0
    77b0:	4770      	bx	lr
    77b2:	f04f 0000 	mov.w	r0, #0
    77b6:	4770      	bx	lr
    77b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
    77bc:	d101      	bne.n	77c2 <__aeabi_f2iz+0x3a>
    77be:	0242      	lsls	r2, r0, #9
    77c0:	d105      	bne.n	77ce <__aeabi_f2iz+0x46>
    77c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    77c6:	bf08      	it	eq
    77c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    77cc:	4770      	bx	lr
    77ce:	f04f 0000 	mov.w	r0, #0
    77d2:	4770      	bx	lr
    77d4:	0f0f0f0f 	.word	0x0f0f0f0f
    77d8:	0000000f 	.word	0x0000000f
    77dc:	00643425 	.word	0x00643425
    77e0:	00444f4e 	.word	0x00444f4e
    77e4:	0000444f 	.word	0x0000444f
    77e8:	0000464e 	.word	0x0000464e
    77ec:	434c4143 	.word	0x434c4143
    77f0:	00000000 	.word	0x00000000
    77f4:	64616552 	.word	0x64616552
    77f8:	0079      	.short	0x0079
    77fa:	4e49      	.short	0x4e49
    77fc:	6e690046 	.word	0x6e690046
    7800:	414e0066 	.word	0x414e0066
    7804:	616e004e 	.word	0x616e004e
    7808:	0030006e 	.word	0x0030006e
    780c:	33323130 	.word	0x33323130
    7810:	37363534 	.word	0x37363534
    7814:	42413938 	.word	0x42413938
    7818:	46454443 	.word	0x46454443
    781c:	32313000 	.word	0x32313000
    7820:	36353433 	.word	0x36353433
    7824:	61393837 	.word	0x61393837
    7828:	65646362 	.word	0x65646362
    782c:	0066      	.short	0x0066
    782e:	6e49      	.short	0x6e49
    7830:	696e6966 	.word	0x696e6966
    7834:	4e007974 	.word	0x4e007974
    7838:	00004e61 	.word	0x00004e61
    783c:	00000000 	.word	0x00000000

00007840 <__mprec_bigtens>:
    7840:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    7850:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    7860:	7f73bf3c 75154fdd                       <.s..O.u

00007868 <__mprec_tens>:
    7868:	00000000 3ff00000 00000000 40240000     .......?......$@
    7878:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    7888:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    7898:	00000000 412e8480 00000000 416312d0     .......A......cA
    78a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    78b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    78c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    78d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    78e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    78f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    7908:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    7918:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    7928:	79d99db4 44ea7843                       ...yCx.D

00007930 <p05.6047>:
    7930:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    7940:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    7950:	5849534f 00002e00                                OSIX...

00007957 <_ctype_>:
    7957:	20202000 20202020 28282020 20282828     .         ((((( 
    7967:	20202020 20202020 20202020 20202020                     
    7977:	10108820 10101010 10101010 10101010      ...............
    7987:	04040410 04040404 10040404 10101010     ................
    7997:	41411010 41414141 01010101 01010101     ..AAAAAA........
    79a7:	01010101 01010101 01010101 10101010     ................
    79b7:	42421010 42424242 02020202 02020202     ..BBBBBB........
    79c7:	02020202 02020202 02020202 10101010     ................
    79d7:	00000020 00000000 00000000 00000000      ...............
	...

00007a58 <_init>:
    7a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a5a:	bf00      	nop
    7a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7a5e:	bc08      	pop	{r3}
    7a60:	469e      	mov	lr, r3
    7a62:	4770      	bx	lr

00007a64 <__init_array_start>:
    7a64:	000001a5 	.word	0x000001a5

00007a68 <_fini>:
    7a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a6a:	bf00      	nop
    7a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7a6e:	bc08      	pop	{r3}
    7a70:	469e      	mov	lr, r3
    7a72:	4770      	bx	lr

00007a74 <__fini_array_start>:
    7a74:	00000181 	.word	0x00000181

Disassembly of section .relocate:

20000000 <bpm_ps_no_halt_exec>:
{
20000000:	b480      	push	{r7}
20000002:	b085      	sub	sp, #20
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]
20000008:	6039      	str	r1, [r7, #0]
	bool b_psok = false;
2000000a:	2300      	movs	r3, #0
2000000c:	73fb      	strb	r3, [r7, #15]
	bool b_timeout = false;
2000000e:	2300      	movs	r3, #0
20000010:	73bb      	strb	r3, [r7, #14]
	BPM_UNLOCK(PMCON);
20000012:	4b15      	ldr	r3, [pc, #84]	; (20000068 <bpm_ps_no_halt_exec+0x68>)
20000014:	4a15      	ldr	r2, [pc, #84]	; (2000006c <bpm_ps_no_halt_exec+0x6c>)
20000016:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	683a      	ldr	r2, [r7, #0]
2000001c:	61da      	str	r2, [r3, #28]
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
2000001e:	4b12      	ldr	r3, [pc, #72]	; (20000068 <bpm_ps_no_halt_exec+0x68>)
20000020:	695b      	ldr	r3, [r3, #20]
20000022:	f003 0301 	and.w	r3, r3, #1
20000026:	2b00      	cmp	r3, #0
20000028:	bf14      	ite	ne
2000002a:	2301      	movne	r3, #1
2000002c:	2300      	moveq	r3, #0
2000002e:	73fb      	strb	r3, [r7, #15]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000030:	4b0f      	ldr	r3, [pc, #60]	; (20000070 <bpm_ps_no_halt_exec+0x70>)
20000032:	681b      	ldr	r3, [r3, #0]
20000034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000038:	2b00      	cmp	r3, #0
2000003a:	bf14      	ite	ne
2000003c:	2301      	movne	r3, #1
2000003e:	2300      	moveq	r3, #0
20000040:	73bb      	strb	r3, [r7, #14]
	} while (!b_psok && !b_timeout);
20000042:	7bfb      	ldrb	r3, [r7, #15]
20000044:	f083 0301 	eor.w	r3, r3, #1
20000048:	b2db      	uxtb	r3, r3
2000004a:	2b00      	cmp	r3, #0
2000004c:	d005      	beq.n	2000005a <bpm_ps_no_halt_exec+0x5a>
2000004e:	7bbb      	ldrb	r3, [r7, #14]
20000050:	f083 0301 	eor.w	r3, r3, #1
20000054:	b2db      	uxtb	r3, r3
20000056:	2b00      	cmp	r3, #0
20000058:	d1e1      	bne.n	2000001e <bpm_ps_no_halt_exec+0x1e>
	return b_psok;
2000005a:	7bfb      	ldrb	r3, [r7, #15]
}
2000005c:	4618      	mov	r0, r3
2000005e:	3714      	adds	r7, #20
20000060:	46bd      	mov	sp, r7
20000062:	bc80      	pop	{r7}
20000064:	4770      	bx	lr
20000066:	bf00      	nop
20000068:	400f0000 	.word	0x400f0000
2000006c:	aa00001c 	.word	0xaa00001c
20000070:	e000e010 	.word	0xe000e010

20000074 <g_interrupt_enabled>:
20000074:	00000001                                ....

20000078 <first_time.9638>:
20000078:	00000001 00000000 00000000 00000000     ................
	...

200000dc <_impure_ptr>:
200000dc:	200000e0                                ... 

200000e0 <impure_data>:
	...

20000140 <__global_locale>:
20000140:	00000043 00000000 00000000 00000000     C...............
	...
20000160:	00000043 00000000 00000000 00000000     C...............
	...
20000180:	00000043 00000000 00000000 00000000     C...............
	...
200001a0:	00000043 00000000 00000000 00000000     C...............
	...
200001c0:	00000043 00000000 00000000 00000000     C...............
	...
200001e0:	00000043 00000000 00000000 00000000     C...............
	...
20000200:	00000043 00000000 00000000 00000000     C...............
	...
20000220:	00006b35 00006a8d 00000000 00007957     5k...j......Wy..
20000230:	00007955 00007941 00007941 00007941     Uy..Ay..Ay..Ay..
20000240:	00007941 00007941 00007941 00007941     Ay..Ay..Ay..Ay..
20000250:	00007941 00007941 ffffffff ffffffff     Ay..Ay..........
20000260:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000288:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
